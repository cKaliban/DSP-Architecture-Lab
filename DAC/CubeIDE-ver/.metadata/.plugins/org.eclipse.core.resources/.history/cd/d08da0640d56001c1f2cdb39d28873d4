/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DAC_BUFF_LEN	1024
#define  DMA_BUFF_LEN	16
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
uint16_t dma_buff[DMA_BUFF_LEN];
const uint32_t dac_data[DAC_BUFF_LEN] = {0x800,0x80c,0x819,0x825,0x832,0x83e,0x84b,0x857,
		0x864,0x871,0x87d,0x88a,0x896,0x8a3,0x8af,0x8bc,
		0x8c8,0x8d5,0x8e1,0x8ee,0x8fa,0x907,0x913,0x91f,
		0x92c,0x938,0x945,0x951,0x95e,0x96a,0x976,0x983,
		0x98f,0x99b,0x9a8,0x9b4,0x9c0,0x9cc,0x9d9,0x9e5,
		0x9f1,0x9fd,0xa09,0xa15,0xa22,0xa2e,0xa3a,0xa46,
		0xa52,0xa5e,0xa6a,0xa76,0xa82,0xa8e,0xa9a,0xaa5,
		0xab1,0xabd,0xac9,0xad5,0xae0,0xaec,0xaf8,0xb03,
		0xb0f,0xb1b,0xb26,0xb32,0xb3d,0xb49,0xb54,0xb60,
		0xb6b,0xb76,0xb82,0xb8d,0xb98,0xba3,0xbae,0xbba,
		0xbc5,0xbd0,0xbdb,0xbe6,0xbf1,0xbfc,0xc06,0xc11,
		0xc1c,0xc27,0xc32,0xc3c,0xc47,0xc52,0xc5c,0xc67,
		0xc71,0xc7b,0xc86,0xc90,0xc9a,0xca5,0xcaf,0xcb9,
		0xcc3,0xccd,0xcd7,0xce1,0xceb,0xcf5,0xcff,0xd09,
		0xd12,0xd1c,0xd26,0xd2f,0xd39,0xd42,0xd4c,0xd55,
		0xd5f,0xd68,0xd71,0xd7a,0xd83,0xd8c,0xd95,0xd9e,
		0xda7,0xdb0,0xdb9,0xdc2,0xdca,0xdd3,0xddc,0xde4,
		0xded,0xdf5,0xdfd,0xe06,0xe0e,0xe16,0xe1e,0xe26,
		0xe2e,0xe36,0xe3e,0xe46,0xe4e,0xe55,0xe5d,0xe65,
		0xe6c,0xe74,0xe7b,0xe82,0xe8a,0xe91,0xe98,0xe9f,
		0xea6,0xead,0xeb4,0xebb,0xec1,0xec8,0xecf,0xed5,
		0xedc,0xee2,0xee8,0xeef,0xef5,0xefb,0xf01,0xf07,
		0xf0d,0xf13,0xf19,0xf1f,0xf24,0xf2a,0xf30,0xf35,
		0xf3a,0xf40,0xf45,0xf4a,0xf4f,0xf54,0xf59,0xf5e,
		0xf63,0xf68,0xf6d,0xf71,0xf76,0xf7a,0xf7f,0xf83,
		0xf87,0xf8c,0xf90,0xf94,0xf98,0xf9c,0xf9f,0xfa3,
		0xfa7,0xfaa,0xfae,0xfb1,0xfb5,0xfb8,0xfbb,0xfbf,
		0xfc2,0xfc5,0xfc8,0xfca,0xfcd,0xfd0,0xfd3,0xfd5,
		0xfd8,0xfda,0xfdc,0xfdf,0xfe1,0xfe3,0xfe5,0xfe7,
		0xfe9,0xfeb,0xfec,0xfee,0xff0,0xff1,0xff3,0xff4,
		0xff5,0xff6,0xff7,0xff8,0xff9,0xffa,0xffb,0xffc,
		0xffd,0xffd,0xffe,0xffe,0xffe,0xfff,0xfff,0xfff,
		0xfff,0xfff,0xfff,0xfff,0xffe,0xffe,0xffe,0xffd,
		0xffd,0xffc,0xffb,0xffa,0xff9,0xff8,0xff7,0xff6,
		0xff5,0xff4,0xff3,0xff1,0xff0,0xfee,0xfec,0xfeb,
		0xfe9,0xfe7,0xfe5,0xfe3,0xfe1,0xfdf,0xfdc,0xfda,
		0xfd8,0xfd5,0xfd3,0xfd0,0xfcd,0xfca,0xfc8,0xfc5,
		0xfc2,0xfbf,0xfbb,0xfb8,0xfb5,0xfb1,0xfae,0xfaa,
		0xfa7,0xfa3,0xf9f,0xf9c,0xf98,0xf94,0xf90,0xf8c,
		0xf87,0xf83,0xf7f,0xf7a,0xf76,0xf71,0xf6d,0xf68,
		0xf63,0xf5e,0xf59,0xf54,0xf4f,0xf4a,0xf45,0xf40,
		0xf3a,0xf35,0xf30,0xf2a,0xf24,0xf1f,0xf19,0xf13,
		0xf0d,0xf07,0xf01,0xefb,0xef5,0xeef,0xee8,0xee2,
		0xedc,0xed5,0xecf,0xec8,0xec1,0xebb,0xeb4,0xead,
		0xea6,0xe9f,0xe98,0xe91,0xe8a,0xe82,0xe7b,0xe74,
		0xe6c,0xe65,0xe5d,0xe55,0xe4e,0xe46,0xe3e,0xe36,
		0xe2e,0xe26,0xe1e,0xe16,0xe0e,0xe06,0xdfd,0xdf5,
		0xded,0xde4,0xddc,0xdd3,0xdca,0xdc2,0xdb9,0xdb0,
		0xda7,0xd9e,0xd95,0xd8c,0xd83,0xd7a,0xd71,0xd68,
		0xd5f,0xd55,0xd4c,0xd42,0xd39,0xd2f,0xd26,0xd1c,
		0xd12,0xd09,0xcff,0xcf5,0xceb,0xce1,0xcd7,0xccd,
		0xcc3,0xcb9,0xcaf,0xca5,0xc9a,0xc90,0xc86,0xc7b,
		0xc71,0xc67,0xc5c,0xc52,0xc47,0xc3c,0xc32,0xc27,
		0xc1c,0xc11,0xc06,0xbfc,0xbf1,0xbe6,0xbdb,0xbd0,
		0xbc5,0xbba,0xbae,0xba3,0xb98,0xb8d,0xb82,0xb76,
		0xb6b,0xb60,0xb54,0xb49,0xb3d,0xb32,0xb26,0xb1b,
		0xb0f,0xb03,0xaf8,0xaec,0xae0,0xad5,0xac9,0xabd,
		0xab1,0xaa5,0xa9a,0xa8e,0xa82,0xa76,0xa6a,0xa5e,
		0xa52,0xa46,0xa3a,0xa2e,0xa22,0xa15,0xa09,0x9fd,
		0x9f1,0x9e5,0x9d9,0x9cc,0x9c0,0x9b4,0x9a8,0x99b,
		0x98f,0x983,0x976,0x96a,0x95e,0x951,0x945,0x938,
		0x92c,0x91f,0x913,0x907,0x8fa,0x8ee,0x8e1,0x8d5,
		0x8c8,0x8bc,0x8af,0x8a3,0x896,0x88a,0x87d,0x871,
		0x864,0x857,0x84b,0x83e,0x832,0x825,0x819,0x80c,
		0x800,0x7f3,0x7e6,0x7da,0x7cd,0x7c1,0x7b4,0x7a8,
		0x79b,0x78e,0x782,0x775,0x769,0x75c,0x750,0x743,
		0x737,0x72a,0x71e,0x711,0x705,0x6f8,0x6ec,0x6e0,
		0x6d3,0x6c7,0x6ba,0x6ae,0x6a1,0x695,0x689,0x67c,
		0x670,0x664,0x657,0x64b,0x63f,0x633,0x626,0x61a,
		0x60e,0x602,0x5f6,0x5ea,0x5dd,0x5d1,0x5c5,0x5b9,
		0x5ad,0x5a1,0x595,0x589,0x57d,0x571,0x565,0x55a,
		0x54e,0x542,0x536,0x52a,0x51f,0x513,0x507,0x4fc,
		0x4f0,0x4e4,0x4d9,0x4cd,0x4c2,0x4b6,0x4ab,0x49f,
		0x494,0x489,0x47d,0x472,0x467,0x45c,0x451,0x445,
		0x43a,0x42f,0x424,0x419,0x40e,0x403,0x3f9,0x3ee,
		0x3e3,0x3d8,0x3cd,0x3c3,0x3b8,0x3ad,0x3a3,0x398,
		0x38e,0x384,0x379,0x36f,0x365,0x35a,0x350,0x346,
		0x33c,0x332,0x328,0x31e,0x314,0x30a,0x300,0x2f6,
		0x2ed,0x2e3,0x2d9,0x2d0,0x2c6,0x2bd,0x2b3,0x2aa,
		0x2a0,0x297,0x28e,0x285,0x27c,0x273,0x26a,0x261,
		0x258,0x24f,0x246,0x23d,0x235,0x22c,0x223,0x21b,
		0x212,0x20a,0x202,0x1f9,0x1f1,0x1e9,0x1e1,0x1d9,
		0x1d1,0x1c9,0x1c1,0x1b9,0x1b1,0x1aa,0x1a2,0x19a,
		0x193,0x18b,0x184,0x17d,0x175,0x16e,0x167,0x160,
		0x159,0x152,0x14b,0x144,0x13e,0x137,0x130,0x12a,
		0x123,0x11d,0x117,0x110,0x10a,0x104,0xfe,0xf8,
		0xf2,0xec,0xe6,0xe0,0xdb,0xd5,0xcf,0xca,
		0xc5,0xbf,0xba,0xb5,0xb0,0xab,0xa6,0xa1,
		0x9c,0x97,0x92,0x8e,0x89,0x85,0x80,0x7c,
		0x78,0x73,0x6f,0x6b,0x67,0x63,0x60,0x5c,
		0x58,0x55,0x51,0x4e,0x4a,0x47,0x44,0x40,
		0x3d,0x3a,0x37,0x35,0x32,0x2f,0x2c,0x2a,
		0x27,0x25,0x23,0x20,0x1e,0x1c,0x1a,0x18,
		0x16,0x14,0x13,0x11,0xf,0xe,0xc,0xb,
		0xa,0x9,0x8,0x7,0x6,0x5,0x4,0x3,
		0x2,0x2,0x1,0x1,0x1,0x0,0x0,0x0,
		0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x2,
		0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,
		0xa,0xb,0xc,0xe,0xf,0x11,0x13,0x14,
		0x16,0x18,0x1a,0x1c,0x1e,0x20,0x23,0x25,
		0x27,0x2a,0x2c,0x2f,0x32,0x35,0x37,0x3a,
		0x3d,0x40,0x44,0x47,0x4a,0x4e,0x51,0x55,
		0x58,0x5c,0x60,0x63,0x67,0x6b,0x6f,0x73,
		0x78,0x7c,0x80,0x85,0x89,0x8e,0x92,0x97,
		0x9c,0xa1,0xa6,0xab,0xb0,0xb5,0xba,0xbf,
		0xc5,0xca,0xcf,0xd5,0xdb,0xe0,0xe6,0xec,
		0xf2,0xf8,0xfe,0x104,0x10a,0x110,0x117,0x11d,
		0x123,0x12a,0x130,0x137,0x13e,0x144,0x14b,0x152,
		0x159,0x160,0x167,0x16e,0x175,0x17d,0x184,0x18b,
		0x193,0x19a,0x1a2,0x1aa,0x1b1,0x1b9,0x1c1,0x1c9,
		0x1d1,0x1d9,0x1e1,0x1e9,0x1f1,0x1f9,0x202,0x20a,
		0x212,0x21b,0x223,0x22c,0x235,0x23d,0x246,0x24f,
		0x258,0x261,0x26a,0x273,0x27c,0x285,0x28e,0x297,
		0x2a0,0x2aa,0x2b3,0x2bd,0x2c6,0x2d0,0x2d9,0x2e3,
		0x2ed,0x2f6,0x300,0x30a,0x314,0x31e,0x328,0x332,
		0x33c,0x346,0x350,0x35a,0x365,0x36f,0x379,0x384,
		0x38e,0x398,0x3a3,0x3ad,0x3b8,0x3c3,0x3cd,0x3d8,
		0x3e3,0x3ee,0x3f9,0x403,0x40e,0x419,0x424,0x42f,
		0x43a,0x445,0x451,0x45c,0x467,0x472,0x47d,0x489,
		0x494,0x49f,0x4ab,0x4b6,0x4c2,0x4cd,0x4d9,0x4e4,
		0x4f0,0x4fc,0x507,0x513,0x51f,0x52a,0x536,0x542,
		0x54e,0x55a,0x565,0x571,0x57d,0x589,0x595,0x5a1,
		0x5ad,0x5b9,0x5c5,0x5d1,0x5dd,0x5ea,0x5f6,0x602,
		0x60e,0x61a,0x626,0x633,0x63f,0x64b,0x657,0x664,
		0x670,0x67c,0x689,0x695,0x6a1,0x6ae,0x6ba,0x6c7,
		0x6d3,0x6e0,0x6ec,0x6f8,0x705,0x711,0x71e,0x72a,
		0x737,0x743,0x750,0x75c,0x769,0x775,0x782,0x78e,
		0x79b,0x7a8,0x7b4,0x7c1,0x7cd,0x7da,0x7e6,0x7f3} ;
//uint16_t adc_data_counter = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DAC_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DAC_Init();
  MX_DMA_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, &dma_buff, 16);
//  HAL_TIM_Base_Start(&htim3);
//  HAL_DAC_Start(&hdac, DAC1_CHANNEL_2)
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, (uint32_t*)dac_data, DAC_BUFF_LEN, DAC_ALIGN_12B_R);
  HAL_TIM_Base_Start(&htim2);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 83;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
//	if(adc_data_counter < ADC_BUFF_LEN){
//	uint16_t ovs = 0;
//	for(uint8_t i = 0; i < DMA_BUFF_LEN; i++){
//		ovs += dma_buff[i];
//	}
//	adc_data[adc_data_counter] = (ovs >> 2); // 12-bit measurements -> 14-bit result
//	adc_data_counter++;
//	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_L, ovs);
//	}
//	else{
//		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	}
//}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
