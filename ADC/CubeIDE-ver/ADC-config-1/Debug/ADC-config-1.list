
ADC-config-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe8  08002fe8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ff0  08002ff0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000904  2000000c  08003004  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  08003004  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b48e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d3  00000000  00000000  0002b4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211c5  00000000  00000000  0002e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c091  00000000  00000000  0004f55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d12aa  00000000  00000000  0005b5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d88  00000000  00000000  0012c8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fc0 	.word	0x08002fc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002fc0 	.word	0x08002fc0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb0e 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f812 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f93e 	bl	800074c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d0:	f000 f878 	bl	80005c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80004d4:	f000 f8c8 	bl	8000668 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <main+0x28>)
 80004da:	f000 fbb9 	bl	8000c50 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <main+0x2c>)
 80004e0:	f001 ff90 	bl	8002404 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x24>
 80004e6:	bf00      	nop
 80004e8:	20000074 	.word	0x20000074
 80004ec:	2000002c 	.word	0x2000002c

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fd56 	bl	8002fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a27      	ldr	r2, [pc, #156]	; (80005bc <SystemClock_Config+0xcc>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <SystemClock_Config+0xd0>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000560:	2308      	movs	r3, #8
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000564:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fab4 	bl	8001ae4 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000582:	f000 f999 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000592:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2105      	movs	r1, #5
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fd15 	bl	8001fd4 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b0:	f000 f982 	bl	80008b8 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	; 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_ADC1_Init+0xa0>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC1_Init+0x9c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_ADC1_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0x9c>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0x9c>)
 800062a:	f000 facd 	bl	8000bc8 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000634:	f000 f940 	bl	80008b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000638:	230b      	movs	r3, #11
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0x9c>)
 800064a:	f000 fd41 	bl	80010d0 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000654:	f000 f930 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000074 	.word	0x20000074
 8000664:	40012000 	.word	0x40012000

08000668 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	; 0x38
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
 8000696:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_TIM3_Init+0xdc>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <MX_TIM3_Init+0xe0>)
 800069c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_TIM3_Init+0xdc>)
 80006a0:	2209      	movs	r2, #9
 80006a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <MX_TIM3_Init+0xdc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 167;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_TIM3_Init+0xdc>)
 80006ac:	22a7      	movs	r2, #167	; 0xa7
 80006ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_TIM3_Init+0xdc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_TIM3_Init+0xdc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006bc:	4821      	ldr	r0, [pc, #132]	; (8000744 <MX_TIM3_Init+0xdc>)
 80006be:	f001 fe51 	bl	8002364 <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80006c8:	f000 f8f6 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d6:	4619      	mov	r1, r3
 80006d8:	481a      	ldr	r0, [pc, #104]	; (8000744 <MX_TIM3_Init+0xdc>)
 80006da:	f002 f817 	bl	800270c <HAL_TIM_ConfigClockSource>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80006e4:	f000 f8e8 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006e8:	4816      	ldr	r0, [pc, #88]	; (8000744 <MX_TIM3_Init+0xdc>)
 80006ea:	f001 fef3 	bl	80024d4 <HAL_TIM_PWM_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80006f4:	f000 f8e0 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006f8:	2320      	movs	r3, #32
 80006fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4619      	mov	r1, r3
 8000706:	480f      	ldr	r0, [pc, #60]	; (8000744 <MX_TIM3_Init+0xdc>)
 8000708:	f002 fbb2 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000712:	f000 f8d1 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000716:	2360      	movs	r3, #96	; 0x60
 8000718:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_TIM3_Init+0xdc>)
 800072e:	f001 ff2b 	bl	8002588 <HAL_TIM_PWM_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000738:	f000 f8be 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3738      	adds	r7, #56	; 0x38
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000002c 	.word	0x2000002c
 8000748:	40000400 	.word	0x40000400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <MX_GPIO_Init+0x108>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a3a      	ldr	r2, [pc, #232]	; (8000854 <MX_GPIO_Init+0x108>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b38      	ldr	r3, [pc, #224]	; (8000854 <MX_GPIO_Init+0x108>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <MX_GPIO_Init+0x108>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a33      	ldr	r2, [pc, #204]	; (8000854 <MX_GPIO_Init+0x108>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <MX_GPIO_Init+0x108>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_GPIO_Init+0x108>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a2c      	ldr	r2, [pc, #176]	; (8000854 <MX_GPIO_Init+0x108>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_GPIO_Init+0x108>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_GPIO_Init+0x108>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a25      	ldr	r2, [pc, #148]	; (8000854 <MX_GPIO_Init+0x108>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_GPIO_Init+0x108>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_GPIO_Init+0x108>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <MX_GPIO_Init+0x108>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_GPIO_Init+0x108>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f4:	4818      	ldr	r0, [pc, #96]	; (8000858 <MX_GPIO_Init+0x10c>)
 80007f6:	f001 f941 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4813      	ldr	r0, [pc, #76]	; (800085c <MX_GPIO_Init+0x110>)
 8000810:	f000 ff98 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000814:	2304      	movs	r3, #4
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <MX_GPIO_Init+0x114>)
 8000828:	f000 ff8c 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0x10c>)
 8000846:	f000 ff7d 	bl	8001744 <HAL_GPIO_Init>

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40020000 	.word	0x40020000
 8000860:	40020400 	.word	0x40020400

08000864 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if(adc_data_counter < ADC_BUFF_LEN){
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_ADC_ConvCpltCallback+0x48>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	f5b3 6f85 	cmp.w	r3, #1064	; 0x428
 8000874:	d211      	bcs.n	800089a <HAL_ADC_ConvCpltCallback+0x36>
		adc_data[adc_data_counter] = HAL_ADC_GetValue(hadc);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 fc09 	bl	800108e <HAL_ADC_GetValue>
 800087c:	4601      	mov	r1, r0
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_ADC_ConvCpltCallback+0x48>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	b289      	uxth	r1, r1
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000888:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		adc_data_counter++;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_ADC_ConvCpltCallback+0x48>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	b29a      	uxth	r2, r3
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_ADC_ConvCpltCallback+0x48>)
 8000896:	801a      	strh	r2, [r3, #0]
	}
	else{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	}

}
 8000898:	e004      	b.n	80008a4 <HAL_ADC_ConvCpltCallback+0x40>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_ADC_ConvCpltCallback+0x50>)
 80008a0:	f001 f905 	bl	8001aae <HAL_GPIO_TogglePin>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000028 	.word	0x20000028
 80008b0:	200000bc 	.word	0x200000bc
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000906:	2007      	movs	r0, #7
 8000908:	f000 feda 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <HAL_ADC_MspInit+0x8c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12f      	bne.n	800099a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_ADC_MspInit+0x90>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_ADC_MspInit+0x90>)
 8000944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_ADC_MspInit+0x90>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_ADC_MspInit+0x90>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <HAL_ADC_MspInit+0x90>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_ADC_MspInit+0x90>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000972:	2302      	movs	r3, #2
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000976:	2303      	movs	r3, #3
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_ADC_MspInit+0x94>)
 8000986:	f000 fedd 	bl	8001744 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2012      	movs	r0, #18
 8000990:	f000 fea1 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000994:	2012      	movs	r0, #18
 8000996:	f000 feba 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40012000 	.word	0x40012000
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020800 	.word	0x40020800

080009b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_TIM_Base_MspInit+0x3c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10d      	bne.n	80009de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_TIM_Base_MspInit+0x40>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_TIM_Base_MspInit+0x40>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <HAL_TIM_Base_MspInit+0x40>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40000400 	.word	0x40000400
 80009f0:	40023800 	.word	0x40023800

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f89e 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <ADC_IRQHandler+0x10>)
 8000a56:	f000 f9d9 	bl	8000e0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000074 	.word	0x20000074

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <SystemInit+0x28>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <SystemInit+0x28>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SystemInit+0x28>)
 8000a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
  ldr  r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab0:	f842 3b04 	str.w	r3, [r2], #4

08000ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ffd3 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f002 fa53 	bl	8002f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fcfd 	bl	80004c0 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000acc:	08002ff8 	.word	0x08002ff8
  ldr  r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ad8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000adc:	20000910 	.word	0x20000910

08000ae0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <CAN1_RX0_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 fdd7 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fed6 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fdef 	bl	800172a <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f000 fdb7 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	2000090c 	.word	0x2000090c

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	2000090c 	.word	0x2000090c

08000bc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e033      	b.n	8000c46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d109      	bne.n	8000bfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fe96 	bl	8000918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d118      	bne.n	8000c38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c0e:	f023 0302 	bic.w	r3, r3, #2
 8000c12:	f043 0202 	orr.w	r2, r3, #2
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 fb7a 	bl	8001314 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f023 0303 	bic.w	r3, r3, #3
 8000c2e:	f043 0201 	orr.w	r2, r3, #1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	641a      	str	r2, [r3, #64]	; 0x40
 8000c36:	e001      	b.n	8000c3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d101      	bne.n	8000c6a <HAL_ADC_Start_IT+0x1a>
 8000c66:	2302      	movs	r3, #2
 8000c68:	e0bd      	b.n	8000de6 <HAL_ADC_Start_IT+0x196>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d018      	beq.n	8000cb2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 0201 	orr.w	r2, r2, #1
 8000c8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c90:	4b58      	ldr	r3, [pc, #352]	; (8000df4 <HAL_ADC_Start_IT+0x1a4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a58      	ldr	r2, [pc, #352]	; (8000df8 <HAL_ADC_Start_IT+0x1a8>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	0c9a      	lsrs	r2, r3, #18
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ca4:	e002      	b.n	8000cac <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f9      	bne.n	8000ca6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	f040 8085 	bne.w	8000dcc <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d007      	beq.n	8000cf4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d00:	d106      	bne.n	8000d10 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f023 0206 	bic.w	r2, r3, #6
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
 8000d0e:	e002      	b.n	8000d16 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <HAL_ADC_Start_IT+0x1ac>)
 8000d20:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d2a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	6812      	ldr	r2, [r2, #0]
 8000d36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d3a:	f043 0320 	orr.w	r3, r3, #32
 8000d3e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d12a      	bne.n	8000da2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <HAL_ADC_Start_IT+0x1b0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d015      	beq.n	8000d82 <HAL_ADC_Start_IT+0x132>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	; (8000e04 <HAL_ADC_Start_IT+0x1b4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d105      	bne.n	8000d6c <HAL_ADC_Start_IT+0x11c>
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_ADC_Start_IT+0x1ac>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00a      	beq.n	8000d82 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <HAL_ADC_Start_IT+0x1b8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d136      	bne.n	8000de4 <HAL_ADC_Start_IT+0x194>
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_ADC_Start_IT+0x1ac>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d130      	bne.n	8000de4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d129      	bne.n	8000de4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	e020      	b.n	8000de4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <HAL_ADC_Start_IT+0x1b0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d11b      	bne.n	8000de4 <HAL_ADC_Start_IT+0x194>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d114      	bne.n	8000de4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	e00b      	b.n	8000de4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f043 0210 	orr.w	r2, r3, #16
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ddc:	f043 0201 	orr.w	r2, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	40012300 	.word	0x40012300
 8000e00:	40012000 	.word	0x40012000
 8000e04:	40012100 	.word	0x40012100
 8000e08:	40012200 	.word	0x40012200

08000e0c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	bf0c      	ite	eq
 8000e2a:	2301      	moveq	r3, #1
 8000e2c:	2300      	movne	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0320 	and.w	r3, r3, #32
 8000e3c:	2b20      	cmp	r3, #32
 8000e3e:	bf0c      	ite	eq
 8000e40:	2301      	moveq	r3, #1
 8000e42:	2300      	movne	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d049      	beq.n	8000ee2 <HAL_ADC_IRQHandler+0xd6>
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d046      	beq.n	8000ee2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d105      	bne.n	8000e6c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d12b      	bne.n	8000ed2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d127      	bne.n	8000ed2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d119      	bne.n	8000ed2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0220 	bic.w	r2, r2, #32
 8000eac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d105      	bne.n	8000ed2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f043 0201 	orr.w	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fcc6 	bl	8000864 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f06f 0212 	mvn.w	r2, #18
 8000ee0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	bf0c      	ite	eq
 8000ef0:	2301      	moveq	r3, #1
 8000ef2:	2300      	movne	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	2b80      	cmp	r3, #128	; 0x80
 8000f04:	bf0c      	ite	eq
 8000f06:	2301      	moveq	r3, #1
 8000f08:	2300      	movne	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d057      	beq.n	8000fc4 <HAL_ADC_IRQHandler+0x1b8>
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d054      	beq.n	8000fc4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d105      	bne.n	8000f32 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d139      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d12b      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d124      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d11d      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d119      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 faa9 	bl	800150c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f06f 020c 	mvn.w	r2, #12
 8000fc2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	2300      	movne	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe4:	2b40      	cmp	r3, #64	; 0x40
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d017      	beq.n	8001026 <HAL_ADC_IRQHandler+0x21a>
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d014      	beq.n	8001026 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b01      	cmp	r3, #1
 8001008:	d10d      	bne.n	8001026 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f846 	bl	80010a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f06f 0201 	mvn.w	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0320 	and.w	r3, r3, #32
 8001030:	2b20      	cmp	r3, #32
 8001032:	bf0c      	ite	eq
 8001034:	2301      	moveq	r3, #1
 8001036:	2300      	movne	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800104a:	bf0c      	ite	eq
 800104c:	2301      	moveq	r3, #1
 800104e:	2300      	movne	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d015      	beq.n	8001086 <HAL_ADC_IRQHandler+0x27a>
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d012      	beq.n	8001086 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	f043 0202 	orr.w	r2, r3, #2
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f06f 0220 	mvn.w	r2, #32
 8001074:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f820 	bl	80010bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f06f 0220 	mvn.w	r2, #32
 8001084:	601a      	str	r2, [r3, #0]
  }
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1c>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e105      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x228>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b09      	cmp	r3, #9
 80010fa:	d925      	bls.n	8001148 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68d9      	ldr	r1, [r3, #12]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	3b1e      	subs	r3, #30
 8001112:	2207      	movs	r2, #7
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43da      	mvns	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	400a      	ands	r2, r1
 8001120:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68d9      	ldr	r1, [r3, #12]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	4603      	mov	r3, r0
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4403      	add	r3, r0
 800113a:	3b1e      	subs	r3, #30
 800113c:	409a      	lsls	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	e022      	b.n	800118e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6919      	ldr	r1, [r3, #16]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	2207      	movs	r2, #7
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	400a      	ands	r2, r1
 800116a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6919      	ldr	r1, [r3, #16]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	4603      	mov	r3, r0
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4403      	add	r3, r0
 8001184:	409a      	lsls	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b06      	cmp	r3, #6
 8001194:	d824      	bhi.n	80011e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b05      	subs	r3, #5
 80011a8:	221f      	movs	r2, #31
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	400a      	ands	r2, r1
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b05      	subs	r3, #5
 80011d2:	fa00 f203 	lsl.w	r2, r0, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	635a      	str	r2, [r3, #52]	; 0x34
 80011de:	e04c      	b.n	800127a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d824      	bhi.n	8001232 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	3b23      	subs	r3, #35	; 0x23
 80011fa:	221f      	movs	r2, #31
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43da      	mvns	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	400a      	ands	r2, r1
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3b23      	subs	r3, #35	; 0x23
 8001224:	fa00 f203 	lsl.w	r2, r0, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
 8001230:	e023      	b.n	800127a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b41      	subs	r3, #65	; 0x41
 8001244:	221f      	movs	r2, #31
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	400a      	ands	r2, r1
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	3b41      	subs	r3, #65	; 0x41
 800126e:	fa00 f203 	lsl.w	r2, r0, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_ADC_ConfigChannel+0x234>)
 800127c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a21      	ldr	r2, [pc, #132]	; (8001308 <HAL_ADC_ConfigChannel+0x238>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d109      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1cc>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b12      	cmp	r3, #18
 800128e:	d105      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_ADC_ConfigChannel+0x238>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d123      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x21e>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d003      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x1e6>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b11      	cmp	r3, #17
 80012b4:	d11b      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b10      	cmp	r3, #16
 80012c8:	d111      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_ADC_ConfigChannel+0x23c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_ADC_ConfigChannel+0x240>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	0c9a      	lsrs	r2, r3, #18
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012e0:	e002      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f9      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40012300 	.word	0x40012300
 8001308:	40012000 	.word	0x40012000
 800130c:	20000000 	.word	0x20000000
 8001310:	431bde83 	.word	0x431bde83

08001314 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800131c:	4b79      	ldr	r3, [pc, #484]	; (8001504 <ADC_Init+0x1f0>)
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	431a      	orrs	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	021a      	lsls	r2, r3, #8
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800136c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800138e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	4a58      	ldr	r2, [pc, #352]	; (8001508 <ADC_Init+0x1f4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d022      	beq.n	80013f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6899      	ldr	r1, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6899      	ldr	r1, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	e00f      	b.n	8001412 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001410:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0202 	bic.w	r2, r2, #2
 8001420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6899      	ldr	r1, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e1b      	ldrb	r3, [r3, #24]
 800142c:	005a      	lsls	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d01b      	beq.n	8001478 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800144e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800145e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6859      	ldr	r1, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	3b01      	subs	r3, #1
 800146c:	035a      	lsls	r2, r3, #13
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	e007      	b.n	8001488 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001486:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	051a      	lsls	r2, r3, #20
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ca:	025a      	lsls	r2, r3, #9
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6899      	ldr	r1, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	029a      	lsls	r2, r3, #10
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	609a      	str	r2, [r3, #8]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40012300 	.word	0x40012300
 8001508:	0f000001 	.word	0x0f000001

0800150c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	; (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff29 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff3e 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff31 	bl	8001584 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa2 	bl	800167c <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e16b      	b.n	8001a38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	f040 815a 	bne.w	8001a32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	2b02      	cmp	r3, #2
 8001794:	d130      	bne.n	80017f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 0201 	and.w	r2, r3, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b03      	cmp	r3, #3
 8001802:	d017      	beq.n	8001834 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d123      	bne.n	8001888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	69b9      	ldr	r1, [r7, #24]
 8001884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80b4 	beq.w	8001a32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <HAL_GPIO_Init+0x30c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a5f      	ldr	r2, [pc, #380]	; (8001a50 <HAL_GPIO_Init+0x30c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_GPIO_Init+0x30c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e6:	4a5b      	ldr	r2, [pc, #364]	; (8001a54 <HAL_GPIO_Init+0x310>)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_GPIO_Init+0x314>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d02b      	beq.n	800196a <HAL_GPIO_Init+0x226>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_GPIO_Init+0x318>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d025      	beq.n	8001966 <HAL_GPIO_Init+0x222>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a50      	ldr	r2, [pc, #320]	; (8001a60 <HAL_GPIO_Init+0x31c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d01f      	beq.n	8001962 <HAL_GPIO_Init+0x21e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <HAL_GPIO_Init+0x320>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d019      	beq.n	800195e <HAL_GPIO_Init+0x21a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_GPIO_Init+0x324>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0x216>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <HAL_GPIO_Init+0x328>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00d      	beq.n	8001956 <HAL_GPIO_Init+0x212>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x32c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d007      	beq.n	8001952 <HAL_GPIO_Init+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4b      	ldr	r2, [pc, #300]	; (8001a74 <HAL_GPIO_Init+0x330>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_GPIO_Init+0x20a>
 800194a:	2307      	movs	r3, #7
 800194c:	e00e      	b.n	800196c <HAL_GPIO_Init+0x228>
 800194e:	2308      	movs	r3, #8
 8001950:	e00c      	b.n	800196c <HAL_GPIO_Init+0x228>
 8001952:	2306      	movs	r3, #6
 8001954:	e00a      	b.n	800196c <HAL_GPIO_Init+0x228>
 8001956:	2305      	movs	r3, #5
 8001958:	e008      	b.n	800196c <HAL_GPIO_Init+0x228>
 800195a:	2304      	movs	r3, #4
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x228>
 800195e:	2303      	movs	r3, #3
 8001960:	e004      	b.n	800196c <HAL_GPIO_Init+0x228>
 8001962:	2302      	movs	r3, #2
 8001964:	e002      	b.n	800196c <HAL_GPIO_Init+0x228>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x228>
 800196a:	2300      	movs	r3, #0
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	f002 0203 	and.w	r2, r2, #3
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	4093      	lsls	r3, r2
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800197c:	4935      	ldr	r1, [pc, #212]	; (8001a54 <HAL_GPIO_Init+0x310>)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_GPIO_Init+0x334>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ae:	4a32      	ldr	r2, [pc, #200]	; (8001a78 <HAL_GPIO_Init+0x334>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_GPIO_Init+0x334>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d8:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <HAL_GPIO_Init+0x334>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_GPIO_Init+0x334>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a02:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_GPIO_Init+0x334>)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_GPIO_Init+0x334>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_GPIO_Init+0x334>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	f67f ae90 	bls.w	8001760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40013800 	.word	0x40013800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40021400 	.word	0x40021400
 8001a70:	40021800 	.word	0x40021800
 8001a74:	40021c00 	.word	0x40021c00
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	041a      	lsls	r2, r3, #16
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	400b      	ands	r3, r1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	619a      	str	r2, [r3, #24]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e264      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d075      	beq.n	8001bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b02:	4ba3      	ldr	r3, [pc, #652]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4ba0      	ldr	r3, [pc, #640]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d112      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4b9d      	ldr	r3, [pc, #628]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b99      	ldr	r3, [pc, #612]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05b      	beq.n	8001bec <HAL_RCC_OscConfig+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d157      	bne.n	8001bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e23f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x74>
 8001b4a:	4b91      	ldr	r3, [pc, #580]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a90      	ldr	r2, [pc, #576]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a8a      	ldr	r2, [pc, #552]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a87      	ldr	r2, [pc, #540]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b81      	ldr	r3, [pc, #516]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a80      	ldr	r2, [pc, #512]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f808 	bl	8000bb0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f804 	bl	8000bb0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e204      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe fff4 	bl	8000bb0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7fe fff0 	bl	8000bb0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1f0      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0xe8>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1c4      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4952      	ldr	r1, [pc, #328]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_RCC_OscConfig+0x2b0>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7fe ffa9 	bl	8000bb0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7fe ffa5 	bl	8000bb0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e1a5      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4940      	ldr	r1, [pc, #256]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x2b0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ff88 	bl	8000bb0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7fe ff84 	bl	8000bb0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e184      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d030      	beq.n	8001d30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <HAL_RCC_OscConfig+0x2b4>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7fe ff68 	bl	8000bb0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7fe ff64 	bl	8000bb0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e164      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x200>
 8001d02:	e015      	b.n	8001d30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_RCC_OscConfig+0x2b4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7fe ff51 	bl	8000bb0 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d12:	f7fe ff4d 	bl	8000bb0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e14d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a0 	beq.w	8001e7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d121      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff13 	bl	8000bb0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e011      	b.n	8001db2 <HAL_RCC_OscConfig+0x2ce>
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	42470000 	.word	0x42470000
 8001d98:	42470e80 	.word	0x42470e80
 8001d9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da0:	f7fe ff06 	bl	8000bb0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e106      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b85      	ldr	r3, [pc, #532]	; (8001fc8 <HAL_RCC_OscConfig+0x4e4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
 8001dc6:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a80      	ldr	r2, [pc, #512]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	e01c      	b.n	8001e0e <HAL_RCC_OscConfig+0x32a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x312>
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	4b78      	ldr	r3, [pc, #480]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a77      	ldr	r2, [pc, #476]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
 8001df4:	e00b      	b.n	8001e0e <HAL_RCC_OscConfig+0x32a>
 8001df6:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a74      	ldr	r2, [pc, #464]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a71      	ldr	r2, [pc, #452]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d015      	beq.n	8001e42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7fe fecb 	bl	8000bb0 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe fec7 	bl	8000bb0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0c5      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ee      	beq.n	8001e1e <HAL_RCC_OscConfig+0x33a>
 8001e40:	e014      	b.n	8001e6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7fe feb5 	bl	8000bb0 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7fe feb1 	bl	8000bb0 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0af      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1ee      	bne.n	8001e4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d105      	bne.n	8001e7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a55      	ldr	r2, [pc, #340]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 809b 	beq.w	8001fbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d05c      	beq.n	8001f4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d141      	bne.n	8001f20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <HAL_RCC_OscConfig+0x4ec>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fe85 	bl	8000bb0 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fe81 	bl	8000bb0 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e081      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	019b      	lsls	r3, r3, #6
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	061b      	lsls	r3, r3, #24
 8001eec:	4937      	ldr	r1, [pc, #220]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <HAL_RCC_OscConfig+0x4ec>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fe5a 	bl	8000bb0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fe56 	bl	8000bb0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e056      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x41c>
 8001f1e:	e04e      	b.n	8001fbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCC_OscConfig+0x4ec>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fe43 	bl	8000bb0 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe fe3f 	bl	8000bb0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e03f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x44a>
 8001f4c:	e037      	b.n	8001fbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e032      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d028      	beq.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d11a      	bne.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d111      	bne.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470060 	.word	0x42470060

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0cc      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d90c      	bls.n	8002010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d044      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d119      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	2b03      	cmp	r3, #3
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e067      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4934      	ldr	r1, [pc, #208]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fd74 	bl	8000bb0 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7fe fd70 	bl	8000bb0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e04f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d20c      	bcs.n	800211c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fcd4 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00
 8002190:	40023800 	.word	0x40023800
 8002194:	08002fd8 	.word	0x08002fd8
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	2300      	movs	r3, #0
 80021b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b8:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d00d      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	f200 80bd 	bhi.w	8002344 <HAL_RCC_GetSysClockFreq+0x1a4>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x3a>
 80021d2:	e0b7      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021d6:	60bb      	str	r3, [r7, #8]
       break;
 80021d8:	e0b7      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021dc:	60bb      	str	r3, [r7, #8]
      break;
 80021de:	e0b4      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ea:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d04d      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b58      	ldr	r3, [pc, #352]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	461a      	mov	r2, r3
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	ea02 0800 	and.w	r8, r2, r0
 800220e:	ea03 0901 	and.w	r9, r3, r1
 8002212:	4640      	mov	r0, r8
 8002214:	4649      	mov	r1, r9
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	014b      	lsls	r3, r1, #5
 8002220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002224:	0142      	lsls	r2, r0, #5
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	ebb0 0008 	subs.w	r0, r0, r8
 800222e:	eb61 0109 	sbc.w	r1, r1, r9
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	018b      	lsls	r3, r1, #6
 800223c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002240:	0182      	lsls	r2, r0, #6
 8002242:	1a12      	subs	r2, r2, r0
 8002244:	eb63 0301 	sbc.w	r3, r3, r1
 8002248:	f04f 0000 	mov.w	r0, #0
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	00d9      	lsls	r1, r3, #3
 8002252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002256:	00d0      	lsls	r0, r2, #3
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	eb12 0208 	adds.w	r2, r2, r8
 8002260:	eb43 0309 	adc.w	r3, r3, r9
 8002264:	f04f 0000 	mov.w	r0, #0
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	0259      	lsls	r1, r3, #9
 800226e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002272:	0250      	lsls	r0, r2, #9
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	f7fd ffa0 	bl	80001c8 <__aeabi_uldivmod>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4613      	mov	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e04a      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	461a      	mov	r2, r3
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	ea02 0400 	and.w	r4, r2, r0
 80022aa:	ea03 0501 	and.w	r5, r3, r1
 80022ae:	4620      	mov	r0, r4
 80022b0:	4629      	mov	r1, r5
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	014b      	lsls	r3, r1, #5
 80022bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022c0:	0142      	lsls	r2, r0, #5
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	1b00      	subs	r0, r0, r4
 80022c8:	eb61 0105 	sbc.w	r1, r1, r5
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	018b      	lsls	r3, r1, #6
 80022d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022da:	0182      	lsls	r2, r0, #6
 80022dc:	1a12      	subs	r2, r2, r0
 80022de:	eb63 0301 	sbc.w	r3, r3, r1
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	00d9      	lsls	r1, r3, #3
 80022ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022f0:	00d0      	lsls	r0, r2, #3
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	1912      	adds	r2, r2, r4
 80022f8:	eb45 0303 	adc.w	r3, r5, r3
 80022fc:	f04f 0000 	mov.w	r0, #0
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	0299      	lsls	r1, r3, #10
 8002306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800230a:	0290      	lsls	r0, r2, #10
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	461a      	mov	r2, r3
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	f7fd ff54 	bl	80001c8 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4613      	mov	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	60bb      	str	r3, [r7, #8]
      break;
 8002342:	e002      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002346:	60bb      	str	r3, [r7, #8]
      break;
 8002348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234a:	68bb      	ldr	r3, [r7, #8]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	00f42400 	.word	0x00f42400
 8002360:	007a1200 	.word	0x007a1200

08002364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e041      	b.n	80023fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fb10 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f000 fa7a 	bl	800289c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d001      	beq.n	800241c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e046      	b.n	80024aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <HAL_TIM_Base_Start+0xb4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d022      	beq.n	8002474 <HAL_TIM_Base_Start+0x70>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d01d      	beq.n	8002474 <HAL_TIM_Base_Start+0x70>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_TIM_Base_Start+0xb8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d018      	beq.n	8002474 <HAL_TIM_Base_Start+0x70>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <HAL_TIM_Base_Start+0xbc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_TIM_Base_Start+0x70>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_TIM_Base_Start+0xc0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00e      	beq.n	8002474 <HAL_TIM_Base_Start+0x70>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <HAL_TIM_Base_Start+0xc4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_TIM_Base_Start+0x70>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_TIM_Base_Start+0xc8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIM_Base_Start+0x70>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <HAL_TIM_Base_Start+0xcc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d111      	bne.n	8002498 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b06      	cmp	r3, #6
 8002484:	d010      	beq.n	80024a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	e007      	b.n	80024a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800
 80024c4:	40000c00 	.word	0x40000c00
 80024c8:	40010400 	.word	0x40010400
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40001800 	.word	0x40001800

080024d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e041      	b.n	800256a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f839 	bl	8002572 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f000 f9c2 	bl	800289c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0ae      	b.n	8002704 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	f200 809f 	bhi.w	80026f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025f1 	.word	0x080025f1
 80025c0:	080026f5 	.word	0x080026f5
 80025c4:	080026f5 	.word	0x080026f5
 80025c8:	080026f5 	.word	0x080026f5
 80025cc:	08002631 	.word	0x08002631
 80025d0:	080026f5 	.word	0x080026f5
 80025d4:	080026f5 	.word	0x080026f5
 80025d8:	080026f5 	.word	0x080026f5
 80025dc:	08002673 	.word	0x08002673
 80025e0:	080026f5 	.word	0x080026f5
 80025e4:	080026f5 	.word	0x080026f5
 80025e8:	080026f5 	.word	0x080026f5
 80025ec:	080026b3 	.word	0x080026b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f9f0 	bl	80029dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0208 	orr.w	r2, r2, #8
 800260a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0204 	bic.w	r2, r2, #4
 800261a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6999      	ldr	r1, [r3, #24]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	619a      	str	r2, [r3, #24]
      break;
 800262e:	e064      	b.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fa40 	bl	8002abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	021a      	lsls	r2, r3, #8
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	619a      	str	r2, [r3, #24]
      break;
 8002670:	e043      	b.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fa95 	bl	8002ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0208 	orr.w	r2, r2, #8
 800268c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0204 	bic.w	r2, r2, #4
 800269c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69d9      	ldr	r1, [r3, #28]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	61da      	str	r2, [r3, #28]
      break;
 80026b0:	e023      	b.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fae9 	bl	8002c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69d9      	ldr	r1, [r3, #28]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	021a      	lsls	r2, r3, #8
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	61da      	str	r2, [r3, #28]
      break;
 80026f2:	e002      	b.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	75fb      	strb	r3, [r7, #23]
      break;
 80026f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002702:	7dfb      	ldrb	r3, [r7, #23]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_TIM_ConfigClockSource+0x1c>
 8002724:	2302      	movs	r3, #2
 8002726:	e0b4      	b.n	8002892 <HAL_TIM_ConfigClockSource+0x186>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800274e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002760:	d03e      	beq.n	80027e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002766:	f200 8087 	bhi.w	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276e:	f000 8086 	beq.w	800287e <HAL_TIM_ConfigClockSource+0x172>
 8002772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002776:	d87f      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b70      	cmp	r3, #112	; 0x70
 800277a:	d01a      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0xa6>
 800277c:	2b70      	cmp	r3, #112	; 0x70
 800277e:	d87b      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b60      	cmp	r3, #96	; 0x60
 8002782:	d050      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x11a>
 8002784:	2b60      	cmp	r3, #96	; 0x60
 8002786:	d877      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b50      	cmp	r3, #80	; 0x50
 800278a:	d03c      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0xfa>
 800278c:	2b50      	cmp	r3, #80	; 0x50
 800278e:	d873      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d058      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x13a>
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d86f      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b30      	cmp	r3, #48	; 0x30
 800279a:	d064      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x15a>
 800279c:	2b30      	cmp	r3, #48	; 0x30
 800279e:	d86b      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d060      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x15a>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d867      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x15a>
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d05a      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x15a>
 80027b0:	e062      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f000 fb35 	bl	8002e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	609a      	str	r2, [r3, #8]
      break;
 80027de:	e04f      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6899      	ldr	r1, [r3, #8]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f000 fb1e 	bl	8002e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002802:	609a      	str	r2, [r3, #8]
      break;
 8002804:	e03c      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	461a      	mov	r2, r3
 8002814:	f000 fa92 	bl	8002d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2150      	movs	r1, #80	; 0x50
 800281e:	4618      	mov	r0, r3
 8002820:	f000 faeb 	bl	8002dfa <TIM_ITRx_SetConfig>
      break;
 8002824:	e02c      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6859      	ldr	r1, [r3, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	461a      	mov	r2, r3
 8002834:	f000 fab1 	bl	8002d9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2160      	movs	r1, #96	; 0x60
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fadb 	bl	8002dfa <TIM_ITRx_SetConfig>
      break;
 8002844:	e01c      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	461a      	mov	r2, r3
 8002854:	f000 fa72 	bl	8002d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2140      	movs	r1, #64	; 0x40
 800285e:	4618      	mov	r0, r3
 8002860:	f000 facb 	bl	8002dfa <TIM_ITRx_SetConfig>
      break;
 8002864:	e00c      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f000 fac2 	bl	8002dfa <TIM_ITRx_SetConfig>
      break;
 8002876:	e003      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
      break;
 800287c:	e000      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800287e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a40      	ldr	r2, [pc, #256]	; (80029b0 <TIM_Base_SetConfig+0x114>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d013      	beq.n	80028dc <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ba:	d00f      	beq.n	80028dc <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3d      	ldr	r2, [pc, #244]	; (80029b4 <TIM_Base_SetConfig+0x118>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00b      	beq.n	80028dc <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3c      	ldr	r2, [pc, #240]	; (80029b8 <TIM_Base_SetConfig+0x11c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3b      	ldr	r2, [pc, #236]	; (80029bc <TIM_Base_SetConfig+0x120>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3a      	ldr	r2, [pc, #232]	; (80029c0 <TIM_Base_SetConfig+0x124>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d108      	bne.n	80028ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a2f      	ldr	r2, [pc, #188]	; (80029b0 <TIM_Base_SetConfig+0x114>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02b      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d027      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2c      	ldr	r2, [pc, #176]	; (80029b4 <TIM_Base_SetConfig+0x118>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d023      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <TIM_Base_SetConfig+0x11c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <TIM_Base_SetConfig+0x120>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01b      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <TIM_Base_SetConfig+0x124>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d017      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a28      	ldr	r2, [pc, #160]	; (80029c4 <TIM_Base_SetConfig+0x128>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <TIM_Base_SetConfig+0x12c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00f      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a26      	ldr	r2, [pc, #152]	; (80029cc <TIM_Base_SetConfig+0x130>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00b      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <TIM_Base_SetConfig+0x134>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <TIM_Base_SetConfig+0x138>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <TIM_Base_SetConfig+0x13c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d108      	bne.n	8002960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <TIM_Base_SetConfig+0x114>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0xf8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <TIM_Base_SetConfig+0x124>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d103      	bne.n	800299c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	615a      	str	r2, [r3, #20]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40010000 	.word	0x40010000
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40000800 	.word	0x40000800
 80029bc:	40000c00 	.word	0x40000c00
 80029c0:	40010400 	.word	0x40010400
 80029c4:	40014000 	.word	0x40014000
 80029c8:	40014400 	.word	0x40014400
 80029cc:	40014800 	.word	0x40014800
 80029d0:	40001800 	.word	0x40001800
 80029d4:	40001c00 	.word	0x40001c00
 80029d8:	40002000 	.word	0x40002000

080029dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f023 0302 	bic.w	r3, r3, #2
 8002a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <TIM_OC1_SetConfig+0xd8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d003      	beq.n	8002a40 <TIM_OC1_SetConfig+0x64>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <TIM_OC1_SetConfig+0xdc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10c      	bne.n	8002a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0308 	bic.w	r3, r3, #8
 8002a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 0304 	bic.w	r3, r3, #4
 8002a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <TIM_OC1_SetConfig+0xd8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <TIM_OC1_SetConfig+0x8e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <TIM_OC1_SetConfig+0xdc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40010400 	.word	0x40010400

08002abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f023 0210 	bic.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0320 	bic.w	r3, r3, #32
 8002b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <TIM_OC2_SetConfig+0xe4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_OC2_SetConfig+0x68>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <TIM_OC2_SetConfig+0xe8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d10d      	bne.n	8002b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <TIM_OC2_SetConfig+0xe4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d003      	beq.n	8002b50 <TIM_OC2_SetConfig+0x94>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <TIM_OC2_SetConfig+0xe8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d113      	bne.n	8002b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <TIM_OC3_SetConfig+0xe0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d003      	beq.n	8002c0e <TIM_OC3_SetConfig+0x66>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <TIM_OC3_SetConfig+0xe4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10d      	bne.n	8002c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <TIM_OC3_SetConfig+0xe0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_OC3_SetConfig+0x92>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <TIM_OC3_SetConfig+0xe4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d113      	bne.n	8002c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	621a      	str	r2, [r3, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40010400 	.word	0x40010400

08002c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	031b      	lsls	r3, r3, #12
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <TIM_OC4_SetConfig+0xa4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_OC4_SetConfig+0x68>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <TIM_OC4_SetConfig+0xa8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d109      	bne.n	8002d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	019b      	lsls	r3, r3, #6
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40010400 	.word	0x40010400

08002d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0201 	bic.w	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f023 030a 	bic.w	r3, r3, #10
 8002d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b087      	sub	sp, #28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0210 	bic.w	r2, r3, #16
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	031b      	lsls	r3, r3, #12
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	621a      	str	r2, [r3, #32]
}
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f043 0307 	orr.w	r3, r3, #7
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e05a      	b.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d022      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d01d      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d018      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d009      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10c      	bne.n	8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800
 8002f58:	40000c00 	.word	0x40000c00
 8002f5c:	40010400 	.word	0x40010400
 8002f60:	40014000 	.word	0x40014000
 8002f64:	40001800 	.word	0x40001800

08002f68 <__libc_init_array>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	4d0d      	ldr	r5, [pc, #52]	; (8002fa0 <__libc_init_array+0x38>)
 8002f6c:	4c0d      	ldr	r4, [pc, #52]	; (8002fa4 <__libc_init_array+0x3c>)
 8002f6e:	1b64      	subs	r4, r4, r5
 8002f70:	10a4      	asrs	r4, r4, #2
 8002f72:	2600      	movs	r6, #0
 8002f74:	42a6      	cmp	r6, r4
 8002f76:	d109      	bne.n	8002f8c <__libc_init_array+0x24>
 8002f78:	4d0b      	ldr	r5, [pc, #44]	; (8002fa8 <__libc_init_array+0x40>)
 8002f7a:	4c0c      	ldr	r4, [pc, #48]	; (8002fac <__libc_init_array+0x44>)
 8002f7c:	f000 f820 	bl	8002fc0 <_init>
 8002f80:	1b64      	subs	r4, r4, r5
 8002f82:	10a4      	asrs	r4, r4, #2
 8002f84:	2600      	movs	r6, #0
 8002f86:	42a6      	cmp	r6, r4
 8002f88:	d105      	bne.n	8002f96 <__libc_init_array+0x2e>
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f90:	4798      	blx	r3
 8002f92:	3601      	adds	r6, #1
 8002f94:	e7ee      	b.n	8002f74 <__libc_init_array+0xc>
 8002f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9a:	4798      	blx	r3
 8002f9c:	3601      	adds	r6, #1
 8002f9e:	e7f2      	b.n	8002f86 <__libc_init_array+0x1e>
 8002fa0:	08002ff0 	.word	0x08002ff0
 8002fa4:	08002ff0 	.word	0x08002ff0
 8002fa8:	08002ff0 	.word	0x08002ff0
 8002fac:	08002ff4 	.word	0x08002ff4

08002fb0 <memset>:
 8002fb0:	4402      	add	r2, r0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d100      	bne.n	8002fba <memset+0xa>
 8002fb8:	4770      	bx	lr
 8002fba:	f803 1b01 	strb.w	r1, [r3], #1
 8002fbe:	e7f9      	b.n	8002fb4 <memset+0x4>

08002fc0 <_init>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr

08002fcc <_fini>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	bf00      	nop
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr
