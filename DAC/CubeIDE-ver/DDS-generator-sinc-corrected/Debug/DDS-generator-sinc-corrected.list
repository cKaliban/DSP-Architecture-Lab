
DDS-generator-sinc-corrected.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003214  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800342c  0800342c  0002101c  2**0
                  CONTENTS
  4 .ARM          00000008  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003434  08003434  0002101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000101c  20000000  0800343c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002101c  2**0
                  CONTENTS
 10 .bss          00000184  2000101c  2000101c  0002101c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011a0  200011a0  0002101c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002101c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce25  00000000  00000000  0002104c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ebe  00000000  00000000  0002de71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b88  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e00  00000000  00000000  00031458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c8bc  00000000  00000000  00052258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca605  00000000  00000000  0005eb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  00129119  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fcc  00000000  00000000  001291dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000ce6  00000000  00000000  0012c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000101c 	.word	0x2000101c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003384 	.word	0x08003384

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001020 	.word	0x20001020
 80001c4:	08003384 	.word	0x08003384

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbd9 	bl	8000c7c <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_fir_init_q15(&S, FT_NUM, &filter_taps_2[0], &firStateQ15[0], BLOCK_SIZE);
 80004ca:	2301      	movs	r3, #1
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <main+0x48>)
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <main+0x4c>)
 80004d2:	2138      	movs	r1, #56	; 0x38
 80004d4:	480e      	ldr	r0, [pc, #56]	; (8000510 <main+0x50>)
 80004d6:	f002 ff13 	bl	8003300 <arm_fir_init_q15>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f821 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f91f 	bl	8000720 <MX_GPIO_Init>
  MX_DAC_Init();
 80004e2:	f000 f887 	bl	80005f4 <MX_DAC_Init>
  MX_DMA_Init();
 80004e6:	f000 f8fb 	bl	80006e0 <MX_DMA_Init>
  MX_TIM2_Init();
 80004ea:	f000 f8ad 	bl	8000648 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, &dma_buff, 16);
//  HAL_TIM_Base_Start(&htim3);
//  HAL_DAC_Start(&hdac, DAC1_CHANNEL_2)
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t*)dac_data, DAC_BUFF_LEN, DAC_ALIGN_12B_R);
 80004ee:	2300      	movs	r3, #0
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <main+0x54>)
 80004f8:	2110      	movs	r1, #16
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <main+0x58>)
 80004fc:	f000 fd64 	bl	8000fc8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <main+0x5c>)
 8000502:	f002 f919 	bl	8002738 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000506:	e7fe      	b.n	8000506 <main+0x46>
 8000508:	2000112c 	.word	0x2000112c
 800050c:	0800339c 	.word	0x0800339c
 8000510:	20001064 	.word	0x20001064
 8000514:	20000800 	.word	0x20000800
 8000518:	20001070 	.word	0x20001070
 800051c:	20001084 	.word	0x20001084

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 ff20 	bl	8003374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059e:	2307      	movs	r3, #7
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fc36 	bl	8001e18 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b2:	f000 fa15 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	2105      	movs	r1, #5
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fe97 	bl	8002308 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e0:	f000 f9fe 	bl	80009e0 <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3750      	adds	r7, #80	; 0x50
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_DAC_Init+0x4c>)
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_DAC_Init+0x50>)
 8000606:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_DAC_Init+0x4c>)
 800060a:	f000 fcba 	bl	8000f82 <HAL_DAC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000614:	f000 f9e4 	bl	80009e0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000618:	2324      	movs	r3, #36	; 0x24
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2210      	movs	r2, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_DAC_Init+0x4c>)
 8000628:	f000 fddf 	bl	80011ea <HAL_DAC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000632:	f000 f9d5 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20001070 	.word	0x20001070
 8000644:	40007400 	.word	0x40007400

08000648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_TIM2_Init+0x94>)
 8000666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_TIM2_Init+0x94>)
 800066e:	2253      	movs	r2, #83	; 0x53
 8000670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_TIM2_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_TIM2_Init+0x94>)
 800067a:	2209      	movs	r2, #9
 800067c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_TIM2_Init+0x94>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_TIM2_Init+0x94>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_TIM2_Init+0x94>)
 800068c:	f002 f804 	bl	8002698 <HAL_TIM_Base_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 f9a3 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_TIM2_Init+0x94>)
 80006a8:	f002 f9be 	bl	8002a28 <HAL_TIM_ConfigClockSource>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f995 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006b6:	2320      	movs	r3, #32
 80006b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_TIM2_Init+0x94>)
 80006c4:	f002 fbda 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80006ce:	f000 f987 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20001084 	.word	0x20001084

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_DMA_Init+0x3c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <MX_DMA_Init+0x3c>)
 80006f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_DMA_Init+0x3c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2011      	movs	r0, #17
 8000708:	f000 fc05 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800070c:	2011      	movs	r0, #17
 800070e:	f000 fc1e 	bl	8000f4e <HAL_NVIC_EnableIRQ>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <MX_GPIO_Init+0x118>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a3e      	ldr	r2, [pc, #248]	; (8000838 <MX_GPIO_Init+0x118>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <MX_GPIO_Init+0x118>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b38      	ldr	r3, [pc, #224]	; (8000838 <MX_GPIO_Init+0x118>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a37      	ldr	r2, [pc, #220]	; (8000838 <MX_GPIO_Init+0x118>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b35      	ldr	r3, [pc, #212]	; (8000838 <MX_GPIO_Init+0x118>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_GPIO_Init+0x118>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a30      	ldr	r2, [pc, #192]	; (8000838 <MX_GPIO_Init+0x118>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <MX_GPIO_Init+0x118>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_GPIO_Init+0x118>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a29      	ldr	r2, [pc, #164]	; (8000838 <MX_GPIO_Init+0x118>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <MX_GPIO_Init+0x118>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0x118>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a22      	ldr	r2, [pc, #136]	; (8000838 <MX_GPIO_Init+0x118>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_GPIO_Init+0x118>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	481c      	ldr	r0, [pc, #112]	; (800083c <MX_GPIO_Init+0x11c>)
 80007ca:	f001 faf3 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	2301      	movs	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4817      	ldr	r0, [pc, #92]	; (8000840 <MX_GPIO_Init+0x120>)
 80007e4:	f001 f94a 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007e8:	2304      	movs	r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0x124>)
 80007fc:	f001 f93e 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_GPIO_Init+0x11c>)
 800081a:	f001 f92f 	bl	8001a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2006      	movs	r0, #6
 8000824:	f000 fb77 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000828:	2006      	movs	r0, #6
 800082a:	f000 fb90 	bl	8000f4e <HAL_NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40020000 	.word	0x40020000
 8000844:	40020400 	.word	0x40020400

08000848 <dds_param_increment>:
//	}
//	else{
//		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	}
//}
void dds_param_increment(){
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	if(dds_table_index < DDS_TABLE_LEN){
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <dds_param_increment+0xa0>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d80e      	bhi.n	8000872 <dds_param_increment+0x2a>
		dds_frequency = dds_f_table[dds_table_index];
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <dds_param_increment+0xa0>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <dds_param_increment+0xa4>)
 800085c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <dds_param_increment+0xa8>)
 8000862:	801a      	strh	r2, [r3, #0]
		dds_table_index++;
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <dds_param_increment+0xa0>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <dds_param_increment+0xa0>)
 800086e:	801a      	strh	r2, [r3, #0]
			dds_amp_index = 0;
			dds_amp_coeff = dds_ampc_table[dds_amp_index];
			dds_amp_index++;
		}
	}
}
 8000870:	e034      	b.n	80008dc <dds_param_increment+0x94>
		dds_table_index = 0;
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <dds_param_increment+0xa0>)
 8000874:	2200      	movs	r2, #0
 8000876:	801a      	strh	r2, [r3, #0]
		dds_frequency = dds_f_table[dds_table_index];
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <dds_param_increment+0xa0>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <dds_param_increment+0xa4>)
 8000880:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <dds_param_increment+0xa8>)
 8000886:	801a      	strh	r2, [r3, #0]
		dds_table_index++;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <dds_param_increment+0xa0>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <dds_param_increment+0xa0>)
 8000892:	801a      	strh	r2, [r3, #0]
		if(dds_amp_index < DDS_TABLE_LEN){
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <dds_param_increment+0xac>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d80e      	bhi.n	80008ba <dds_param_increment+0x72>
			dds_amp_coeff = dds_ampc_table[dds_amp_index];
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <dds_param_increment+0xac>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <dds_param_increment+0xb0>)
 80008a4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <dds_param_increment+0xb4>)
 80008aa:	801a      	strh	r2, [r3, #0]
			dds_amp_index++;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <dds_param_increment+0xac>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <dds_param_increment+0xac>)
 80008b6:	701a      	strb	r2, [r3, #0]
}
 80008b8:	e010      	b.n	80008dc <dds_param_increment+0x94>
			dds_amp_index = 0;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <dds_param_increment+0xac>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
			dds_amp_coeff = dds_ampc_table[dds_amp_index];
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <dds_param_increment+0xac>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <dds_param_increment+0xb0>)
 80008c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <dds_param_increment+0xb4>)
 80008ce:	801a      	strh	r2, [r3, #0]
			dds_amp_index++;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <dds_param_increment+0xac>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <dds_param_increment+0xac>)
 80008da:	701a      	strb	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20001040 	.word	0x20001040
 80008ec:	0800340c 	.word	0x0800340c
 80008f0:	2000100c 	.word	0x2000100c
 80008f4:	2000103e 	.word	0x2000103e
 80008f8:	20001004 	.word	0x20001004
 80008fc:	20001000 	.word	0x20001000

08000900 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d144      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x9a>
		int16_t dac_out_q15;
		uint32_t dac_out;
		dds_step = dds_frequency * DAC_BUFF_LEN / dds_sampling_frequency;
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	029b      	lsls	r3, r3, #10
 8000916:	461a      	mov	r2, r3
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xac>)
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4a24      	ldr	r2, [pc, #144]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000920:	6013      	str	r3, [r2, #0]
		dds_phase_acc += dds_step;
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	4413      	add	r3, r2
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000932:	801a      	strh	r2, [r3, #0]
		if(dds_phase_acc >= DAC_BUFF_LEN){
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800093c:	d306      	bcc.n	800094c <HAL_TIM_PeriodElapsedCallback+0x4c>
			dds_phase_acc -= DAC_BUFF_LEN;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800094a:	801a      	strh	r2, [r3, #0]
		}

		arm_fir_q15(&S, &dac_int[dds_phase_acc], &dac_out_q15, BLOCK_SIZE);		// Pointer type should not matter
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000954:	1899      	adds	r1, r3, r2
 8000956:	f107 020a 	add.w	r2, r7, #10
 800095a:	2301      	movs	r3, #1
 800095c:	4817      	ldr	r0, [pc, #92]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800095e:	f002 fb1d 	bl	8002f9c <arm_fir_q15>
		if(dac_out_q15 < -2047){
 8000962:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000966:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 800096a:	dc03      	bgt.n	8000974 <HAL_TIM_PeriodElapsedCallback+0x74>
			dac_out_q15 = -2047;
 800096c:	f64f 0301 	movw	r3, #63489	; 0xf801
 8000970:	817b      	strh	r3, [r7, #10]
 8000972:	e007      	b.n	8000984 <HAL_TIM_PeriodElapsedCallback+0x84>
		}
		else if(dac_out_q15 > 2047){
 8000974:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800097c:	db02      	blt.n	8000984 <HAL_TIM_PeriodElapsedCallback+0x84>
			dac_out_q15 = 2047;
 800097e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000982:	817b      	strh	r3, [r7, #10]
		}
		dac_out = (uint32_t)(dac_out_q15 + 2047);
 8000984:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000988:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800098c:	60fb      	str	r3, [r7, #12]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (uint32_t)(dac_out));	// Removed amplitude scaling for now
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2200      	movs	r2, #0
 8000992:	2110      	movs	r1, #16
 8000994:	480a      	ldr	r0, [pc, #40]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000996:	f000 fbe5 	bl	8001164 <HAL_DAC_SetValue>
	}
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20001084 	.word	0x20001084
 80009a8:	2000100c 	.word	0x2000100c
 80009ac:	000186a0 	.word	0x000186a0
 80009b0:	20001038 	.word	0x20001038
 80009b4:	2000103c 	.word	0x2000103c
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20001064 	.word	0x20001064
 80009c0:	20001070 	.word	0x20001070

080009c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == 1){
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d101      	bne.n	80009d8 <HAL_GPIO_EXTI_Callback+0x14>
		dds_param_increment();
 80009d4:	f7ff ff38 	bl	8000848 <dds_param_increment>
	}
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f000 fa68 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a2f      	ldr	r2, [pc, #188]	; (8000b18 <HAL_DAC_MspInit+0xdc>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d158      	bne.n	8000b10 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <HAL_DAC_MspInit+0xe0>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <HAL_DAC_MspInit+0xe0>)
 8000a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <HAL_DAC_MspInit+0xe0>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <HAL_DAC_MspInit+0xe0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <HAL_DAC_MspInit+0xe0>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_DAC_MspInit+0xe0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a96:	2320      	movs	r3, #32
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481d      	ldr	r0, [pc, #116]	; (8000b20 <HAL_DAC_MspInit+0xe4>)
 8000aaa:	f000 ffe7 	bl	8001a7c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_DAC_MspInit+0xec>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000ab6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000aba:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000abe:	2240      	movs	r2, #64	; 0x40
 8000ac0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ace:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae6:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000af6:	f000 fc51 	bl	800139c <HAL_DMA_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000b00:	f7ff ff6e 	bl	80009e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_DAC_MspInit+0xe8>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40007400 	.word	0x40007400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	200010cc 	.word	0x200010cc
 8000b28:	400260a0 	.word	0x400260a0

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b3c:	d115      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_TIM_Base_MspInit+0x48>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_TIM_Base_MspInit+0x48>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_TIM_Base_MspInit+0x48>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	201c      	movs	r0, #28
 8000b60:	f000 f9d9 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b64:	201c      	movs	r0, #28
 8000b66:	f000 f9f2 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8ac 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f001 f909 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA1_Stream6_IRQHandler+0x10>)
 8000be2:	f000 fce1 	bl	80015a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200010cc 	.word	0x200010cc

08000bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM2_IRQHandler+0x10>)
 8000bf6:	f001 fe0f 	bl	8002818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20001084 	.word	0x20001084

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f002 fb69 	bl	800332c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fc31 	bl	80004c0 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000101c 	.word	0x2000101c
  ldr r2, =_sidata
 8000c6c:	0800343c 	.word	0x0800343c
  ldr r2, =_sbss
 8000c70:	2000101c 	.word	0x2000101c
  ldr r4, =_ebss
 8000c74:	200011a0 	.word	0x200011a0

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f92b 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe9c 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f943 	bl	8000f6a <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f90b 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20001010 	.word	0x20001010
 8000d18:	20001018 	.word	0x20001018
 8000d1c:	20001014 	.word	0x20001014

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20001018 	.word	0x20001018
 8000d44:	2000119c 	.word	0x2000119c

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000119c 	.word	0x2000119c

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff29 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff3e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff31 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa2 	bl	8000ebc <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e014      	b.n	8000fbe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	791b      	ldrb	r3, [r3, #4]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fd49 	bl	8000a3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2202      	movs	r2, #2
 8000fae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	795b      	ldrb	r3, [r3, #5]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <HAL_DAC_Start_DMA+0x22>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e0ab      	b.n	8001142 <HAL_DAC_Start_DMA+0x17a>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2201      	movs	r2, #1
 8000fee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d12f      	bne.n	800105c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_DAC_Start_DMA+0x184>)
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4a51      	ldr	r2, [pc, #324]	; (8001150 <HAL_DAC_Start_DMA+0x188>)
 800100a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <HAL_DAC_Start_DMA+0x18c>)
 8001012:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001022:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	2b08      	cmp	r3, #8
 8001028:	d013      	beq.n	8001052 <HAL_DAC_Start_DMA+0x8a>
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	2b08      	cmp	r3, #8
 800102e:	d845      	bhi.n	80010bc <HAL_DAC_Start_DMA+0xf4>
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_DAC_Start_DMA+0x76>
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	2b04      	cmp	r3, #4
 800103a:	d005      	beq.n	8001048 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800103c:	e03e      	b.n	80010bc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3308      	adds	r3, #8
 8001044:	613b      	str	r3, [r7, #16]
        break;
 8001046:	e03c      	b.n	80010c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	330c      	adds	r3, #12
 800104e:	613b      	str	r3, [r7, #16]
        break;
 8001050:	e037      	b.n	80010c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3310      	adds	r3, #16
 8001058:	613b      	str	r3, [r7, #16]
        break;
 800105a:	e032      	b.n	80010c2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4a3d      	ldr	r2, [pc, #244]	; (8001158 <HAL_DAC_Start_DMA+0x190>)
 8001062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a3c      	ldr	r2, [pc, #240]	; (800115c <HAL_DAC_Start_DMA+0x194>)
 800106a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4a3b      	ldr	r2, [pc, #236]	; (8001160 <HAL_DAC_Start_DMA+0x198>)
 8001072:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001082:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d013      	beq.n	80010b2 <HAL_DAC_Start_DMA+0xea>
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d817      	bhi.n	80010c0 <HAL_DAC_Start_DMA+0xf8>
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_DAC_Start_DMA+0xd6>
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d005      	beq.n	80010a8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800109c:	e010      	b.n	80010c0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3314      	adds	r3, #20
 80010a4:	613b      	str	r3, [r7, #16]
        break;
 80010a6:	e00c      	b.n	80010c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3318      	adds	r3, #24
 80010ae:	613b      	str	r3, [r7, #16]
        break;
 80010b0:	e007      	b.n	80010c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	331c      	adds	r3, #28
 80010b8:	613b      	str	r3, [r7, #16]
        break;
 80010ba:	e002      	b.n	80010c2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80010bc:	bf00      	nop
 80010be:	e000      	b.n	80010c2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80010c0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d111      	bne.n	80010ec <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	f000 fa09 	bl	80014f8 <HAL_DMA_Start_IT>
 80010e6:	4603      	mov	r3, r0
 80010e8:	75fb      	strb	r3, [r7, #23]
 80010ea:	e010      	b.n	800110e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	68d8      	ldr	r0, [r3, #12]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	f000 f9f7 	bl	80014f8 <HAL_DMA_Start_IT>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2201      	movs	r2, #1
 8001128:	409a      	lsls	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e005      	b.n	8001140 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	f043 0204 	orr.w	r2, r3, #4
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001140:	7dfb      	ldrb	r3, [r7, #23]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	08001289 	.word	0x08001289
 8001150:	080012ab 	.word	0x080012ab
 8001154:	080012c7 	.word	0x080012c7
 8001158:	08001331 	.word	0x08001331
 800115c:	08001353 	.word	0x08001353
 8001160:	0800136f 	.word	0x0800136f

08001164 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	3308      	adds	r3, #8
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e004      	b.n	8001198 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	3314      	adds	r3, #20
 8001196:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	461a      	mov	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b087      	sub	sp, #28
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	795b      	ldrb	r3, [r3, #5]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_DAC_ConfigChannel+0x18>
 80011fe:	2302      	movs	r3, #2
 8001200:	e03c      	b.n	800127c <HAL_DAC_ConfigChannel+0x92>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2201      	movs	r2, #1
 8001206:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2202      	movs	r2, #2
 800120c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	4313      	orrs	r3, r2
 8001248:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	22c0      	movs	r2, #192	; 0xc0
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43da      	mvns	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	400a      	ands	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2201      	movs	r2, #1
 8001272:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff ff89 	bl	80011ae <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2201      	movs	r2, #1
 80012a0:	711a      	strb	r2, [r3, #4]
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f7ff ff82 	bl	80011c2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	f043 0204 	orr.w	r2, r3, #4
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff ff78 	bl	80011d6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2201      	movs	r2, #1
 80012ea:	711a      	strb	r2, [r3, #4]
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f7ff ffd8 	bl	80012f4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	711a      	strb	r2, [r3, #4]
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff ffd1 	bl	8001308 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f043 0204 	orr.w	r2, r3, #4
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff ffc7 	bl	800131c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2201      	movs	r2, #1
 8001392:	711a      	strb	r2, [r3, #4]
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff fcce 	bl	8000d48 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e099      	b.n	80014ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d8:	e00f      	b.n	80013fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013da:	f7ff fcb5 	bl	8000d48 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d908      	bls.n	80013fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2220      	movs	r2, #32
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e078      	b.n	80014ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e8      	bne.n	80013da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_DMA_Init+0x158>)
 8001414:	4013      	ands	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001426:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4313      	orrs	r3, r2
 800144a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2b04      	cmp	r3, #4
 8001452:	d107      	bne.n	8001464 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4313      	orrs	r3, r2
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f023 0307 	bic.w	r3, r3, #7
 800147a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	4313      	orrs	r3, r2
 8001484:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	2b04      	cmp	r3, #4
 800148c:	d117      	bne.n	80014be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4313      	orrs	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00e      	beq.n	80014be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fa6f 	bl	8001984 <DMA_CheckFifoParam>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2240      	movs	r2, #64	; 0x40
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014ba:	2301      	movs	r3, #1
 80014bc:	e016      	b.n	80014ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fa26 	bl	8001918 <DMA_CalcBaseAndBitshift>
 80014cc:	4603      	mov	r3, r0
 80014ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d4:	223f      	movs	r2, #63	; 0x3f
 80014d6:	409a      	lsls	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	f010803f 	.word	0xf010803f

080014f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_DMA_Start_IT+0x26>
 800151a:	2302      	movs	r3, #2
 800151c:	e040      	b.n	80015a0 <HAL_DMA_Start_IT+0xa8>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d12f      	bne.n	8001592 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2202      	movs	r2, #2
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9b8 	bl	80018bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	223f      	movs	r2, #63	; 0x3f
 8001552:	409a      	lsls	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0216 	orr.w	r2, r2, #22
 8001566:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0208 	orr.w	r2, r2, #8
 800157e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e005      	b.n	800159e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800159a:	2302      	movs	r3, #2
 800159c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800159e:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015b4:	4b92      	ldr	r3, [pc, #584]	; (8001800 <HAL_DMA_IRQHandler+0x258>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a92      	ldr	r2, [pc, #584]	; (8001804 <HAL_DMA_IRQHandler+0x25c>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0a9b      	lsrs	r3, r3, #10
 80015c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	2208      	movs	r2, #8
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d013      	beq.n	8001614 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0204 	bic.w	r2, r2, #4
 80015fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001600:	2208      	movs	r2, #8
 8001602:	409a      	lsls	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2201      	movs	r2, #1
 800161a:	409a      	lsls	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d012      	beq.n	800164a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	2201      	movs	r2, #1
 8001638:	409a      	lsls	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	f043 0202 	orr.w	r2, r3, #2
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	2204      	movs	r2, #4
 8001650:	409a      	lsls	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d012      	beq.n	8001680 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	2204      	movs	r2, #4
 800166e:	409a      	lsls	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	f043 0204 	orr.w	r2, r3, #4
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2210      	movs	r2, #16
 8001686:	409a      	lsls	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d043      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03c      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	2210      	movs	r2, #16
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d018      	beq.n	80016ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d108      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d024      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
 80016d6:	e01f      	b.n	8001718 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01b      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
 80016e8:	e016      	b.n	8001718 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0208 	bic.w	r2, r2, #8
 8001706:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	2220      	movs	r2, #32
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 808e 	beq.w	8001846 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8086 	beq.w	8001846 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	2220      	movs	r2, #32
 8001740:	409a      	lsls	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b05      	cmp	r3, #5
 8001750:	d136      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0216 	bic.w	r2, r2, #22
 8001760:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001770:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <HAL_DMA_IRQHandler+0x1da>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0208 	bic.w	r2, r2, #8
 8001790:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	223f      	movs	r2, #63	; 0x3f
 8001798:	409a      	lsls	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d07d      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
        }
        return;
 80017be:	e078      	b.n	80018b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01c      	beq.n	8001808 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d108      	bne.n	80017ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d030      	beq.n	8001846 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
 80017ec:	e02b      	b.n	8001846 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d027      	beq.n	8001846 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
 80017fe:	e022      	b.n	8001846 <HAL_DMA_IRQHandler+0x29e>
 8001800:	20001010 	.word	0x20001010
 8001804:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0210 	bic.w	r2, r2, #16
 8001824:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184a:	2b00      	cmp	r3, #0
 800184c:	d032      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d022      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2205      	movs	r2, #5
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3301      	adds	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	429a      	cmp	r2, r3
 800187c:	d307      	bcc.n	800188e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f2      	bne.n	8001872 <HAL_DMA_IRQHandler+0x2ca>
 800188c:	e000      	b.n	8001890 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800188e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
 80018b0:	e000      	b.n	80018b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018b2:	bf00      	nop
    }
  }
}
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop

080018bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b40      	cmp	r3, #64	; 0x40
 80018e8:	d108      	bne.n	80018fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018fa:	e007      	b.n	800190c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	60da      	str	r2, [r3, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	3b10      	subs	r3, #16
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <DMA_CalcBaseAndBitshift+0x64>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <DMA_CalcBaseAndBitshift+0x68>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d909      	bls.n	800195a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	; 0x58
 8001958:	e007      	b.n	800196a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	aaaaaaab 	.word	0xaaaaaaab
 8001980:	08003424 	.word	0x08003424

08001984 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d11f      	bne.n	80019de <DMA_CheckFifoParam+0x5a>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d856      	bhi.n	8001a52 <DMA_CheckFifoParam+0xce>
 80019a4:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <DMA_CheckFifoParam+0x28>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019bd 	.word	0x080019bd
 80019b0:	080019cf 	.word	0x080019cf
 80019b4:	080019bd 	.word	0x080019bd
 80019b8:	08001a53 	.word	0x08001a53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d046      	beq.n	8001a56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019cc:	e043      	b.n	8001a56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d6:	d140      	bne.n	8001a5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019dc:	e03d      	b.n	8001a5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e6:	d121      	bne.n	8001a2c <DMA_CheckFifoParam+0xa8>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d837      	bhi.n	8001a5e <DMA_CheckFifoParam+0xda>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <DMA_CheckFifoParam+0x70>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a0b 	.word	0x08001a0b
 80019fc:	08001a05 	.word	0x08001a05
 8001a00:	08001a1d 	.word	0x08001a1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
      break;
 8001a08:	e030      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d025      	beq.n	8001a62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a1a:	e022      	b.n	8001a62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a24:	d11f      	bne.n	8001a66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a2a:	e01c      	b.n	8001a66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d903      	bls.n	8001a3a <DMA_CheckFifoParam+0xb6>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d003      	beq.n	8001a40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a38:	e018      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3e:	e015      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00e      	beq.n	8001a6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a50:	e00b      	b.n	8001a6a <DMA_CheckFifoParam+0xe6>
      break;
 8001a52:	bf00      	nop
 8001a54:	e00a      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
 8001a58:	e008      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e006      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e004      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a62:	bf00      	nop
 8001a64:	e002      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e16b      	b.n	8001d70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 815a 	bne.w	8001d6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80b4 	beq.w	8001d6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a5f      	ldr	r2, [pc, #380]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a5b      	ldr	r2, [pc, #364]	; (8001d8c <HAL_GPIO_Init+0x310>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x314>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02b      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_GPIO_Init+0x318>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d025      	beq.n	8001c9e <HAL_GPIO_Init+0x222>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <HAL_GPIO_Init+0x31c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01f      	beq.n	8001c9a <HAL_GPIO_Init+0x21e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <HAL_GPIO_Init+0x320>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x21a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_GPIO_Init+0x324>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x216>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x328>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x212>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <HAL_GPIO_Init+0x32c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x20e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <HAL_GPIO_Init+0x330>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x20a>
 8001c82:	2307      	movs	r3, #7
 8001c84:	e00e      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c86:	2308      	movs	r3, #8
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x310>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce6:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cec:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae90 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fddc 	bl	80009c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e264      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d075      	beq.n	8001f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e36:	4ba3      	ldr	r3, [pc, #652]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d00c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4ba0      	ldr	r3, [pc, #640]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d112      	bne.n	8001e74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4e:	4b9d      	ldr	r3, [pc, #628]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5a:	d10b      	bne.n	8001e74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	4b99      	ldr	r3, [pc, #612]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d05b      	beq.n	8001f20 <HAL_RCC_OscConfig+0x108>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d157      	bne.n	8001f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e23f      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x74>
 8001e7e:	4b91      	ldr	r3, [pc, #580]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a90      	ldr	r2, [pc, #576]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0xb0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x98>
 8001e96:	4b8b      	ldr	r3, [pc, #556]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a8a      	ldr	r2, [pc, #552]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a87      	ldr	r2, [pc, #540]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xb0>
 8001eb0:	4b84      	ldr	r3, [pc, #528]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a83      	ldr	r2, [pc, #524]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a80      	ldr	r2, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ff3a 	bl	8000d48 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7fe ff36 	bl	8000d48 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e204      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xc0>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ff26 	bl	8000d48 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f00:	f7fe ff22 	bl	8000d48 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1f0      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	4b6c      	ldr	r3, [pc, #432]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0xe8>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d063      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2e:	4b65      	ldr	r3, [pc, #404]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b62      	ldr	r3, [pc, #392]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d11c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCC_OscConfig+0x152>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e1c4      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b56      	ldr	r3, [pc, #344]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4952      	ldr	r1, [pc, #328]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	e03a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_RCC_OscConfig+0x2b0>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fedb 	bl	8000d48 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f96:	f7fe fed7 	bl	8000d48 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1a5      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4940      	ldr	r1, [pc, #256]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <HAL_RCC_OscConfig+0x2b0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe feba 	bl	8000d48 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7fe feb6 	bl	8000d48 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e184      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d030      	beq.n	8002064 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_RCC_OscConfig+0x2b4>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7fe fe9a 	bl	8000d48 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002018:	f7fe fe96 	bl	8000d48 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e164      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x200>
 8002036:	e015      	b.n	8002064 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_OscConfig+0x2b4>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7fe fe83 	bl	8000d48 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002046:	f7fe fe7f 	bl	8000d48 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e14d      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a0 	beq.w	80021b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_OscConfig+0x2b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d121      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_RCC_OscConfig+0x2b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_RCC_OscConfig+0x2b8>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7fe fe45 	bl	8000d48 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e011      	b.n	80020e6 <HAL_RCC_OscConfig+0x2ce>
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	42470000 	.word	0x42470000
 80020cc:	42470e80 	.word	0x42470e80
 80020d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d4:	f7fe fe38 	bl	8000d48 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e106      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b85      	ldr	r3, [pc, #532]	; (80022fc <HAL_RCC_OscConfig+0x4e4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d106      	bne.n	8002108 <HAL_RCC_OscConfig+0x2f0>
 80020fa:	4b81      	ldr	r3, [pc, #516]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a80      	ldr	r2, [pc, #512]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
 8002106:	e01c      	b.n	8002142 <HAL_RCC_OscConfig+0x32a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x312>
 8002110:	4b7b      	ldr	r3, [pc, #492]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a7a      	ldr	r2, [pc, #488]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	4b78      	ldr	r3, [pc, #480]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a77      	ldr	r2, [pc, #476]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0x32a>
 800212a:	4b75      	ldr	r3, [pc, #468]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	4a74      	ldr	r2, [pc, #464]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6713      	str	r3, [r2, #112]	; 0x70
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a71      	ldr	r2, [pc, #452]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d015      	beq.n	8002176 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214a:	f7fe fdfd 	bl	8000d48 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fdf9 	bl	8000d48 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0c5      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ee      	beq.n	8002152 <HAL_RCC_OscConfig+0x33a>
 8002174:	e014      	b.n	80021a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7fe fde7 	bl	8000d48 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fde3 	bl	8000d48 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0af      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b56      	ldr	r3, [pc, #344]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a55      	ldr	r2, [pc, #340]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 809b 	beq.w	80022f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d05c      	beq.n	8002282 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d141      	bne.n	8002254 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCC_OscConfig+0x4ec>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fdb7 	bl	8000d48 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe fdb3 	bl	8000d48 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e081      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f0:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	019b      	lsls	r3, r3, #6
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	3b01      	subs	r3, #1
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	061b      	lsls	r3, r3, #24
 8002220:	4937      	ldr	r1, [pc, #220]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCC_OscConfig+0x4ec>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fd8c 	bl	8000d48 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fd88 	bl	8000d48 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e056      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x41c>
 8002252:	e04e      	b.n	80022f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x4ec>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fd75 	bl	8000d48 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fd71 	bl	8000d48 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e03f      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x44a>
 8002280:	e037      	b.n	80022f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e032      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800228e:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_RCC_OscConfig+0x4e8>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d028      	beq.n	80022ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d121      	bne.n	80022ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d11a      	bne.n	80022ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022be:	4013      	ands	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d111      	bne.n	80022ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	3b01      	subs	r3, #1
 80022d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40007000 	.word	0x40007000
 8002300:	40023800 	.word	0x40023800
 8002304:	42470060 	.word	0x42470060

08002308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0cc      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800231c:	4b68      	ldr	r3, [pc, #416]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d90c      	bls.n	8002344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002366:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800237e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d044      	beq.n	8002428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d119      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e06f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e067      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 0203 	bic.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4934      	ldr	r1, [pc, #208]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f8:	f7fe fca6 	bl	8000d48 <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002400:	f7fe fca2 	bl	8000d48 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	; 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e04f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 020c 	and.w	r2, r3, #12
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	429a      	cmp	r2, r3
 8002426:	d1eb      	bne.n	8002400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d20c      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f821 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fc06 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023c00 	.word	0x40023c00
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08003414 	.word	0x08003414
 80024cc:	20001010 	.word	0x20001010
 80024d0:	20001014 	.word	0x20001014

080024d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	2300      	movs	r3, #0
 80024e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ec:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d00d      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x40>
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	f200 80bd 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x1a4>
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x34>
 8002502:	2b04      	cmp	r3, #4
 8002504:	d003      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x3a>
 8002506:	e0b7      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b61      	ldr	r3, [pc, #388]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800250a:	60bb      	str	r3, [r7, #8]
       break;
 800250c:	e0b7      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800250e:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002510:	60bb      	str	r3, [r7, #8]
      break;
 8002512:	e0b4      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002514:	4b5d      	ldr	r3, [pc, #372]	; (800268c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800251c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800251e:	4b5b      	ldr	r3, [pc, #364]	; (800268c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d04d      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252a:	4b58      	ldr	r3, [pc, #352]	; (800268c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	099b      	lsrs	r3, r3, #6
 8002530:	461a      	mov	r2, r3
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	ea02 0800 	and.w	r8, r2, r0
 8002542:	ea03 0901 	and.w	r9, r3, r1
 8002546:	4640      	mov	r0, r8
 8002548:	4649      	mov	r1, r9
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	014b      	lsls	r3, r1, #5
 8002554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002558:	0142      	lsls	r2, r0, #5
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	ebb0 0008 	subs.w	r0, r0, r8
 8002562:	eb61 0109 	sbc.w	r1, r1, r9
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	018b      	lsls	r3, r1, #6
 8002570:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002574:	0182      	lsls	r2, r0, #6
 8002576:	1a12      	subs	r2, r2, r0
 8002578:	eb63 0301 	sbc.w	r3, r3, r1
 800257c:	f04f 0000 	mov.w	r0, #0
 8002580:	f04f 0100 	mov.w	r1, #0
 8002584:	00d9      	lsls	r1, r3, #3
 8002586:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800258a:	00d0      	lsls	r0, r2, #3
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	eb12 0208 	adds.w	r2, r2, r8
 8002594:	eb43 0309 	adc.w	r3, r3, r9
 8002598:	f04f 0000 	mov.w	r0, #0
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	0259      	lsls	r1, r3, #9
 80025a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025a6:	0250      	lsls	r0, r2, #9
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	f7fd fe06 	bl	80001c8 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4613      	mov	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e04a      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	099b      	lsrs	r3, r3, #6
 80025cc:	461a      	mov	r2, r3
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	ea02 0400 	and.w	r4, r2, r0
 80025de:	ea03 0501 	and.w	r5, r3, r1
 80025e2:	4620      	mov	r0, r4
 80025e4:	4629      	mov	r1, r5
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	014b      	lsls	r3, r1, #5
 80025f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025f4:	0142      	lsls	r2, r0, #5
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	1b00      	subs	r0, r0, r4
 80025fc:	eb61 0105 	sbc.w	r1, r1, r5
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	018b      	lsls	r3, r1, #6
 800260a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800260e:	0182      	lsls	r2, r0, #6
 8002610:	1a12      	subs	r2, r2, r0
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	00d9      	lsls	r1, r3, #3
 8002620:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002624:	00d0      	lsls	r0, r2, #3
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	1912      	adds	r2, r2, r4
 800262c:	eb45 0303 	adc.w	r3, r5, r3
 8002630:	f04f 0000 	mov.w	r0, #0
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	0299      	lsls	r1, r3, #10
 800263a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800263e:	0290      	lsls	r0, r2, #10
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	f7fd fdba 	bl	80001c8 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	60bb      	str	r3, [r7, #8]
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800267a:	60bb      	str	r3, [r7, #8]
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	68bb      	ldr	r3, [r7, #8]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	00f42400 	.word	0x00f42400
 8002694:	007a1200 	.word	0x007a1200

08002698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e041      	b.n	800272e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fa34 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f000 fa96 	bl	8002c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d001      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e04e      	b.n	80027ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a23      	ldr	r2, [pc, #140]	; (80027fc <HAL_TIM_Base_Start_IT+0xc4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d022      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0x80>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277a:	d01d      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0x80>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_TIM_Base_Start_IT+0xc8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d018      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0x80>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <HAL_TIM_Base_Start_IT+0xcc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d013      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0x80>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_TIM_Base_Start_IT+0xd0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00e      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0x80>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1b      	ldr	r2, [pc, #108]	; (800280c <HAL_TIM_Base_Start_IT+0xd4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d009      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0x80>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_TIM_Base_Start_IT+0xd8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d004      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0x80>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_TIM_Base_Start_IT+0xdc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d111      	bne.n	80027dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d010      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027da:	e007      	b.n	80027ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800
 8002808:	40000c00 	.word	0x40000c00
 800280c:	40010400 	.word	0x40010400
 8002810:	40014000 	.word	0x40014000
 8002814:	40001800 	.word	0x40001800

08002818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0202 	mvn.w	r2, #2
 8002844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f9b5 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9a7 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f9b8 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b04      	cmp	r3, #4
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0204 	mvn.w	r2, #4
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f98b 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f97d 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f98e 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0208 	mvn.w	r2, #8
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2204      	movs	r2, #4
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f961 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f953 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f964 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b10      	cmp	r3, #16
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b10      	cmp	r3, #16
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0210 	mvn.w	r2, #16
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2208      	movs	r2, #8
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f937 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f929 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f93a 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10e      	bne.n	800299c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0201 	mvn.w	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fd ffb2 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d10e      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d107      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fae0 	bl	8002f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d107      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8ff 	bl	8002bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d107      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0220 	mvn.w	r2, #32
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 faaa 	bl	8002f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_TIM_ConfigClockSource+0x1c>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0b4      	b.n	8002bae <HAL_TIM_ConfigClockSource+0x186>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7c:	d03e      	beq.n	8002afc <HAL_TIM_ConfigClockSource+0xd4>
 8002a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a82:	f200 8087 	bhi.w	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8a:	f000 8086 	beq.w	8002b9a <HAL_TIM_ConfigClockSource+0x172>
 8002a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a92:	d87f      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b70      	cmp	r3, #112	; 0x70
 8002a96:	d01a      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0xa6>
 8002a98:	2b70      	cmp	r3, #112	; 0x70
 8002a9a:	d87b      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9c:	2b60      	cmp	r3, #96	; 0x60
 8002a9e:	d050      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x11a>
 8002aa0:	2b60      	cmp	r3, #96	; 0x60
 8002aa2:	d877      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b50      	cmp	r3, #80	; 0x50
 8002aa6:	d03c      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0xfa>
 8002aa8:	2b50      	cmp	r3, #80	; 0x50
 8002aaa:	d873      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d058      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x13a>
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d86f      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab4:	2b30      	cmp	r3, #48	; 0x30
 8002ab6:	d064      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab8:	2b30      	cmp	r3, #48	; 0x30
 8002aba:	d86b      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d060      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d867      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d05c      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d05a      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x15a>
 8002acc:	e062      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f000 f9ad 	bl	8002e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	609a      	str	r2, [r3, #8]
      break;
 8002afa:	e04f      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f000 f996 	bl	8002e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1e:	609a      	str	r2, [r3, #8]
      break;
 8002b20:	e03c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f000 f90a 	bl	8002d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2150      	movs	r1, #80	; 0x50
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f963 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b40:	e02c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f000 f929 	bl	8002da6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2160      	movs	r1, #96	; 0x60
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f953 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b60:	e01c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f000 f8ea 	bl	8002d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2140      	movs	r1, #64	; 0x40
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f943 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b80:	e00c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f000 f93a 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b92:	e003      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e000      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a40      	ldr	r2, [pc, #256]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d00f      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <TIM_Base_SetConfig+0x118>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3c      	ldr	r2, [pc, #240]	; (8002d24 <TIM_Base_SetConfig+0x11c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3b      	ldr	r2, [pc, #236]	; (8002d28 <TIM_Base_SetConfig+0x120>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d108      	bne.n	8002c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c68:	d027      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <TIM_Base_SetConfig+0x118>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d023      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2b      	ldr	r2, [pc, #172]	; (8002d24 <TIM_Base_SetConfig+0x11c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2a      	ldr	r2, [pc, #168]	; (8002d28 <TIM_Base_SetConfig+0x120>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d017      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <TIM_Base_SetConfig+0x128>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <TIM_Base_SetConfig+0x12c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00f      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <TIM_Base_SetConfig+0x130>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <TIM_Base_SetConfig+0x134>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <TIM_Base_SetConfig+0x138>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d003      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a23      	ldr	r2, [pc, #140]	; (8002d44 <TIM_Base_SetConfig+0x13c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d108      	bne.n	8002ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0xf8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d103      	bne.n	8002d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40010400 	.word	0x40010400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40001800 	.word	0x40001800
 8002d40:	40001c00 	.word	0x40001c00
 8002d44:	40002000 	.word	0x40002000

08002d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f023 030a 	bic.w	r3, r3, #10
 8002d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b087      	sub	sp, #28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0210 	bic.w	r2, r3, #16
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	031b      	lsls	r3, r3, #12
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 0307 	orr.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e05a      	b.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d01d      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d018      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1a      	ldr	r2, [pc, #104]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10c      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40010400 	.word	0x40010400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40001800 	.word	0x40001800

08002f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <arm_fir_q15>:
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	4605      	mov	r5, r0
 8002fa2:	b099      	sub	sp, #100	; 0x64
 8002fa4:	686c      	ldr	r4, [r5, #4]
 8002fa6:	9016      	str	r0, [sp, #88]	; 0x58
 8002fa8:	8800      	ldrh	r0, [r0, #0]
 8002faa:	9410      	str	r4, [sp, #64]	; 0x40
 8002fac:	4626      	mov	r6, r4
 8002fae:	f100 4c00 	add.w	ip, r0, #2147483648	; 0x80000000
 8002fb2:	68ac      	ldr	r4, [r5, #8]
 8002fb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8002fb6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002fba:	461f      	mov	r7, r3
 8002fbc:	940c      	str	r4, [sp, #48]	; 0x30
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 8002fc4:	4625      	mov	r5, r4
 8002fc6:	9411      	str	r4, [sp, #68]	; 0x44
 8002fc8:	08bc      	lsrs	r4, r7, #2
 8002fca:	9014      	str	r0, [sp, #80]	; 0x50
 8002fcc:	9112      	str	r1, [sp, #72]	; 0x48
 8002fce:	9213      	str	r2, [sp, #76]	; 0x4c
 8002fd0:	9415      	str	r4, [sp, #84]	; 0x54
 8002fd2:	f000 80e8 	beq.w	80031a6 <arm_fir_q15+0x20a>
 8002fd6:	4627      	mov	r7, r4
 8002fd8:	4604      	mov	r4, r0
 8002fda:	0880      	lsrs	r0, r0, #2
 8002fdc:	900b      	str	r0, [sp, #44]	; 0x2c
 8002fde:	00c0      	lsls	r0, r0, #3
 8002fe0:	4403      	add	r3, r0
 8002fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8002fe4:	f004 0303 	and.w	r3, r4, #3
 8002fe8:	930d      	str	r3, [sp, #52]	; 0x34
 8002fea:	f105 0308 	add.w	r3, r5, #8
 8002fee:	9305      	str	r3, [sp, #20]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	9306      	str	r3, [sp, #24]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffc:	f106 0308 	add.w	r3, r6, #8
 8003000:	900f      	str	r0, [sp, #60]	; 0x3c
 8003002:	9307      	str	r3, [sp, #28]
 8003004:	9708      	str	r7, [sp, #32]
 8003006:	9a06      	ldr	r2, [sp, #24]
 8003008:	9c05      	ldr	r4, [sp, #20]
 800300a:	f932 3c08 	ldrsh.w	r3, [r2, #-8]
 800300e:	f824 3c08 	strh.w	r3, [r4, #-8]
 8003012:	f932 3c06 	ldrsh.w	r3, [r2, #-6]
 8003016:	f824 3c06 	strh.w	r3, [r4, #-6]
 800301a:	4611      	mov	r1, r2
 800301c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800301e:	f931 3c04 	ldrsh.w	r3, [r1, #-4]
 8003022:	f824 3c04 	strh.w	r3, [r4, #-4]
 8003026:	9a07      	ldr	r2, [sp, #28]
 8003028:	f931 3c02 	ldrsh.w	r3, [r1, #-2]
 800302c:	f824 3c02 	strh.w	r3, [r4, #-2]
 8003030:	f852 9c08 	ldr.w	r9, [r2, #-8]
 8003034:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8003038:	4613      	mov	r3, r2
 800303a:	4692      	mov	sl, r2
 800303c:	2e00      	cmp	r6, #0
 800303e:	f000 8135 	beq.w	80032ac <arm_fir_q15+0x310>
 8003042:	3308      	adds	r3, #8
 8003044:	469b      	mov	fp, r3
 8003046:	930a      	str	r3, [sp, #40]	; 0x28
 8003048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800304a:	f8cd b000 	str.w	fp, [sp]
 800304e:	2000      	movs	r0, #0
 8003050:	f103 0a08 	add.w	sl, r3, #8
 8003054:	fa1f f388 	uxth.w	r3, r8
 8003058:	4607      	mov	r7, r0
 800305a:	9001      	str	r0, [sp, #4]
 800305c:	4605      	mov	r5, r0
 800305e:	4604      	mov	r4, r0
 8003060:	4684      	mov	ip, r0
 8003062:	4686      	mov	lr, r0
 8003064:	9603      	str	r6, [sp, #12]
 8003066:	464a      	mov	r2, r9
 8003068:	9002      	str	r0, [sp, #8]
 800306a:	469b      	mov	fp, r3
 800306c:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 8003070:	fbc2 cec3 	smlald	ip, lr, r2, r3
 8003074:	9e01      	ldr	r6, [sp, #4]
 8003076:	fbc8 76c3 	smlald	r7, r6, r8, r3
 800307a:	4621      	mov	r1, r4
 800307c:	0c12      	lsrs	r2, r2, #16
 800307e:	9c00      	ldr	r4, [sp, #0]
 8003080:	0412      	lsls	r2, r2, #16
 8003082:	ea4b 0902 	orr.w	r9, fp, r2
 8003086:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800308a:	fbc9 51d3 	smlaldx	r5, r1, r9, r3
 800308e:	ea4f 4918 	mov.w	r9, r8, lsr #16
 8003092:	fa1f fb82 	uxth.w	fp, r2
 8003096:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800309a:	9104      	str	r1, [sp, #16]
 800309c:	ea4b 0909 	orr.w	r9, fp, r9
 80030a0:	9902      	ldr	r1, [sp, #8]
 80030a2:	fbc9 01d3 	smlaldx	r0, r1, r9, r3
 80030a6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 80030aa:	fbc8 cec3 	smlald	ip, lr, r8, r3
 80030ae:	f854 8c04 	ldr.w	r8, [r4, #-4]
 80030b2:	fbc2 76c3 	smlald	r7, r6, r2, r3
 80030b6:	9601      	str	r6, [sp, #4]
 80030b8:	9c04      	ldr	r4, [sp, #16]
 80030ba:	fbc9 54d3 	smlaldx	r5, r4, r9, r3
 80030be:	0c16      	lsrs	r6, r2, #16
 80030c0:	fa1f fb88 	uxth.w	fp, r8
 80030c4:	0436      	lsls	r6, r6, #16
 80030c6:	ea4b 0606 	orr.w	r6, fp, r6
 80030ca:	fbc6 01d3 	smlaldx	r0, r1, r6, r3
 80030ce:	9b00      	ldr	r3, [sp, #0]
 80030d0:	9102      	str	r1, [sp, #8]
 80030d2:	3308      	adds	r3, #8
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	9b03      	ldr	r3, [sp, #12]
 80030d8:	3b01      	subs	r3, #1
 80030da:	f10a 0a08 	add.w	sl, sl, #8
 80030de:	9303      	str	r3, [sp, #12]
 80030e0:	d1c4      	bne.n	800306c <arm_fir_q15+0xd0>
 80030e2:	4691      	mov	r9, r2
 80030e4:	9b07      	ldr	r3, [sp, #28]
 80030e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80030e8:	4413      	add	r3, r2
 80030ea:	469a      	mov	sl, r3
 80030ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030f0:	b1ca      	cbz	r2, 8003126 <arm_fir_q15+0x18a>
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fbc9 cec3 	smlald	ip, lr, r9, r3
 80030f8:	9e01      	ldr	r6, [sp, #4]
 80030fa:	fbc8 76c3 	smlald	r7, r6, r8, r3
 80030fe:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8003102:	fa1f f288 	uxth.w	r2, r8
 8003106:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800310a:	9601      	str	r6, [sp, #4]
 800310c:	ea42 0909 	orr.w	r9, r2, r9
 8003110:	f8da 6000 	ldr.w	r6, [sl]
 8003114:	fbc9 54d3 	smlaldx	r5, r4, r9, r3
 8003118:	ea4f 4218 	mov.w	r2, r8, lsr #16
 800311c:	0412      	lsls	r2, r2, #16
 800311e:	b2b6      	uxth	r6, r6
 8003120:	4316      	orrs	r6, r2
 8003122:	fbc6 01d3 	smlaldx	r0, r1, r6, r3
 8003126:	9b01      	ldr	r3, [sp, #4]
 8003128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800312a:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 800312e:	0bff      	lsrs	r7, r7, #15
 8003130:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
 8003134:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 8003138:	f307 070f 	ssat	r7, #16, r7
 800313c:	f30c 0c0f 	ssat	ip, #16, ip
 8003140:	b2bf      	uxth	r7, r7
 8003142:	fa1f fc8c 	uxth.w	ip, ip
 8003146:	0bed      	lsrs	r5, r5, #15
 8003148:	0bc0      	lsrs	r0, r0, #15
 800314a:	ea45 4544 	orr.w	r5, r5, r4, lsl #17
 800314e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
 8003152:	f305 050f 	ssat	r5, #16, r5
 8003156:	f300 000f 	ssat	r0, #16, r0
 800315a:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 800315e:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8003162:	4613      	mov	r3, r2
 8003164:	f842 5c08 	str.w	r5, [r2, #-8]
 8003168:	f842 7c04 	str.w	r7, [r2, #-4]
 800316c:	9a05      	ldr	r2, [sp, #20]
 800316e:	3308      	adds	r3, #8
 8003170:	3208      	adds	r2, #8
 8003172:	9309      	str	r3, [sp, #36]	; 0x24
 8003174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003176:	9205      	str	r2, [sp, #20]
 8003178:	9307      	str	r3, [sp, #28]
 800317a:	9a06      	ldr	r2, [sp, #24]
 800317c:	9b08      	ldr	r3, [sp, #32]
 800317e:	3208      	adds	r2, #8
 8003180:	3b01      	subs	r3, #1
 8003182:	9206      	str	r2, [sp, #24]
 8003184:	9308      	str	r3, [sp, #32]
 8003186:	f47f af3e 	bne.w	8003006 <arm_fir_q15+0x6a>
 800318a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800318c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	441a      	add	r2, r3
 8003192:	9211      	str	r2, [sp, #68]	; 0x44
 8003194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003196:	441a      	add	r2, r3
 8003198:	9212      	str	r2, [sp, #72]	; 0x48
 800319a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800319c:	441a      	add	r2, r3
 800319e:	9213      	str	r2, [sp, #76]	; 0x4c
 80031a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031a2:	441a      	add	r2, r3
 80031a4:	9210      	str	r2, [sp, #64]	; 0x40
 80031a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80031a8:	f013 0303 	ands.w	r3, r3, #3
 80031ac:	9302      	str	r3, [sp, #8]
 80031ae:	d03f      	beq.n	8003230 <arm_fir_q15+0x294>
 80031b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80031b2:	f1a2 0c02 	sub.w	ip, r2, #2
 80031b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031b8:	f102 0904 	add.w	r9, r2, #4
 80031bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80031be:	f8cd 9004 	str.w	r9, [sp, #4]
 80031c2:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80031c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031c8:	f8cd 8000 	str.w	r8, [sp]
 80031cc:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80031d0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80031d4:	f102 0e04 	add.w	lr, r2, #4
 80031d8:	461f      	mov	r7, r3
 80031da:	f938 3b02 	ldrsh.w	r3, [r8], #2
 80031de:	9a01      	ldr	r2, [sp, #4]
 80031e0:	9900      	ldr	r1, [sp, #0]
 80031e2:	f82c 3f02 	strh.w	r3, [ip, #2]!
 80031e6:	2400      	movs	r4, #0
 80031e8:	4673      	mov	r3, lr
 80031ea:	2500      	movs	r5, #0
 80031ec:	f933 bc04 	ldrsh.w	fp, [r3, #-4]
 80031f0:	f932 ac04 	ldrsh.w	sl, [r2, #-4]
 80031f4:	f933 6c02 	ldrsh.w	r6, [r3, #-2]
 80031f8:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 80031fc:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 8003200:	3901      	subs	r1, #1
 8003202:	f103 0304 	add.w	r3, r3, #4
 8003206:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 800320a:	f102 0204 	add.w	r2, r2, #4
 800320e:	d1ed      	bne.n	80031ec <arm_fir_q15+0x250>
 8003210:	0be3      	lsrs	r3, r4, #15
 8003212:	3f01      	subs	r7, #1
 8003214:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 8003218:	f10e 0e02 	add.w	lr, lr, #2
 800321c:	f303 030f 	ssat	r3, #16, r3
 8003220:	f829 3b02 	strh.w	r3, [r9], #2
 8003224:	d1d9      	bne.n	80031da <arm_fir_q15+0x23e>
 8003226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003228:	9a02      	ldr	r2, [sp, #8]
 800322a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800322e:	9310      	str	r3, [sp, #64]	; 0x40
 8003230:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003232:	1e5f      	subs	r7, r3, #1
 8003234:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003236:	08bd      	lsrs	r5, r7, #2
 8003238:	685e      	ldr	r6, [r3, #4]
 800323a:	d029      	beq.n	8003290 <arm_fir_q15+0x2f4>
 800323c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800323e:	4602      	mov	r2, r0
 8003240:	f106 0310 	add.w	r3, r6, #16
 8003244:	3210      	adds	r2, #16
 8003246:	4296      	cmp	r6, r2
 8003248:	bf38      	it	cc
 800324a:	4298      	cmpcc	r0, r3
 800324c:	bf2c      	ite	cs
 800324e:	2301      	movcs	r3, #1
 8003250:	2300      	movcc	r3, #0
 8003252:	2d02      	cmp	r5, #2
 8003254:	bf94      	ite	ls
 8003256:	2300      	movls	r3, #0
 8003258:	f003 0301 	andhi.w	r3, r3, #1
 800325c:	b39b      	cbz	r3, 80032c6 <arm_fir_q15+0x32a>
 800325e:	4603      	mov	r3, r0
 8003260:	4333      	orrs	r3, r6
 8003262:	079b      	lsls	r3, r3, #30
 8003264:	d12f      	bne.n	80032c6 <arm_fir_q15+0x32a>
 8003266:	f100 0208 	add.w	r2, r0, #8
 800326a:	f106 0308 	add.w	r3, r6, #8
 800326e:	2100      	movs	r1, #0
 8003270:	e912 0011 	ldmdb	r2, {r0, r4}
 8003274:	3101      	adds	r1, #1
 8003276:	428d      	cmp	r5, r1
 8003278:	e903 0011 	stmdb	r3, {r0, r4}
 800327c:	f102 0208 	add.w	r2, r2, #8
 8003280:	f103 0308 	add.w	r3, r3, #8
 8003284:	d1f4      	bne.n	8003270 <arm_fir_q15+0x2d4>
 8003286:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003288:	00ed      	lsls	r5, r5, #3
 800328a:	442b      	add	r3, r5
 800328c:	442e      	add	r6, r5
 800328e:	9310      	str	r3, [sp, #64]	; 0x40
 8003290:	f017 0303 	ands.w	r3, r7, #3
 8003294:	d007      	beq.n	80032a6 <arm_fir_q15+0x30a>
 8003296:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003298:	3e02      	subs	r6, #2
 800329a:	f932 1b02 	ldrsh.w	r1, [r2], #2
 800329e:	f826 1f02 	strh.w	r1, [r6, #2]!
 80032a2:	3b01      	subs	r3, #1
 80032a4:	d1f9      	bne.n	800329a <arm_fir_q15+0x2fe>
 80032a6:	b019      	add	sp, #100	; 0x64
 80032a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ac:	f10a 0208 	add.w	r2, sl, #8
 80032b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032b2:	9601      	str	r6, [sp, #4]
 80032b4:	4630      	mov	r0, r6
 80032b6:	4631      	mov	r1, r6
 80032b8:	4637      	mov	r7, r6
 80032ba:	4635      	mov	r5, r6
 80032bc:	46b6      	mov	lr, r6
 80032be:	4634      	mov	r4, r6
 80032c0:	46b4      	mov	ip, r6
 80032c2:	920a      	str	r2, [sp, #40]	; 0x28
 80032c4:	e713      	b.n	80030ee <arm_fir_q15+0x152>
 80032c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80032c8:	f106 0208 	add.w	r2, r6, #8
 80032cc:	3308      	adds	r3, #8
 80032ce:	4629      	mov	r1, r5
 80032d0:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
 80032d4:	f822 0c08 	strh.w	r0, [r2, #-8]
 80032d8:	f933 0c06 	ldrsh.w	r0, [r3, #-6]
 80032dc:	f822 0c06 	strh.w	r0, [r2, #-6]
 80032e0:	f933 0c04 	ldrsh.w	r0, [r3, #-4]
 80032e4:	f822 0c04 	strh.w	r0, [r2, #-4]
 80032e8:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
 80032ec:	f822 0c02 	strh.w	r0, [r2, #-2]
 80032f0:	3901      	subs	r1, #1
 80032f2:	f103 0308 	add.w	r3, r3, #8
 80032f6:	f102 0208 	add.w	r2, r2, #8
 80032fa:	d1e9      	bne.n	80032d0 <arm_fir_q15+0x334>
 80032fc:	e7c3      	b.n	8003286 <arm_fir_q15+0x2ea>
 80032fe:	bf00      	nop

08003300 <arm_fir_init_q15>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	f011 0501 	ands.w	r5, r1, #1
 8003306:	d10e      	bne.n	8003326 <arm_fir_init_q15+0x26>
 8003308:	461e      	mov	r6, r3
 800330a:	4613      	mov	r3, r2
 800330c:	9a04      	ldr	r2, [sp, #16]
 800330e:	8001      	strh	r1, [r0, #0]
 8003310:	4604      	mov	r4, r0
 8003312:	188a      	adds	r2, r1, r2
 8003314:	6083      	str	r3, [r0, #8]
 8003316:	0052      	lsls	r2, r2, #1
 8003318:	4629      	mov	r1, r5
 800331a:	4630      	mov	r0, r6
 800331c:	f000 f82a 	bl	8003374 <memset>
 8003320:	6066      	str	r6, [r4, #4]
 8003322:	4628      	mov	r0, r5
 8003324:	bd70      	pop	{r4, r5, r6, pc}
 8003326:	f04f 30ff 	mov.w	r0, #4294967295
 800332a:	bd70      	pop	{r4, r5, r6, pc}

0800332c <__libc_init_array>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	4d0d      	ldr	r5, [pc, #52]	; (8003364 <__libc_init_array+0x38>)
 8003330:	4c0d      	ldr	r4, [pc, #52]	; (8003368 <__libc_init_array+0x3c>)
 8003332:	1b64      	subs	r4, r4, r5
 8003334:	10a4      	asrs	r4, r4, #2
 8003336:	2600      	movs	r6, #0
 8003338:	42a6      	cmp	r6, r4
 800333a:	d109      	bne.n	8003350 <__libc_init_array+0x24>
 800333c:	4d0b      	ldr	r5, [pc, #44]	; (800336c <__libc_init_array+0x40>)
 800333e:	4c0c      	ldr	r4, [pc, #48]	; (8003370 <__libc_init_array+0x44>)
 8003340:	f000 f820 	bl	8003384 <_init>
 8003344:	1b64      	subs	r4, r4, r5
 8003346:	10a4      	asrs	r4, r4, #2
 8003348:	2600      	movs	r6, #0
 800334a:	42a6      	cmp	r6, r4
 800334c:	d105      	bne.n	800335a <__libc_init_array+0x2e>
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	f855 3b04 	ldr.w	r3, [r5], #4
 8003354:	4798      	blx	r3
 8003356:	3601      	adds	r6, #1
 8003358:	e7ee      	b.n	8003338 <__libc_init_array+0xc>
 800335a:	f855 3b04 	ldr.w	r3, [r5], #4
 800335e:	4798      	blx	r3
 8003360:	3601      	adds	r6, #1
 8003362:	e7f2      	b.n	800334a <__libc_init_array+0x1e>
 8003364:	08003434 	.word	0x08003434
 8003368:	08003434 	.word	0x08003434
 800336c:	08003434 	.word	0x08003434
 8003370:	08003438 	.word	0x08003438

08003374 <memset>:
 8003374:	4402      	add	r2, r0
 8003376:	4603      	mov	r3, r0
 8003378:	4293      	cmp	r3, r2
 800337a:	d100      	bne.n	800337e <memset+0xa>
 800337c:	4770      	bx	lr
 800337e:	f803 1b01 	strb.w	r1, [r3], #1
 8003382:	e7f9      	b.n	8003378 <memset+0x4>

08003384 <_init>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	bf00      	nop
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr

08003390 <_fini>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	bf00      	nop
 8003394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	469e      	mov	lr, r3
 800339a:	4770      	bx	lr
