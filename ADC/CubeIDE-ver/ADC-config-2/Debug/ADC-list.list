
ADC-list.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a90  08008a90  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a98  08008a98  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000090  08008b30  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  08008b30  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d58c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bff  00000000  00000000  0003d64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001718  00000000  00000000  00041250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  00042968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002526e  00000000  00000000  00043ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c83  00000000  00000000  0006915e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d71fb  00000000  00000000  0007dde1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154fdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000635c  00000000  00000000  00155058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a5c 	.word	0x08008a5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008a5c 	.word	0x08008a5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fd2a 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f812 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9ec 	bl	80008b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8e2 	bl	80006a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f90e 	bl	80006fc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f93c 	bl	800075c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f007 feb6 	bl	8008254 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004e8:	f000 f888 	bl	80005fc <MX_ADC1_Init>
  MX_TIM3_Init();
 80004ec:	f000 f96c 	bl	80007c8 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f0:	f007 fed6 	bl	80082a0 <MX_USB_HOST_Process>
 80004f4:	e7fc      	b.n	80004f0 <main+0x28>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b098      	sub	sp, #96	; 0x60
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f008 f9e6 	bl	80088d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <SystemClock_Config+0xfc>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	4a30      	ldr	r2, [pc, #192]	; (80005f4 <SystemClock_Config+0xfc>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	6413      	str	r3, [r2, #64]	; 0x40
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <SystemClock_Config+0xfc>)
 800053c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <SystemClock_Config+0x100>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <SystemClock_Config+0x100>)
 8000550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000554:	6013      	str	r3, [r2, #0]
 8000556:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0x100>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000562:	2301      	movs	r3, #1
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000570:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000576:	2308      	movs	r3, #8
 8000578:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800057e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058c:	4618      	mov	r0, r3
 800058e:	f003 fd4d 	bl	800402c <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000598:	f000 fa88 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 ffa6 	bl	800450c <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005c6:	f000 fa71 	bl	8000aac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005ca:	2301      	movs	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005ce:	23c0      	movs	r3, #192	; 0xc0
 80005d0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f974 	bl	80048c8 <HAL_RCCEx_PeriphCLKConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005e6:	f000 fa61 	bl	8000aac <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3760      	adds	r7, #96	; 0x60
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <MX_ADC1_Init+0xa0>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_ADC1_Init+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_ADC1_Init+0x9c>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_ADC1_Init+0x9c>)
 800065c:	2201      	movs	r2, #1
 800065e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000662:	f000 fcf3 	bl	800104c <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800066c:	f000 fa1e 	bl	8000aac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000670:	230b      	movs	r3, #11
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000682:	f000 fd27 	bl	80010d4 <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800068c:	f000 fa0e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000154 	.word	0x20000154
 800069c:	40012000 	.word	0x40012000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f002 fecd 	bl	800347c <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f9e0 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000c0 	.word	0x200000c0
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_I2S3_Init+0x54>)
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <MX_I2S3_Init+0x58>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2S3_Init+0x54>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_I2S3_Init+0x54>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_I2S3_Init+0x54>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_I2S3_Init+0x54>)
 800071c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000720:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_I2S3_Init+0x54>)
 8000724:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <MX_I2S3_Init+0x5c>)
 8000726:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_I2S3_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_I2S3_Init+0x54>)
 800073c:	f002 ffd6 	bl	80036ec <HAL_I2S_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000746:	f000 f9b1 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200001f4 	.word	0x200001f4
 8000754:	40003c00 	.word	0x40003c00
 8000758:	00017700 	.word	0x00017700

0800075c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <MX_SPI1_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007ae:	f004 f9c9 	bl	8004b44 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f978 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000019c 	.word	0x2000019c
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]
 80007f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_TIM3_Init+0xe0>)
 80007fa:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <MX_TIM3_Init+0xe4>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800080c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000810:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800081e:	4822      	ldr	r0, [pc, #136]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000820:	f004 f9f4 	bl	8004c0c <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800082a:	f000 f93f 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000838:	4619      	mov	r1, r3
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800083c:	f004 faa6 	bl	8004d8c <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000846:	f000 f931 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800084a:	4817      	ldr	r0, [pc, #92]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800084c:	f004 fa09 	bl	8004c62 <HAL_TIM_OC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000856:	f000 f929 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	4619      	mov	r1, r3
 8000868:	480f      	ldr	r0, [pc, #60]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800086a:	f004 fe31 	bl	80054d0 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000874:	f000 f91a 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000890:	f004 fa1c 	bl	8004ccc <HAL_TIM_OC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800089a:	f000 f907 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	; 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000114 	.word	0x20000114
 80008ac:	40000400 	.word	0x40000400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4b71      	ldr	r3, [pc, #452]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a70      	ldr	r2, [pc, #448]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b6e      	ldr	r3, [pc, #440]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b6a      	ldr	r3, [pc, #424]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a69      	ldr	r2, [pc, #420]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b63      	ldr	r3, [pc, #396]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a62      	ldr	r2, [pc, #392]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b5c      	ldr	r3, [pc, #368]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a5b      	ldr	r2, [pc, #364]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b59      	ldr	r3, [pc, #356]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b55      	ldr	r3, [pc, #340]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b4e      	ldr	r3, [pc, #312]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a4d      	ldr	r2, [pc, #308]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	4848      	ldr	r0, [pc, #288]	; (8000a94 <MX_GPIO_Init+0x1e4>)
 8000974:	f001 f878 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	4846      	ldr	r0, [pc, #280]	; (8000a98 <MX_GPIO_Init+0x1e8>)
 800097e:	f001 f873 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000988:	4844      	ldr	r0, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x1ec>)
 800098a:	f001 f86d 	bl	8001a68 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800098e:	2308      	movs	r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	483b      	ldr	r0, [pc, #236]	; (8000a94 <MX_GPIO_Init+0x1e4>)
 80009a6:	f000 fec5 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4835      	ldr	r0, [pc, #212]	; (8000a98 <MX_GPIO_Init+0x1e8>)
 80009c2:	f000 feb7 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009c6:	2308      	movs	r3, #8
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d6:	2305      	movs	r3, #5
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482d      	ldr	r0, [pc, #180]	; (8000a98 <MX_GPIO_Init+0x1e8>)
 80009e2:	f000 fea7 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0x1f0>)
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	482a      	ldr	r0, [pc, #168]	; (8000aa4 <MX_GPIO_Init+0x1f4>)
 80009fa:	f000 fe9b 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009fe:	2304      	movs	r3, #4
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000a12:	f000 fe8f 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000a34:	f000 fe7e 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a38:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a3c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <MX_GPIO_Init+0x1ec>)
 8000a52:	f000 fe6f 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a56:	2320      	movs	r3, #32
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_GPIO_Init+0x1ec>)
 8000a6a:	f000 fe63 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0x1f0>)
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_GPIO_Init+0x1e4>)
 8000a82:	f000 fe57 	bl	8001734 <HAL_GPIO_Init>

}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	10120000 	.word	0x10120000
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f000 fdd8 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_ADC_MspInit+0x7c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d127      	bne.n	8000b7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b7a:	f000 fddb 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012000 	.word	0x40012000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_I2C_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be4:	2304      	movs	r3, #4
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <HAL_I2C_MspInit+0x8c>)
 8000bf0:	f000 fda0 	bl	8001734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <HAL_I2S_MspInit+0xc0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d14a      	bne.n	8000cdc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_I2S_MspInit+0xc4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000caa:	2306      	movs	r3, #6
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <HAL_I2S_MspInit+0xc8>)
 8000cb6:	f000 fd3d 	bl	8001734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cba:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <HAL_I2S_MspInit+0xcc>)
 8000cd8:	f000 fd2c 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40003c00 	.word	0x40003c00
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020800 	.word	0x40020800

08000cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_SPI_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12b      	bne.n	8000d6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d4e:	23e0      	movs	r3, #224	; 0xe0
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_SPI_MspInit+0x8c>)
 8000d6a:	f000 fce3 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10d      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_TIM_Base_MspInit+0x40>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <HAL_TIM_Base_MspInit+0x40>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_TIM_Base_MspInit+0x40>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f8d4 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <OTG_FS_IRQHandler+0x10>)
 8000e2a:	f001 f8c5 	bl	8001fb8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000618 	.word	0x20000618

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f007 fcfc 	bl	8008864 <__errno>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	230c      	movs	r3, #12
 8000e70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	200000ac 	.word	0x200000ac
 8000ea0:	200008e0 	.word	0x200008e0

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <SystemInit+0x28>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <SystemInit+0x28>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SystemInit+0x28>)
 8000eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ebe:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ed4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ed6:	e003      	b.n	8000ee0 <LoopCopyDataInit>

08000ed8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000edc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ede:	3104      	adds	r1, #4

08000ee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ee4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee8:	d3f6      	bcc.n	8000ed8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eec:	e002      	b.n	8000ef4 <LoopFillZerobss>

08000eee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef0:	f842 3b04 	str.w	r3, [r2], #4

08000ef4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ef6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef8:	d3f9      	bcc.n	8000eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efa:	f7ff ffd3 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f007 fcb7 	bl	8008870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fae1 	bl	80004c8 <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f0c:	08008aa0 	.word	0x08008aa0
  ldr  r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f14:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f18:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000f1c:	200008e0 	.word	0x200008e0

08000f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 fbaf 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fdb0 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fbc7 	bl	800171a <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 fb8f 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	2000023c 	.word	0x2000023c

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000023c 	.word	0x2000023c

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_Delay+0x40>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000008 	.word	0x20000008

0800104c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e033      	b.n	80010ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	2b00      	cmp	r3, #0
 8001068:	d109      	bne.n	800107e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fd4e 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2b00      	cmp	r3, #0
 8001088:	d118      	bne.n	80010bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001092:	f023 0302 	bic.w	r3, r3, #2
 8001096:	f043 0202 	orr.w	r2, r3, #2
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f93a 	bl	8001318 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f023 0303 	bic.w	r3, r3, #3
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
 80010ba:	e001      	b.n	80010c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x1c>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e105      	b.n	80012fc <HAL_ADC_ConfigChannel+0x228>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	d925      	bls.n	800114c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68d9      	ldr	r1, [r3, #12]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	3b1e      	subs	r3, #30
 8001116:	2207      	movs	r2, #7
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43da      	mvns	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	400a      	ands	r2, r1
 8001124:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68d9      	ldr	r1, [r3, #12]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	4603      	mov	r3, r0
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4403      	add	r3, r0
 800113e:	3b1e      	subs	r3, #30
 8001140:	409a      	lsls	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	e022      	b.n	8001192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6919      	ldr	r1, [r3, #16]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	2207      	movs	r2, #7
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	400a      	ands	r2, r1
 800116e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	4603      	mov	r3, r0
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4403      	add	r3, r0
 8001188:	409a      	lsls	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b06      	cmp	r3, #6
 8001198:	d824      	bhi.n	80011e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b05      	subs	r3, #5
 80011ac:	221f      	movs	r2, #31
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	400a      	ands	r2, r1
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3b05      	subs	r3, #5
 80011d6:	fa00 f203 	lsl.w	r2, r0, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
 80011e2:	e04c      	b.n	800127e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b0c      	cmp	r3, #12
 80011ea:	d824      	bhi.n	8001236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3b23      	subs	r3, #35	; 0x23
 80011fe:	221f      	movs	r2, #31
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43da      	mvns	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	400a      	ands	r2, r1
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3b23      	subs	r3, #35	; 0x23
 8001228:	fa00 f203 	lsl.w	r2, r0, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	631a      	str	r2, [r3, #48]	; 0x30
 8001234:	e023      	b.n	800127e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3b41      	subs	r3, #65	; 0x41
 8001248:	221f      	movs	r2, #31
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	400a      	ands	r2, r1
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	3b41      	subs	r3, #65	; 0x41
 8001272:	fa00 f203 	lsl.w	r2, r0, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <HAL_ADC_ConfigChannel+0x234>)
 8001280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <HAL_ADC_ConfigChannel+0x238>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d109      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1cc>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b12      	cmp	r3, #18
 8001292:	d105      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_ADC_ConfigChannel+0x238>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d123      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x21e>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	d003      	beq.n	80012ba <HAL_ADC_ConfigChannel+0x1e6>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b11      	cmp	r3, #17
 80012b8:	d11b      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b10      	cmp	r3, #16
 80012cc:	d111      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_ADC_ConfigChannel+0x23c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <HAL_ADC_ConfigChannel+0x240>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	0c9a      	lsrs	r2, r3, #18
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012e4:	e002      	b.n	80012ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f9      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40012300 	.word	0x40012300
 800130c:	40012000 	.word	0x40012000
 8001310:	20000000 	.word	0x20000000
 8001314:	431bde83 	.word	0x431bde83

08001318 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001320:	4b79      	ldr	r3, [pc, #484]	; (8001508 <ADC_Init+0x1f0>)
 8001322:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	431a      	orrs	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800134c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	021a      	lsls	r2, r3, #8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001392:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6899      	ldr	r1, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	4a58      	ldr	r2, [pc, #352]	; (800150c <ADC_Init+0x1f4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d022      	beq.n	80013f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6899      	ldr	r1, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6899      	ldr	r1, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	e00f      	b.n	8001416 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001414:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0202 	bic.w	r2, r2, #2
 8001424:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6899      	ldr	r1, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7e1b      	ldrb	r3, [r3, #24]
 8001430:	005a      	lsls	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d01b      	beq.n	800147c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001452:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001462:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6859      	ldr	r1, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	3b01      	subs	r3, #1
 8001470:	035a      	lsls	r2, r3, #13
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	e007      	b.n	800148c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800148a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	051a      	lsls	r2, r3, #20
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6899      	ldr	r1, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ce:	025a      	lsls	r2, r3, #9
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6899      	ldr	r1, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	029a      	lsls	r2, r3, #10
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	609a      	str	r2, [r3, #8]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40012300 	.word	0x40012300
 800150c:	0f000001 	.word	0x0f000001

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001542:	4a04      	ldr	r2, [pc, #16]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60d3      	str	r3, [r2, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <__NVIC_EnableIRQ+0x38>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff29 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff3e 	bl	8001558 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff8e 	bl	8001604 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5d 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff31 	bl	8001574 <__NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffa2 	bl	800166c <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e16b      	b.n	8001a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	f040 815a 	bne.w	8001a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d00b      	beq.n	800178e <HAL_GPIO_Init+0x5a>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001782:	2b11      	cmp	r3, #17
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b12      	cmp	r3, #18
 800178c:	d130      	bne.n	80017f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0xfc>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b4 	beq.w	8001a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a5e      	ldr	r2, [pc, #376]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d6:	4a5a      	ldr	r2, [pc, #360]	; (8001a40 <HAL_GPIO_Init+0x30c>)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_GPIO_Init+0x310>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x226>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_GPIO_Init+0x314>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x222>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <HAL_GPIO_Init+0x318>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x21e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <HAL_GPIO_Init+0x31c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x21a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <HAL_GPIO_Init+0x320>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x216>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x324>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x212>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <HAL_GPIO_Init+0x328>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x32c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x20a>
 800193a:	2307      	movs	r3, #7
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x228>
 800193e:	2308      	movs	r3, #8
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x228>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x228>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x228>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4934      	ldr	r1, [pc, #208]	; (8001a40 <HAL_GPIO_Init+0x30c>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_GPIO_Init+0x330>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800199e:	4a31      	ldr	r2, [pc, #196]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_GPIO_Init+0x330>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae90 	bls.w	8001750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	3724      	adds	r7, #36	; 0x24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40021400 	.word	0x40021400
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	40021c00 	.word	0x40021c00
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	041a      	lsls	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9c:	b08f      	sub	sp, #60	; 0x3c
 8001a9e:	af0a      	add	r7, sp, #40	; 0x28
 8001aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e054      	b.n	8001b56 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f006 fc22 	bl	8008310 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fdde 	bl	80056ac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	687e      	ldr	r6, [r7, #4]
 8001af8:	466d      	mov	r5, sp
 8001afa:	f106 0410 	add.w	r4, r6, #16
 8001afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b0e:	1d33      	adds	r3, r6, #4
 8001b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f003 fd58 	bl	80055c8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fdd5 	bl	80056ce <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	687e      	ldr	r6, [r7, #4]
 8001b2c:	466d      	mov	r5, sp
 8001b2e:	f106 0410 	add.w	r4, r6, #16
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b42:	1d33      	adds	r3, r6, #4
 8001b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f003 fee8 	bl	800591c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b5e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b5e:	b590      	push	{r4, r7, lr}
 8001b60:	b089      	sub	sp, #36	; 0x24
 8001b62:	af04      	add	r7, sp, #16
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	4608      	mov	r0, r1
 8001b68:	4611      	mov	r1, r2
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	70fb      	strb	r3, [r7, #3]
 8001b70:	460b      	mov	r3, r1
 8001b72:	70bb      	strb	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_HCD_HC_Init+0x28>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e07f      	b.n	8001c86 <HAL_HCD_HC_Init+0x128>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	333d      	adds	r3, #61	; 0x3d
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	3338      	adds	r3, #56	; 0x38
 8001bb2:	787a      	ldrb	r2, [r7, #1]
 8001bb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3340      	adds	r3, #64	; 0x40
 8001bc6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bc8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3339      	adds	r3, #57	; 0x39
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	333f      	adds	r3, #63	; 0x3f
 8001bee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	78bb      	ldrb	r3, [r7, #2]
 8001bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfc:	b2d8      	uxtb	r0, r3
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	333a      	adds	r3, #58	; 0x3a
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da0a      	bge.n	8001c2e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	333b      	adds	r3, #59	; 0x3b
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	e009      	b.n	8001c42 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	333b      	adds	r3, #59	; 0x3b
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	333c      	adds	r3, #60	; 0x3c
 8001c52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c56:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	787c      	ldrb	r4, [r7, #1]
 8001c5e:	78ba      	ldrb	r2, [r7, #2]
 8001c60:	78f9      	ldrb	r1, [r7, #3]
 8001c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4623      	mov	r3, r4
 8001c74:	f003 ffd4 	bl	8005c20 <USB_HC_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}

08001c8e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_HCD_HC_Halt+0x1e>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e00f      	b.n	8001ccc <HAL_HCD_HC_Halt+0x3e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 fa10 	bl	80060e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	70fb      	strb	r3, [r7, #3]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70bb      	strb	r3, [r7, #2]
 8001cea:	4613      	mov	r3, r2
 8001cec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	333b      	adds	r3, #59	; 0x3b
 8001cfe:	78ba      	ldrb	r2, [r7, #2]
 8001d00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	333f      	adds	r3, #63	; 0x3f
 8001d12:	787a      	ldrb	r2, [r7, #1]
 8001d14:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d16:	7c3b      	ldrb	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d114      	bne.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3342      	adds	r3, #66	; 0x42
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	333d      	adds	r3, #61	; 0x3d
 8001d40:	7f3a      	ldrb	r2, [r7, #28]
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e009      	b.n	8001d5a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	3342      	adds	r3, #66	; 0x42
 8001d56:	2202      	movs	r2, #2
 8001d58:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d5a:	787b      	ldrb	r3, [r7, #1]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	f200 80d6 	bhi.w	8001f0e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001d79 	.word	0x08001d79
 8001d6c:	08001ef9 	.word	0x08001ef9
 8001d70:	08001de5 	.word	0x08001de5
 8001d74:	08001e6f 	.word	0x08001e6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d78:	7c3b      	ldrb	r3, [r7, #16]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	f040 80c9 	bne.w	8001f12 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001d80:	78bb      	ldrb	r3, [r7, #2]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 80c5 	bne.w	8001f12 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001d88:	8b3b      	ldrh	r3, [r7, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3351      	adds	r3, #81	; 0x51
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	3351      	adds	r3, #81	; 0x51
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3342      	adds	r3, #66	; 0x42
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dcc:	e0a1      	b.n	8001f12 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	3342      	adds	r3, #66	; 0x42
 8001dde:	2202      	movs	r2, #2
 8001de0:	701a      	strb	r2, [r3, #0]
      break;
 8001de2:	e096      	b.n	8001f12 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001de4:	78bb      	ldrb	r3, [r7, #2]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d120      	bne.n	8001e2c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3351      	adds	r3, #81	; 0x51
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3342      	adds	r3, #66	; 0x42
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e14:	e07e      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	3342      	adds	r3, #66	; 0x42
 8001e26:	2202      	movs	r2, #2
 8001e28:	701a      	strb	r2, [r3, #0]
      break;
 8001e2a:	e073      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	3350      	adds	r3, #80	; 0x50
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	3342      	adds	r3, #66	; 0x42
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
      break;
 8001e56:	e05d      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	3342      	adds	r3, #66	; 0x42
 8001e68:	2202      	movs	r2, #2
 8001e6a:	701a      	strb	r2, [r3, #0]
      break;
 8001e6c:	e052      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e6e:	78bb      	ldrb	r3, [r7, #2]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d120      	bne.n	8001eb6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3351      	adds	r3, #81	; 0x51
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	3342      	adds	r3, #66	; 0x42
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e9e:	e039      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	3342      	adds	r3, #66	; 0x42
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
      break;
 8001eb4:	e02e      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3350      	adds	r3, #80	; 0x50
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	3342      	adds	r3, #66	; 0x42
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
      break;
 8001ee0:	e018      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3342      	adds	r3, #66	; 0x42
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	701a      	strb	r2, [r3, #0]
      break;
 8001ef6:	e00d      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	3342      	adds	r3, #66	; 0x42
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001f12:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	3344      	adds	r3, #68	; 0x44
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	8b39      	ldrh	r1, [r7, #24]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4403      	add	r3, r0
 8001f38:	3348      	adds	r3, #72	; 0x48
 8001f3a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	335c      	adds	r3, #92	; 0x5c
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	334c      	adds	r3, #76	; 0x4c
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3339      	adds	r3, #57	; 0x39
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	335d      	adds	r3, #93	; 0x5d
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	3338      	adds	r3, #56	; 0x38
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	18d1      	adds	r1, r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f003 ff44 	bl	8005e34 <USB_HC_StartXfer>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fc61 	bl	8005896 <USB_GetMode>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 80ef 	bne.w	80021ba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fc45 	bl	8005870 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80e5 	beq.w	80021b8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fc3c 	bl	8005870 <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002002:	d104      	bne.n	800200e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800200c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fc2c 	bl	8005870 <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002022:	d104      	bne.n	800202e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800202c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fc1c 	bl	8005870 <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800203e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002042:	d104      	bne.n	800204e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800204c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fc0c 	bl	8005870 <USB_ReadInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d103      	bne.n	800206a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2202      	movs	r2, #2
 8002068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f003 fbfe 	bl	8005870 <USB_ReadInterrupts>
 8002074:	4603      	mov	r3, r0
 8002076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800207a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800207e:	d115      	bne.n	80020ac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002088:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f006 f9b6 	bl	800840c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fcf4 	bl	8005a94 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fbdd 	bl	8005870 <USB_ReadInterrupts>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c0:	d102      	bne.n	80020c8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f001 f966 	bl	8003394 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fbcf 	bl	8005870 <USB_ReadInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d106      	bne.n	80020ea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f006 f979 	bl	80083d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2208      	movs	r2, #8
 80020e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fbbe 	bl	8005870 <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020fe:	d138      	bne.n	8002172 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f003 ffdb 	bl	80060c0 <USB_HC_ReadInterrupt>
 800210a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e025      	b.n	800215e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d018      	beq.n	8002158 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213c:	d106      	bne.n	800214c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f8cf 	bl	80022e8 <HCD_HC_IN_IRQHandler>
 800214a:	e005      	b.n	8002158 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fcfd 	bl	8002b52 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	d3d4      	bcc.n	8002112 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fb7a 	bl	8005870 <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b10      	cmp	r3, #16
 8002184:	d101      	bne.n	800218a <HAL_HCD_IRQHandler+0x1d2>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_HCD_IRQHandler+0x1d4>
 800218a:	2300      	movs	r3, #0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d014      	beq.n	80021ba <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0210 	bic.w	r2, r2, #16
 800219e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f001 f84b 	bl	800323c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0210 	orr.w	r2, r2, #16
 80021b4:	619a      	str	r2, [r3, #24]
 80021b6:	e000      	b.n	80021ba <HAL_HCD_IRQHandler+0x202>
      return;
 80021b8:	bf00      	nop
    }
  }
}
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_HCD_Start+0x16>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e013      	b.n	80021fe <HAL_HCD_Start+0x3e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fa51 	bl	800568a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fcb4 	bl	8005b5c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_HCD_Stop+0x16>
 8002218:	2302      	movs	r3, #2
 800221a:	e00d      	b.n	8002238 <HAL_HCD_Stop+0x32>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f004 f895 	bl	8006358 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fc5b 	bl	8005b08 <USB_ResetPort>
 8002252:	4603      	mov	r3, r0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	335c      	adds	r3, #92	; 0x5c
 8002278:	781b      	ldrb	r3, [r3, #0]
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	334c      	adds	r3, #76	; 0x4c
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 fc9d 	bl	8005bfc <USB_GetCurrentFrame>
 80022c2:	4603      	mov	r3, r0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fc78 	bl	8005bce <USB_GetHostSpeed>
 80022de:	4603      	mov	r3, r0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d119      	bne.n	800234c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	2304      	movs	r3, #4
 8002328:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	440a      	add	r2, r1
 8002340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	60d3      	str	r3, [r2, #12]
 800234a:	e0ce      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002362:	d12c      	bne.n	80023be <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002376:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	335d      	adds	r3, #93	; 0x5d
 8002388:	2207      	movs	r2, #7
 800238a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	0151      	lsls	r1, r2, #5
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	440a      	add	r2, r1
 80023a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fe93 	bl	80060e2 <USB_HC_Halt>
 80023bc:	e095      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d109      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	2320      	movs	r3, #32
 80023e4:	6093      	str	r3, [r2, #8]
 80023e6:	e080      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d134      	bne.n	8002468 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	0151      	lsls	r1, r2, #5
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	440a      	add	r2, r1
 8002414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	335d      	adds	r3, #93	; 0x5d
 800242e:	2205      	movs	r2, #5
 8002430:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2310      	movs	r3, #16
 8002442:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	461a      	mov	r2, r3
 8002452:	2308      	movs	r3, #8
 8002454:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fe3e 	bl	80060e2 <USB_HC_Halt>
 8002466:	e040      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d134      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	0151      	lsls	r1, r2, #5
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	440a      	add	r2, r1
 8002496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 fe19 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2310      	movs	r3, #16
 80024c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	335d      	adds	r3, #93	; 0x5d
 80024d2:	2208      	movs	r2, #8
 80024d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002500:	d122      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	0151      	lsls	r1, r2, #5
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	440a      	add	r2, r1
 8002518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fdd8 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	461a      	mov	r2, r3
 8002540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002544:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002546:	e300      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	f040 80fd 	bne.w	800275a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	3348      	adds	r3, #72	; 0x48
 8002578:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	0159      	lsls	r1, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	440b      	add	r3, r1
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800258c:	1ad1      	subs	r1, r2, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4403      	add	r3, r0
 800259c:	334c      	adds	r3, #76	; 0x4c
 800259e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	335d      	adds	r3, #93	; 0x5d
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3358      	adds	r3, #88	; 0x58
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2301      	movs	r3, #1
 80025d8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	333f      	adds	r3, #63	; 0x3f
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	333f      	adds	r3, #63	; 0x3f
 8002600:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002602:	2b02      	cmp	r3, #2
 8002604:	d121      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	0151      	lsls	r1, r2, #5
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	440a      	add	r2, r1
 800261c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f003 fd56 	bl	80060e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	461a      	mov	r2, r3
 8002644:	2310      	movs	r3, #16
 8002646:	6093      	str	r3, [r2, #8]
 8002648:	e070      	b.n	800272c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	333f      	adds	r3, #63	; 0x3f
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d12a      	bne.n	80026b6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	0151      	lsls	r1, r2, #5
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	440a      	add	r2, r1
 8002676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800267a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800267e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	335c      	adds	r3, #92	; 0x5c
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	b2d8      	uxtb	r0, r3
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	440b      	add	r3, r1
 80026a6:	335c      	adds	r3, #92	; 0x5c
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	4601      	mov	r1, r0
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f005 feba 	bl	8008428 <HAL_HCD_HC_NotifyURBChange_Callback>
 80026b4:	e03a      	b.n	800272c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	333f      	adds	r3, #63	; 0x3f
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d12f      	bne.n	800272c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	335c      	adds	r3, #92	; 0x5c
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	3350      	adds	r3, #80	; 0x50
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	f083 0301 	eor.w	r3, r3, #1
 80026f6:	b2d8      	uxtb	r0, r3
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	3350      	adds	r3, #80	; 0x50
 8002708:	4602      	mov	r2, r0
 800270a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	b2d8      	uxtb	r0, r3
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	335c      	adds	r3, #92	; 0x5c
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	4601      	mov	r1, r0
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f005 fe7e 	bl	8008428 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	3350      	adds	r3, #80	; 0x50
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2d8      	uxtb	r0, r3
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	3350      	adds	r3, #80	; 0x50
 8002754:	4602      	mov	r2, r0
 8002756:	701a      	strb	r2, [r3, #0]
}
 8002758:	e1f7      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	f040 811a 	bne.w	80029a6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	0151      	lsls	r1, r2, #5
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	440a      	add	r2, r1
 8002788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800278c:	f023 0302 	bic.w	r3, r3, #2
 8002790:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	335d      	adds	r3, #93	; 0x5d
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10a      	bne.n	80027be <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	335c      	adds	r3, #92	; 0x5c
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e0d9      	b.n	8002972 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	335d      	adds	r3, #93	; 0x5d
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10a      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	335c      	adds	r3, #92	; 0x5c
 80027e4:	2205      	movs	r2, #5
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e0c3      	b.n	8002972 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	335d      	adds	r3, #93	; 0x5d
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d00a      	beq.n	8002816 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	335d      	adds	r3, #93	; 0x5d
 8002810:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002812:	2b08      	cmp	r3, #8
 8002814:	d156      	bne.n	80028c4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	3358      	adds	r3, #88	; 0x58
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	1c59      	adds	r1, r3, #1
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4403      	add	r3, r0
 8002838:	3358      	adds	r3, #88	; 0x58
 800283a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	3358      	adds	r3, #88	; 0x58
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d914      	bls.n	800287c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3358      	adds	r3, #88	; 0x58
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	2204      	movs	r2, #4
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e009      	b.n	8002890 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	335c      	adds	r3, #92	; 0x5c
 800288c:	2202      	movs	r2, #2
 800288e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e056      	b.n	8002972 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	335d      	adds	r3, #93	; 0x5d
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d123      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	335c      	adds	r3, #92	; 0x5c
 80028ea:	2202      	movs	r2, #2
 80028ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002904:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800290c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e027      	b.n	8002972 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	335d      	adds	r3, #93	; 0x5d
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b07      	cmp	r3, #7
 8002936:	d11c      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	3358      	adds	r3, #88	; 0x58
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1c59      	adds	r1, r3, #1
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4403      	add	r3, r0
 800295a:	3358      	adds	r3, #88	; 0x58
 800295c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	440b      	add	r3, r1
 800296c:	335c      	adds	r3, #92	; 0x5c
 800296e:	2204      	movs	r2, #4
 8002970:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	2302      	movs	r3, #2
 8002982:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	b2d8      	uxtb	r0, r3
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	335c      	adds	r3, #92	; 0x5c
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4601      	mov	r1, r0
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f005 fd42 	bl	8008428 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029a4:	e0d1      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d13e      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	0151      	lsls	r1, r2, #5
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	440a      	add	r2, r1
 80029d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	3358      	adds	r3, #88	; 0x58
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4403      	add	r3, r0
 80029fe:	3358      	adds	r3, #88	; 0x58
 8002a00:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	335d      	adds	r3, #93	; 0x5d
 8002a12:	2206      	movs	r2, #6
 8002a14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fb5e 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	6093      	str	r3, [r2, #8]
}
 8002a38:	e087      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d17c      	bne.n	8002b4a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	333f      	adds	r3, #63	; 0x3f
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d122      	bne.n	8002aac <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	3358      	adds	r3, #88	; 0x58
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	0151      	lsls	r1, r2, #5
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	440a      	add	r2, r1
 8002a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fb1c 	bl	80060e2 <USB_HC_Halt>
 8002aaa:	e045      	b.n	8002b38 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	333f      	adds	r3, #63	; 0x3f
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	333f      	adds	r3, #63	; 0x3f
 8002ad2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d12f      	bne.n	8002b38 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3358      	adds	r3, #88	; 0x58
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d121      	bne.n	8002b38 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	335d      	adds	r3, #93	; 0x5d
 8002b04:	2203      	movs	r2, #3
 8002b06:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	0151      	lsls	r1, r2, #5
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 fad5 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	2310      	movs	r3, #16
 8002b48:	6093      	str	r3, [r2, #8]
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d119      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2304      	movs	r3, #4
 8002b92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002bb4:	e33e      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d141      	bne.n	8002c50 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2320      	movs	r3, #32
 8002bdc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	333d      	adds	r3, #61	; 0x3d
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f040 831f 	bne.w	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	333d      	adds	r3, #61	; 0x3d
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	335c      	adds	r3, #92	; 0x5c
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	0151      	lsls	r1, r2, #5
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	440a      	add	r2, r1
 8002c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 fa4a 	bl	80060e2 <USB_HC_Halt>
}
 8002c4e:	e2f1      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d13f      	bne.n	8002ce6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	335d      	adds	r3, #93	; 0x5d
 8002c76:	2204      	movs	r2, #4
 8002c78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	333d      	adds	r3, #61	; 0x3d
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3358      	adds	r3, #88	; 0x58
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	0151      	lsls	r1, r2, #5
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	440a      	add	r2, r1
 8002cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fa08 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2340      	movs	r3, #64	; 0x40
 8002ce2:	6093      	str	r3, [r2, #8]
}
 8002ce4:	e2a6      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d122      	bne.n	8002d44 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	0151      	lsls	r1, r2, #5
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	440a      	add	r2, r1
 8002d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 f9da 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d40:	6093      	str	r3, [r2, #8]
}
 8002d42:	e277      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d135      	bne.n	8002dc6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	3358      	adds	r3, #88	; 0x58
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	0151      	lsls	r1, r2, #5
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	440a      	add	r2, r1
 8002d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 f9a2 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	2301      	movs	r3, #1
 8002dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	335d      	adds	r3, #93	; 0x5d
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
}
 8002dc4:	e236      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d12b      	bne.n	8002e34 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	461a      	mov	r2, r3
 8002dea:	2308      	movs	r3, #8
 8002dec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 f962 	bl	80060e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	335d      	adds	r3, #93	; 0x5d
 8002e2e:	2205      	movs	r2, #5
 8002e30:	701a      	strb	r2, [r3, #0]
}
 8002e32:	e1ff      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d155      	bne.n	8002ef6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	3358      	adds	r3, #88	; 0x58
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	335d      	adds	r3, #93	; 0x5d
 8002e6e:	2203      	movs	r2, #3
 8002e70:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	333d      	adds	r3, #61	; 0x3d
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d114      	bne.n	8002eb2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	333c      	adds	r3, #60	; 0x3c
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	333d      	adds	r3, #61	; 0x3d
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	0151      	lsls	r1, r2, #5
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 f900 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	6093      	str	r3, [r2, #8]
}
 8002ef4:	e19e      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d12b      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	0151      	lsls	r1, r2, #5
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	440a      	add	r2, r1
 8002f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f26:	f043 0302 	orr.w	r3, r3, #2
 8002f2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 f8d3 	bl	80060e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	335d      	adds	r3, #93	; 0x5d
 8002f4c:	2206      	movs	r2, #6
 8002f4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	6093      	str	r3, [r2, #8]
}
 8002f62:	e167      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7a:	d135      	bne.n	8002fe8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	0151      	lsls	r1, r2, #5
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	440a      	add	r2, r1
 8002f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 f89b 	bl	80060e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2310      	movs	r3, #16
 8002fbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	335d      	adds	r3, #93	; 0x5d
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	701a      	strb	r2, [r3, #0]
}
 8002fe6:	e125      	b.n	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	f040 811a 	bne.w	8003234 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	0151      	lsls	r1, r2, #5
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	440a      	add	r2, r1
 8003016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301a:	f023 0302 	bic.w	r3, r3, #2
 800301e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	440b      	add	r3, r1
 800302e:	335d      	adds	r3, #93	; 0x5d
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d137      	bne.n	80030a6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	440b      	add	r3, r1
 8003044:	335c      	adds	r3, #92	; 0x5c
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	333f      	adds	r3, #63	; 0x3f
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d00b      	beq.n	8003078 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	333f      	adds	r3, #63	; 0x3f
 8003070:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003072:	2b03      	cmp	r3, #3
 8003074:	f040 80c5 	bne.w	8003202 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	3351      	adds	r3, #81	; 0x51
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2d8      	uxtb	r0, r3
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3351      	adds	r3, #81	; 0x51
 80030a0:	4602      	mov	r2, r0
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e0ad      	b.n	8003202 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	335d      	adds	r3, #93	; 0x5d
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d10a      	bne.n	80030d2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	2202      	movs	r2, #2
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e097      	b.n	8003202 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	335d      	adds	r3, #93	; 0x5d
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d10a      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	335c      	adds	r3, #92	; 0x5c
 80030f8:	2202      	movs	r2, #2
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e081      	b.n	8003202 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	335d      	adds	r3, #93	; 0x5d
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d10a      	bne.n	800312a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	335c      	adds	r3, #92	; 0x5c
 8003124:	2205      	movs	r2, #5
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e06b      	b.n	8003202 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	335d      	adds	r3, #93	; 0x5d
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b06      	cmp	r3, #6
 800313e:	d00a      	beq.n	8003156 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	335d      	adds	r3, #93	; 0x5d
 8003150:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003152:	2b08      	cmp	r3, #8
 8003154:	d155      	bne.n	8003202 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	3358      	adds	r3, #88	; 0x58
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	1c59      	adds	r1, r3, #1
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4403      	add	r3, r0
 8003178:	3358      	adds	r3, #88	; 0x58
 800317a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	3358      	adds	r3, #88	; 0x58
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d914      	bls.n	80031bc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	3358      	adds	r3, #88	; 0x58
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	335c      	adds	r3, #92	; 0x5c
 80031b6:	2204      	movs	r2, #4
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e009      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	335c      	adds	r3, #92	; 0x5c
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	2302      	movs	r3, #2
 8003212:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	b2d8      	uxtb	r0, r3
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	440b      	add	r3, r1
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	4601      	mov	r1, r0
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f005 f8fa 	bl	8008428 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	0c5b      	lsrs	r3, r3, #17
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003270:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d003      	beq.n	8003280 <HCD_RXQLVL_IRQHandler+0x44>
 8003278:	2b05      	cmp	r3, #5
 800327a:	f000 8082 	beq.w	8003382 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800327e:	e083      	b.n	8003388 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d07f      	beq.n	8003386 <HCD_RXQLVL_IRQHandler+0x14a>
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3344      	adds	r3, #68	; 0x44
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d074      	beq.n	8003386 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	3344      	adds	r3, #68	; 0x44
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	b292      	uxth	r2, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	f002 fab1 	bl	800581e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	3344      	adds	r3, #68	; 0x44
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	18d1      	adds	r1, r2, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4403      	add	r3, r0
 80032e0:	3344      	adds	r3, #68	; 0x44
 80032e2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	334c      	adds	r3, #76	; 0x4c
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	18d1      	adds	r1, r2, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4403      	add	r3, r0
 8003308:	334c      	adds	r3, #76	; 0x4c
 800330a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HCD_RXQLVL_IRQHandler+0x154>)
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d031      	beq.n	8003386 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003338:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003340:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	3350      	adds	r3, #80	; 0x50
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	f083 0301 	eor.w	r3, r3, #1
 800336a:	b2d8      	uxtb	r0, r3
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	3350      	adds	r3, #80	; 0x50
 800337c:	4602      	mov	r2, r0
 800337e:	701a      	strb	r2, [r3, #0]
      break;
 8003380:	e001      	b.n	8003386 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003386:	bf00      	nop
  }
}
 8003388:	bf00      	nop
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	1ff80000 	.word	0x1ff80000

08003394 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d10b      	bne.n	80033e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f005 f80a 	bl	80083f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d132      	bne.n	8003454 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d126      	bne.n	800344e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d113      	bne.n	8003430 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800340e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003412:	d106      	bne.n	8003422 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f002 fb3a 	bl	8005a94 <USB_InitFSLSPClkSel>
 8003420:	e011      	b.n	8003446 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f002 fb33 	bl	8005a94 <USB_InitFSLSPClkSel>
 800342e:	e00a      	b.n	8003446 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800343e:	461a      	mov	r2, r3
 8003440:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003444:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f004 fffc 	bl	8008444 <HAL_HCD_PortEnabled_Callback>
 800344c:	e002      	b.n	8003454 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f005 f806 	bl	8008460 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b20      	cmp	r3, #32
 800345c:	d103      	bne.n	8003466 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f043 0320 	orr.w	r3, r3, #32
 8003464:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e11f      	b.n	80036ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fb76 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e0:	f001 f9de 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a7b      	ldr	r2, [pc, #492]	; (80036d8 <HAL_I2C_Init+0x25c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d807      	bhi.n	8003500 <HAL_I2C_Init+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7a      	ldr	r2, [pc, #488]	; (80036dc <HAL_I2C_Init+0x260>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e006      	b.n	800350e <HAL_I2C_Init+0x92>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a77      	ldr	r2, [pc, #476]	; (80036e0 <HAL_I2C_Init+0x264>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0db      	b.n	80036ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a72      	ldr	r2, [pc, #456]	; (80036e4 <HAL_I2C_Init+0x268>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a64      	ldr	r2, [pc, #400]	; (80036d8 <HAL_I2C_Init+0x25c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <HAL_I2C_Init+0xd4>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	e009      	b.n	8003564 <HAL_I2C_Init+0xe8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_I2C_Init+0x26c>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4956      	ldr	r1, [pc, #344]	; (80036d8 <HAL_I2C_Init+0x25c>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d80d      	bhi.n	80035a0 <HAL_I2C_Init+0x124>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e59      	subs	r1, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003598:	2b04      	cmp	r3, #4
 800359a:	bf38      	it	cc
 800359c:	2304      	movcc	r3, #4
 800359e:	e04f      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_I2C_Init+0x150>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e012      	b.n	80035f2 <HAL_I2C_Init+0x176>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x17e>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e022      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <HAL_I2C_Init+0x1a4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e58      	subs	r0, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	440b      	add	r3, r1
 8003610:	fbb0 f3f3 	udiv	r3, r0, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	e00f      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	6809      	ldr	r1, [r1, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800366e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6911      	ldr	r1, [r2, #16]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	000186a0 	.word	0x000186a0
 80036dc:	001e847f 	.word	0x001e847f
 80036e0:	003d08ff 	.word	0x003d08ff
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	10624dd3 	.word	0x10624dd3

080036ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e128      	b.n	8003950 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a90      	ldr	r2, [pc, #576]	; (8003958 <HAL_I2S_Init+0x26c>)
 8003716:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fd fa83 	bl	8000c24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003734:	f023 030f 	bic.w	r3, r3, #15
 8003738:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2202      	movs	r2, #2
 8003740:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d060      	beq.n	800380c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003752:	2310      	movs	r3, #16
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e001      	b.n	800375c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003758:	2320      	movs	r3, #32
 800375a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b20      	cmp	r3, #32
 8003762:	d802      	bhi.n	800376a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800376a:	2001      	movs	r0, #1
 800376c:	f001 f98e 	bl	8004a8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003770:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377a:	d125      	bne.n	80037c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	fbb2 f2f3 	udiv	r2, r2, r3
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	461a      	mov	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	3305      	adds	r3, #5
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	e01f      	b.n	80037e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	461a      	mov	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	3305      	adds	r3, #5
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	e00e      	b.n	80037e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	461a      	mov	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e2:	3305      	adds	r3, #5
 80037e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4a5c      	ldr	r2, [pc, #368]	; (800395c <HAL_I2S_Init+0x270>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	08db      	lsrs	r3, r3, #3
 80037f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e003      	b.n	8003814 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800380c:	2302      	movs	r3, #2
 800380e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d902      	bls.n	8003820 <HAL_I2S_Init+0x134>
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2bff      	cmp	r3, #255	; 0xff
 800381e:	d907      	bls.n	8003830 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f043 0210 	orr.w	r2, r3, #16
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e08f      	b.n	8003950 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	ea42 0103 	orr.w	r1, r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	430a      	orrs	r2, r1
 8003842:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800384e:	f023 030f 	bic.w	r3, r3, #15
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6851      	ldr	r1, [r2, #4]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6892      	ldr	r2, [r2, #8]
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68d2      	ldr	r2, [r2, #12]
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6992      	ldr	r2, [r2, #24]
 8003866:	430a      	orrs	r2, r1
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003872:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d161      	bne.n	8003940 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a38      	ldr	r2, [pc, #224]	; (8003960 <HAL_I2S_Init+0x274>)
 8003880:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a37      	ldr	r2, [pc, #220]	; (8003964 <HAL_I2S_Init+0x278>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_I2S_Init+0x1a4>
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <HAL_I2S_Init+0x27c>)
 800388e:	e001      	b.n	8003894 <HAL_I2S_Init+0x1a8>
 8003890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	4932      	ldr	r1, [pc, #200]	; (8003964 <HAL_I2S_Init+0x278>)
 800389c:	428a      	cmp	r2, r1
 800389e:	d101      	bne.n	80038a4 <HAL_I2S_Init+0x1b8>
 80038a0:	4a31      	ldr	r2, [pc, #196]	; (8003968 <HAL_I2S_Init+0x27c>)
 80038a2:	e001      	b.n	80038a8 <HAL_I2S_Init+0x1bc>
 80038a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038ac:	f023 030f 	bic.w	r3, r3, #15
 80038b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2b      	ldr	r2, [pc, #172]	; (8003964 <HAL_I2S_Init+0x278>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_I2S_Init+0x1d4>
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <HAL_I2S_Init+0x27c>)
 80038be:	e001      	b.n	80038c4 <HAL_I2S_Init+0x1d8>
 80038c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c4:	2202      	movs	r2, #2
 80038c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a25      	ldr	r2, [pc, #148]	; (8003964 <HAL_I2S_Init+0x278>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_I2S_Init+0x1ea>
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_I2S_Init+0x27c>)
 80038d4:	e001      	b.n	80038da <HAL_I2S_Init+0x1ee>
 80038d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e6:	d003      	beq.n	80038f0 <HAL_I2S_Init+0x204>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d103      	bne.n	80038f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e001      	b.n	80038fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	b299      	uxth	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003912:	4303      	orrs	r3, r0
 8003914:	b29b      	uxth	r3, r3
 8003916:	430b      	orrs	r3, r1
 8003918:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800391a:	4313      	orrs	r3, r2
 800391c:	b29a      	uxth	r2, r3
 800391e:	897b      	ldrh	r3, [r7, #10]
 8003920:	4313      	orrs	r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003928:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <HAL_I2S_Init+0x278>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_I2S_Init+0x24c>
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_I2S_Init+0x27c>)
 8003936:	e001      	b.n	800393c <HAL_I2S_Init+0x250>
 8003938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393c:	897a      	ldrh	r2, [r7, #10]
 800393e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	08003a63 	.word	0x08003a63
 800395c:	cccccccd 	.word	0xcccccccd
 8003960:	08003b79 	.word	0x08003b79
 8003964:	40003800 	.word	0x40003800
 8003968:	40003400 	.word	0x40003400

0800396c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10e      	bne.n	80039fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff ffb8 	bl	800396c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	b292      	uxth	r2, r2
 8003a18:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	1c9a      	adds	r2, r3, #2
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10e      	bne.n	8003a5a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff93 	bl	8003980 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d13a      	bne.n	8003af4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d109      	bne.n	8003a9c <I2S_IRQHandler+0x3a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d102      	bne.n	8003a9c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffb4 	bl	8003a04 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d126      	bne.n	8003af4 <I2S_IRQHandler+0x92>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d11f      	bne.n	8003af4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f043 0202 	orr.w	r2, r3, #2
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ff50 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d136      	bne.n	8003b6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d109      	bne.n	8003b1e <I2S_IRQHandler+0xbc>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d102      	bne.n	8003b1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff45 	bl	80039a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d122      	bne.n	8003b6e <I2S_IRQHandler+0x10c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d11b      	bne.n	8003b6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff13 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4aa2      	ldr	r2, [pc, #648]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b92:	4ba2      	ldr	r3, [pc, #648]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b94:	e001      	b.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a9b      	ldr	r2, [pc, #620]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bb0:	4b9a      	ldr	r3, [pc, #616]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc4:	d004      	beq.n	8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 8099 	bne.w	8003d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d107      	bne.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f925 	bl	8003e34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9c8 	bl	8003f94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d13a      	bne.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d035      	beq.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7e      	ldr	r2, [pc, #504]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c22:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c24:	e001      	b.n	8003c2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4979      	ldr	r1, [pc, #484]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c32:	428b      	cmp	r3, r1
 8003c34:	d101      	bne.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c36:	4b79      	ldr	r3, [pc, #484]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c38:	e001      	b.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fe88 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	f040 80be 	bne.w	8003e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80b8 	beq.w	8003e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003caa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a59      	ldr	r2, [pc, #356]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cb6:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cb8:	e001      	b.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4954      	ldr	r1, [pc, #336]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d101      	bne.n	8003cce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cca:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ccc:	e001      	b.n	8003cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff fe4a 	bl	8003994 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d00:	e084      	b.n	8003e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d107      	bne.n	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8be 	bl	8003e98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8fd 	bl	8003f30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d12f      	bne.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02a      	beq.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d58:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d66:	e001      	b.n	8003d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4929      	ldr	r1, [pc, #164]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d7a:	e001      	b.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fdfa 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d131      	bne.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d02c      	beq.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a17      	ldr	r2, [pc, #92]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dbe:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dc0:	e001      	b.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4912      	ldr	r1, [pc, #72]	; (8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dce:	428b      	cmp	r3, r1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dd4:	e001      	b.n	8003dda <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dde:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dee:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fdc5 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e0a:	e000      	b.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e0c:	bf00      	nop
}
 8003e0e:	bf00      	nop
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40003800 	.word	0x40003800
 8003e1c:	40003400 	.word	0x40003400

08003e20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	1c99      	adds	r1, r3, #2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6251      	str	r1, [r2, #36]	; 0x24
 8003e46:	881a      	ldrh	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d113      	bne.n	8003e8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ffc9 	bl	8003e20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c99      	adds	r1, r3, #2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6251      	str	r1, [r2, #36]	; 0x24
 8003eaa:	8819      	ldrh	r1, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <I2SEx_TxISR_I2SExt+0x90>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <I2SEx_TxISR_I2SExt+0x22>
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <I2SEx_TxISR_I2SExt+0x94>)
 8003eb8:	e001      	b.n	8003ebe <I2SEx_TxISR_I2SExt+0x26>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ebe:	460a      	mov	r2, r1
 8003ec0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d121      	bne.n	8003f1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <I2SEx_TxISR_I2SExt+0x90>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <I2SEx_TxISR_I2SExt+0x50>
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <I2SEx_TxISR_I2SExt+0x94>)
 8003ee6:	e001      	b.n	8003eec <I2SEx_TxISR_I2SExt+0x54>
 8003ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	490d      	ldr	r1, [pc, #52]	; (8003f28 <I2SEx_TxISR_I2SExt+0x90>)
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	d101      	bne.n	8003efc <I2SEx_TxISR_I2SExt+0x64>
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <I2SEx_TxISR_I2SExt+0x94>)
 8003efa:	e001      	b.n	8003f00 <I2SEx_TxISR_I2SExt+0x68>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff81 	bl	8003e20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40003800 	.word	0x40003800
 8003f2c:	40003400 	.word	0x40003400

08003f30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68d8      	ldr	r0, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	1c99      	adds	r1, r3, #2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f48:	b282      	uxth	r2, r0
 8003f4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d113      	bne.n	8003f8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ff4a 	bl	8003e20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <I2SEx_RxISR_I2SExt+0x90>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d101      	bne.n	8003faa <I2SEx_RxISR_I2SExt+0x16>
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <I2SEx_RxISR_I2SExt+0x94>)
 8003fa8:	e001      	b.n	8003fae <I2SEx_RxISR_I2SExt+0x1a>
 8003faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fae:	68d8      	ldr	r0, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	1c99      	adds	r1, r3, #2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fba:	b282      	uxth	r2, r0
 8003fbc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d121      	bne.n	800401a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <I2SEx_RxISR_I2SExt+0x90>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <I2SEx_RxISR_I2SExt+0x50>
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <I2SEx_RxISR_I2SExt+0x94>)
 8003fe2:	e001      	b.n	8003fe8 <I2SEx_RxISR_I2SExt+0x54>
 8003fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	490d      	ldr	r1, [pc, #52]	; (8004024 <I2SEx_RxISR_I2SExt+0x90>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d101      	bne.n	8003ff8 <I2SEx_RxISR_I2SExt+0x64>
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <I2SEx_RxISR_I2SExt+0x94>)
 8003ff6:	e001      	b.n	8003ffc <I2SEx_RxISR_I2SExt+0x68>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004000:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff ff03 	bl	8003e20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40003800 	.word	0x40003800
 8004028:	40003400 	.word	0x40003400

0800402c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e25b      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d075      	beq.n	8004136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800404a:	4ba3      	ldr	r3, [pc, #652]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00c      	beq.n	8004070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4ba0      	ldr	r3, [pc, #640]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800405e:	2b08      	cmp	r3, #8
 8004060:	d112      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b9d      	ldr	r3, [pc, #628]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406e:	d10b      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	4b99      	ldr	r3, [pc, #612]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d05b      	beq.n	8004134 <HAL_RCC_OscConfig+0x108>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d157      	bne.n	8004134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e236      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x74>
 8004092:	4b91      	ldr	r3, [pc, #580]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a90      	ldr	r2, [pc, #576]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x98>
 80040aa:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a8a      	ldr	r2, [pc, #552]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a87      	ldr	r2, [pc, #540]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040c4:	4b84      	ldr	r3, [pc, #528]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a83      	ldr	r2, [pc, #524]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b81      	ldr	r3, [pc, #516]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a80      	ldr	r2, [pc, #512]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fc ff84 	bl	8000ff0 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fc ff80 	bl	8000ff0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e1fb      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xc0>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fc ff70 	bl	8000ff0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004114:	f7fc ff6c 	bl	8000ff0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e1e7      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0xe8>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d063      	beq.n	800420a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004156:	2b08      	cmp	r3, #8
 8004158:	d11c      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b5f      	ldr	r3, [pc, #380]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d116      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	4b5c      	ldr	r3, [pc, #368]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1bb      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417e:	4b56      	ldr	r3, [pc, #344]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4952      	ldr	r1, [pc, #328]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	e03a      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d020      	beq.n	80041de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419c:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HAL_RCC_OscConfig+0x2b0>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fc ff25 	bl	8000ff0 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fc ff21 	bl	8000ff0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e19c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4940      	ldr	r1, [pc, #256]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041de:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <HAL_RCC_OscConfig+0x2b0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fc ff04 	bl	8000ff0 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fc ff00 	bl	8000ff0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e17b      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d030      	beq.n	8004278 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <HAL_RCC_OscConfig+0x2b4>)
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fc fee4 	bl	8000ff0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422c:	f7fc fee0 	bl	8000ff0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e15b      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x200>
 800424a:	e015      	b.n	8004278 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424c:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCC_OscConfig+0x2b4>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fc fecd 	bl	8000ff0 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425a:	f7fc fec9 	bl	8000ff0 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e144      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80a0 	beq.w	80043c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004286:	2300      	movs	r3, #0
 8004288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a0e      	ldr	r2, [pc, #56]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_OscConfig+0x2b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d121      	bne.n	8004306 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_RCC_OscConfig+0x2b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <HAL_RCC_OscConfig+0x2b8>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ce:	f7fc fe8f 	bl	8000ff0 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d4:	e011      	b.n	80042fa <HAL_RCC_OscConfig+0x2ce>
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	42470000 	.word	0x42470000
 80042e0:	42470e80 	.word	0x42470e80
 80042e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fc fe82 	bl	8000ff0 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0fd      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	4b81      	ldr	r3, [pc, #516]	; (8004500 <HAL_RCC_OscConfig+0x4d4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x2f0>
 800430e:	4b7d      	ldr	r3, [pc, #500]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a7c      	ldr	r2, [pc, #496]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	e01c      	b.n	8004356 <HAL_RCC_OscConfig+0x32a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b05      	cmp	r3, #5
 8004322:	d10c      	bne.n	800433e <HAL_RCC_OscConfig+0x312>
 8004324:	4b77      	ldr	r3, [pc, #476]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a76      	ldr	r2, [pc, #472]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 800432a:	f043 0304 	orr.w	r3, r3, #4
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	4b74      	ldr	r3, [pc, #464]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	4a73      	ldr	r2, [pc, #460]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6713      	str	r3, [r2, #112]	; 0x70
 800433c:	e00b      	b.n	8004356 <HAL_RCC_OscConfig+0x32a>
 800433e:	4b71      	ldr	r3, [pc, #452]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a70      	ldr	r2, [pc, #448]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
 800434a:	4b6e      	ldr	r3, [pc, #440]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a6d      	ldr	r2, [pc, #436]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004350:	f023 0304 	bic.w	r3, r3, #4
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d015      	beq.n	800438a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fc fe47 	bl	8000ff0 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fc fe43 	bl	8000ff0 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e0bc      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	4b61      	ldr	r3, [pc, #388]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RCC_OscConfig+0x33a>
 8004388:	e014      	b.n	80043b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438a:	f7fc fe31 	bl	8000ff0 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fc fe2d 	bl	8000ff0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e0a6      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a8:	4b56      	ldr	r3, [pc, #344]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ee      	bne.n	8004392 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d105      	bne.n	80043c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ba:	4b52      	ldr	r3, [pc, #328]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	4a51      	ldr	r2, [pc, #324]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8092 	beq.w	80044f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d0:	4b4c      	ldr	r3, [pc, #304]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d05c      	beq.n	8004496 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d141      	bne.n	8004468 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b48      	ldr	r3, [pc, #288]	; (8004508 <HAL_RCC_OscConfig+0x4dc>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fc fe01 	bl	8000ff0 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fc fdfd 	bl	8000ff0 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e078      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004404:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	019b      	lsls	r3, r3, #6
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	4933      	ldr	r1, [pc, #204]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443a:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_RCC_OscConfig+0x4dc>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fc fdd6 	bl	8000ff0 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004448:	f7fc fdd2 	bl	8000ff0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e04d      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x41c>
 8004466:	e045      	b.n	80044f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b27      	ldr	r3, [pc, #156]	; (8004508 <HAL_RCC_OscConfig+0x4dc>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fc fdbf 	bl	8000ff0 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004476:	f7fc fdbb 	bl	8000ff0 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e036      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x44a>
 8004494:	e02e      	b.n	80044f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e029      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a2:	4b18      	ldr	r3, [pc, #96]	; (8004504 <HAL_RCC_OscConfig+0x4d8>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d11c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d115      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ca:	4013      	ands	r3, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10d      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044de:	429a      	cmp	r2, r3
 80044e0:	d106      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40007000 	.word	0x40007000
 8004504:	40023800 	.word	0x40023800
 8004508:	42470060 	.word	0x42470060

0800450c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0cc      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b68      	ldr	r3, [pc, #416]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d90c      	bls.n	8004548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b65      	ldr	r3, [pc, #404]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	4b63      	ldr	r3, [pc, #396]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0b8      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800456a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004584:	4b50      	ldr	r3, [pc, #320]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	494d      	ldr	r1, [pc, #308]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d044      	beq.n	800462c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d119      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e06f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e067      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ea:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 0203 	bic.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4934      	ldr	r1, [pc, #208]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045fc:	f7fc fcf8 	bl	8000ff0 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	e00a      	b.n	800461a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004604:	f7fc fcf4 	bl	8000ff0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e04f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 020c 	and.w	r2, r3, #12
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	429a      	cmp	r2, r3
 800462a:	d1eb      	bne.n	8004604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d20c      	bcs.n	8004654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e032      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4916      	ldr	r1, [pc, #88]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	490e      	ldr	r1, [pc, #56]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004692:	f000 f821 	bl	80046d8 <HAL_RCC_GetSysClockFreq>
 8004696:	4601      	mov	r1, r0
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <HAL_RCC_ClockConfig+0x1c0>)
 80046a4:	5cd3      	ldrb	r3, [r2, r3]
 80046a6:	fa21 f303 	lsr.w	r3, r1, r3
 80046aa:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fc fc58 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00
 80046c8:	40023800 	.word	0x40023800
 80046cc:	08008a78 	.word	0x08008a78
 80046d0:	20000000 	.word	0x20000000
 80046d4:	20000004 	.word	0x20000004

080046d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	607b      	str	r3, [r7, #4]
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	2300      	movs	r3, #0
 80046e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ee:	4b63      	ldr	r3, [pc, #396]	; (800487c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d007      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x32>
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d008      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x38>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 80b4 	bne.w	800486c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b5e      	ldr	r3, [pc, #376]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004706:	60bb      	str	r3, [r7, #8]
       break;
 8004708:	e0b3      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470a:	4b5e      	ldr	r3, [pc, #376]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800470c:	60bb      	str	r3, [r7, #8]
      break;
 800470e:	e0b0      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004710:	4b5a      	ldr	r3, [pc, #360]	; (800487c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004718:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471a:	4b58      	ldr	r3, [pc, #352]	; (800487c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04a      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b55      	ldr	r3, [pc, #340]	; (800487c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	f04f 0400 	mov.w	r4, #0
 8004730:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	ea03 0501 	and.w	r5, r3, r1
 800473c:	ea04 0602 	and.w	r6, r4, r2
 8004740:	4629      	mov	r1, r5
 8004742:	4632      	mov	r2, r6
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	0154      	lsls	r4, r2, #5
 800474e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004752:	014b      	lsls	r3, r1, #5
 8004754:	4619      	mov	r1, r3
 8004756:	4622      	mov	r2, r4
 8004758:	1b49      	subs	r1, r1, r5
 800475a:	eb62 0206 	sbc.w	r2, r2, r6
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	f04f 0400 	mov.w	r4, #0
 8004766:	0194      	lsls	r4, r2, #6
 8004768:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800476c:	018b      	lsls	r3, r1, #6
 800476e:	1a5b      	subs	r3, r3, r1
 8004770:	eb64 0402 	sbc.w	r4, r4, r2
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	00e2      	lsls	r2, r4, #3
 800477e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004782:	00d9      	lsls	r1, r3, #3
 8004784:	460b      	mov	r3, r1
 8004786:	4614      	mov	r4, r2
 8004788:	195b      	adds	r3, r3, r5
 800478a:	eb44 0406 	adc.w	r4, r4, r6
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	0262      	lsls	r2, r4, #9
 8004798:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800479c:	0259      	lsls	r1, r3, #9
 800479e:	460b      	mov	r3, r1
 80047a0:	4614      	mov	r4, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	4621      	mov	r1, r4
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f04f 0400 	mov.w	r4, #0
 80047ac:	461a      	mov	r2, r3
 80047ae:	4623      	mov	r3, r4
 80047b0:	f7fb fd0a 	bl	80001c8 <__aeabi_uldivmod>
 80047b4:	4603      	mov	r3, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e049      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047bc:	4b2f      	ldr	r3, [pc, #188]	; (800487c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	f04f 0400 	mov.w	r4, #0
 80047c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	ea03 0501 	and.w	r5, r3, r1
 80047d2:	ea04 0602 	and.w	r6, r4, r2
 80047d6:	4629      	mov	r1, r5
 80047d8:	4632      	mov	r2, r6
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	f04f 0400 	mov.w	r4, #0
 80047e2:	0154      	lsls	r4, r2, #5
 80047e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047e8:	014b      	lsls	r3, r1, #5
 80047ea:	4619      	mov	r1, r3
 80047ec:	4622      	mov	r2, r4
 80047ee:	1b49      	subs	r1, r1, r5
 80047f0:	eb62 0206 	sbc.w	r2, r2, r6
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	f04f 0400 	mov.w	r4, #0
 80047fc:	0194      	lsls	r4, r2, #6
 80047fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004802:	018b      	lsls	r3, r1, #6
 8004804:	1a5b      	subs	r3, r3, r1
 8004806:	eb64 0402 	sbc.w	r4, r4, r2
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	00e2      	lsls	r2, r4, #3
 8004814:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004818:	00d9      	lsls	r1, r3, #3
 800481a:	460b      	mov	r3, r1
 800481c:	4614      	mov	r4, r2
 800481e:	195b      	adds	r3, r3, r5
 8004820:	eb44 0406 	adc.w	r4, r4, r6
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	02a2      	lsls	r2, r4, #10
 800482e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004832:	0299      	lsls	r1, r3, #10
 8004834:	460b      	mov	r3, r1
 8004836:	4614      	mov	r4, r2
 8004838:	4618      	mov	r0, r3
 800483a:	4621      	mov	r1, r4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f04f 0400 	mov.w	r4, #0
 8004842:	461a      	mov	r2, r3
 8004844:	4623      	mov	r3, r4
 8004846:	f7fb fcbf 	bl	80001c8 <__aeabi_uldivmod>
 800484a:	4603      	mov	r3, r0
 800484c:	460c      	mov	r4, r1
 800484e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	3301      	adds	r3, #1
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	60bb      	str	r3, [r7, #8]
      break;
 800486a:	e002      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800486e:	60bb      	str	r3, [r7, #8]
      break;
 8004870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004872:	68bb      	ldr	r3, [r7, #8]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800487c:	40023800 	.word	0x40023800
 8004880:	00f42400 	.word	0x00f42400
 8004884:	007a1200 	.word	0x007a1200

08004888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <HAL_RCC_GetHCLKFreq+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000000 	.word	0x20000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff0 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048a8:	4601      	mov	r1, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a9b      	lsrs	r3, r3, #10
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4a03      	ldr	r2, [pc, #12]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40023800 	.word	0x40023800
 80048c4:	08008a88 	.word	0x08008a88

080048c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d035      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048f0:	4b62      	ldr	r3, [pc, #392]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048f6:	f7fc fb7b 	bl	8000ff0 <HAL_GetTick>
 80048fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048fe:	f7fc fb77 	bl	8000ff0 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0b0      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004910:	4b5b      	ldr	r3, [pc, #364]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f0      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	019a      	lsls	r2, r3, #6
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	071b      	lsls	r3, r3, #28
 8004928:	4955      	ldr	r1, [pc, #340]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004930:	4b52      	ldr	r3, [pc, #328]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004936:	f7fc fb5b 	bl	8000ff0 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800493e:	f7fc fb57 	bl	8000ff0 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e090      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004950:	4b4b      	ldr	r3, [pc, #300]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8083 	beq.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b44      	ldr	r3, [pc, #272]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a43      	ldr	r2, [pc, #268]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004986:	4b3f      	ldr	r3, [pc, #252]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a3e      	ldr	r2, [pc, #248]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800498c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004990:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004992:	f7fc fb2d 	bl	8000ff0 <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800499a:	f7fc fb29 	bl	8000ff0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e062      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049ac:	4b35      	ldr	r3, [pc, #212]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049b8:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d028      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049d6:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049e0:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049e6:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049ec:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049f2:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d114      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fc faf7 	bl	8000ff0 <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fc faf3 	bl	8000ff0 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e02a      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ee      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a34:	d10d      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4a:	490d      	ldr	r1, [pc, #52]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	608b      	str	r3, [r1, #8]
 8004a50:	e005      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a58:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a5c:	6093      	str	r3, [r2, #8]
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6a:	4905      	ldr	r1, [pc, #20]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	42470068 	.word	0x42470068
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000
 8004a88:	42470e40 	.word	0x42470e40

08004a8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d13d      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004aaa:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d12f      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ac0:	617b      	str	r3, [r7, #20]
          break;
 8004ac2:	e02f      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad0:	d108      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ad2:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ada:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e007      	b.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aec:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0e:	0f1b      	lsrs	r3, r3, #28
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	617b      	str	r3, [r7, #20]
          break;
 8004b1c:	e002      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
          break;
 8004b22:	bf00      	nop
        }
      }
      break;
 8004b24:	bf00      	nop
    }
  }
  return frequency;
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40023800 	.word	0x40023800
 8004b38:	00bb8000 	.word	0x00bb8000
 8004b3c:	007a1200 	.word	0x007a1200
 8004b40:	00f42400 	.word	0x00f42400

08004b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e056      	b.n	8004c04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc f8bf 	bl	8000cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	ea42 0103 	orr.w	r1, r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	f003 0104 	and.w	r1, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e01d      	b.n	8004c5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc f8a6 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 f956 	bl	8004efc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e01d      	b.n	8004cb0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f815 	bl	8004cb8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 f92b 	bl	8004efc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e04e      	b.n	8004d84 <HAL_TIM_OC_ConfigChannel+0xb8>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b0c      	cmp	r3, #12
 8004cfa:	d839      	bhi.n	8004d70 <HAL_TIM_OC_ConfigChannel+0xa4>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <HAL_TIM_OC_ConfigChannel+0x38>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d39 	.word	0x08004d39
 8004d08:	08004d71 	.word	0x08004d71
 8004d0c:	08004d71 	.word	0x08004d71
 8004d10:	08004d71 	.word	0x08004d71
 8004d14:	08004d47 	.word	0x08004d47
 8004d18:	08004d71 	.word	0x08004d71
 8004d1c:	08004d71 	.word	0x08004d71
 8004d20:	08004d71 	.word	0x08004d71
 8004d24:	08004d55 	.word	0x08004d55
 8004d28:	08004d71 	.word	0x08004d71
 8004d2c:	08004d71 	.word	0x08004d71
 8004d30:	08004d71 	.word	0x08004d71
 8004d34:	08004d63 	.word	0x08004d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f97c 	bl	800503c <TIM_OC1_SetConfig>
      break;
 8004d44:	e015      	b.n	8004d72 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f9e5 	bl	800511c <TIM_OC2_SetConfig>
      break;
 8004d52:	e00e      	b.n	8004d72 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fa54 	bl	8005208 <TIM_OC3_SetConfig>
      break;
 8004d60:	e007      	b.n	8004d72 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fac1 	bl	80052f0 <TIM_OC4_SetConfig>
      break;
 8004d6e:	e000      	b.n	8004d72 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8004d70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_ConfigClockSource+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0a6      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x166>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d067      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0x120>
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	d80b      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x6c>
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d073      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x140>
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d802      	bhi.n	8004dee <HAL_TIM_ConfigClockSource+0x62>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d06f      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004dec:	e078      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d06c      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x140>
 8004df2:	2b30      	cmp	r3, #48	; 0x30
 8004df4:	d06a      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004df6:	e073      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d00d      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0x8c>
 8004dfc:	2b70      	cmp	r3, #112	; 0x70
 8004dfe:	d804      	bhi.n	8004e0a <HAL_TIM_ConfigClockSource+0x7e>
 8004e00:	2b50      	cmp	r3, #80	; 0x50
 8004e02:	d033      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xe0>
 8004e04:	2b60      	cmp	r3, #96	; 0x60
 8004e06:	d041      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e08:	e06a      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d066      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x152>
 8004e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e14:	d017      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e16:	e063      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f000 fb32 	bl	8005490 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e3a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	609a      	str	r2, [r3, #8]
      break;
 8004e44:	e04c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6899      	ldr	r1, [r3, #8]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f000 fb1b 	bl	8005490 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e68:	609a      	str	r2, [r3, #8]
      break;
 8004e6a:	e039      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6859      	ldr	r1, [r3, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f000 fa8f 	bl	800539c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2150      	movs	r1, #80	; 0x50
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fae8 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 8004e8a:	e029      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6859      	ldr	r1, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f000 faae 	bl	80053fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2160      	movs	r1, #96	; 0x60
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fad8 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 8004eaa:	e019      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f000 fa6f 	bl	800539c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2140      	movs	r1, #64	; 0x40
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fac8 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 8004eca:	e009      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f000 fabf 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 8004edc:	e000      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a40      	ldr	r2, [pc, #256]	; (8005010 <TIM_Base_SetConfig+0x114>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1a:	d00f      	beq.n	8004f3c <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a3d      	ldr	r2, [pc, #244]	; (8005014 <TIM_Base_SetConfig+0x118>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a3c      	ldr	r2, [pc, #240]	; (8005018 <TIM_Base_SetConfig+0x11c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d007      	beq.n	8004f3c <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3b      	ldr	r2, [pc, #236]	; (800501c <TIM_Base_SetConfig+0x120>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_Base_SetConfig+0x40>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a3a      	ldr	r2, [pc, #232]	; (8005020 <TIM_Base_SetConfig+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d108      	bne.n	8004f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <TIM_Base_SetConfig+0x114>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d02b      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d027      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <TIM_Base_SetConfig+0x118>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d023      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2b      	ldr	r2, [pc, #172]	; (8005018 <TIM_Base_SetConfig+0x11c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01f      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2a      	ldr	r2, [pc, #168]	; (800501c <TIM_Base_SetConfig+0x120>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01b      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a29      	ldr	r2, [pc, #164]	; (8005020 <TIM_Base_SetConfig+0x124>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d017      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a28      	ldr	r2, [pc, #160]	; (8005024 <TIM_Base_SetConfig+0x128>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a27      	ldr	r2, [pc, #156]	; (8005028 <TIM_Base_SetConfig+0x12c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00f      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a26      	ldr	r2, [pc, #152]	; (800502c <TIM_Base_SetConfig+0x130>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <TIM_Base_SetConfig+0x134>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a24      	ldr	r2, [pc, #144]	; (8005034 <TIM_Base_SetConfig+0x138>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a23      	ldr	r2, [pc, #140]	; (8005038 <TIM_Base_SetConfig+0x13c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <TIM_Base_SetConfig+0x114>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_Base_SetConfig+0xf8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0c      	ldr	r2, [pc, #48]	; (8005020 <TIM_Base_SetConfig+0x124>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d103      	bne.n	8004ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	615a      	str	r2, [r3, #20]
}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40010000 	.word	0x40010000
 8005014:	40000400 	.word	0x40000400
 8005018:	40000800 	.word	0x40000800
 800501c:	40000c00 	.word	0x40000c00
 8005020:	40010400 	.word	0x40010400
 8005024:	40014000 	.word	0x40014000
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800
 8005030:	40001800 	.word	0x40001800
 8005034:	40001c00 	.word	0x40001c00
 8005038:	40002000 	.word	0x40002000

0800503c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0302 	bic.w	r3, r3, #2
 8005084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a20      	ldr	r2, [pc, #128]	; (8005114 <TIM_OC1_SetConfig+0xd8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC1_SetConfig+0x64>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <TIM_OC1_SetConfig+0xdc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10c      	bne.n	80050ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0308 	bic.w	r3, r3, #8
 80050a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a15      	ldr	r2, [pc, #84]	; (8005114 <TIM_OC1_SetConfig+0xd8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_OC1_SetConfig+0x8e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <TIM_OC1_SetConfig+0xdc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d111      	bne.n	80050ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40010000 	.word	0x40010000
 8005118:	40010400 	.word	0x40010400

0800511c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0210 	bic.w	r2, r3, #16
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0320 	bic.w	r3, r3, #32
 8005166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <TIM_OC2_SetConfig+0xe4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC2_SetConfig+0x68>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a21      	ldr	r2, [pc, #132]	; (8005204 <TIM_OC2_SetConfig+0xe8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10d      	bne.n	80051a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800518a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a17      	ldr	r2, [pc, #92]	; (8005200 <TIM_OC2_SetConfig+0xe4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_OC2_SetConfig+0x94>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a16      	ldr	r2, [pc, #88]	; (8005204 <TIM_OC2_SetConfig+0xe8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d113      	bne.n	80051d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40010400 	.word	0x40010400

08005208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <TIM_OC3_SetConfig+0xe0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_OC3_SetConfig+0x66>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a20      	ldr	r2, [pc, #128]	; (80052ec <TIM_OC3_SetConfig+0xe4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d10d      	bne.n	800528a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a16      	ldr	r2, [pc, #88]	; (80052e8 <TIM_OC3_SetConfig+0xe0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_OC3_SetConfig+0x92>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a15      	ldr	r2, [pc, #84]	; (80052ec <TIM_OC3_SetConfig+0xe4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d113      	bne.n	80052c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40010400 	.word	0x40010400

080052f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800533a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	031b      	lsls	r3, r3, #12
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a12      	ldr	r2, [pc, #72]	; (8005394 <TIM_OC4_SetConfig+0xa4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_OC4_SetConfig+0x68>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a11      	ldr	r2, [pc, #68]	; (8005398 <TIM_OC4_SetConfig+0xa8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d109      	bne.n	800536c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	019b      	lsls	r3, r3, #6
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40010400 	.word	0x40010400

0800539c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0201 	bic.w	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 030a 	bic.w	r3, r3, #10
 80053d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b087      	sub	sp, #28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0210 	bic.w	r2, r3, #16
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	031b      	lsls	r3, r3, #12
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	f043 0307 	orr.w	r3, r3, #7
 800547c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e05a      	b.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a21      	ldr	r2, [pc, #132]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d022      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005534:	d01d      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d018      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d013      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1a      	ldr	r2, [pc, #104]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00e      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d009      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10c      	bne.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4313      	orrs	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40001800 	.word	0x40001800

080055c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055c8:	b084      	sub	sp, #16
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	f107 001c 	add.w	r0, r7, #28
 80055d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d122      	bne.n	8005626 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d105      	bne.n	800561a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f94a 	bl	80058b4 <USB_CoreReset>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]
 8005624:	e01a      	b.n	800565c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f93e 	bl	80058b4 <USB_CoreReset>
 8005638:	4603      	mov	r3, r0
 800563a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800563c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
 800564e:	e005      	b.n	800565c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	2b01      	cmp	r3, #1
 8005660:	d10b      	bne.n	800567a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f043 0206 	orr.w	r2, r3, #6
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005686:	b004      	add	sp, #16
 8005688:	4770      	bx	lr

0800568a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f043 0201 	orr.w	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 0201 	bic.w	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d106      	bne.n	80056fa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	e00b      	b.n	8005712 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	e001      	b.n	8005712 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e003      	b.n	800571a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005712:	2032      	movs	r0, #50	; 0x32
 8005714:	f7fb fc78 	bl	8001008 <HAL_Delay>

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	019b      	lsls	r3, r3, #6
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4a09      	ldr	r2, [pc, #36]	; (800576c <USB_FlushTxFifo+0x48>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d901      	bls.n	8005750 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e006      	b.n	800575e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b20      	cmp	r3, #32
 800575a:	d0f0      	beq.n	800573e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	00030d40 	.word	0x00030d40

08005770 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2210      	movs	r2, #16
 8005780:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <USB_FlushRxFifo+0x40>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e006      	b.n	80057a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b10      	cmp	r3, #16
 800579e:	d0f0      	beq.n	8005782 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	00030d40 	.word	0x00030d40

080057b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	; 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4611      	mov	r1, r2
 80057c0:	461a      	mov	r2, r3
 80057c2:	460b      	mov	r3, r1
 80057c4:	71fb      	strb	r3, [r7, #7]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80057d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d11a      	bne.n	8005810 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057da:	88bb      	ldrh	r3, [r7, #4]
 80057dc:	3303      	adds	r3, #3
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	e00f      	b.n	8005808 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	031a      	lsls	r2, r3, #12
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f4:	461a      	mov	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3304      	adds	r3, #4
 8005800:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	3301      	adds	r3, #1
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	429a      	cmp	r2, r3
 800580e:	d3eb      	bcc.n	80057e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3724      	adds	r7, #36	; 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800581e:	b480      	push	{r7}
 8005820:	b089      	sub	sp, #36	; 0x24
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	4613      	mov	r3, r2
 800582a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	3303      	adds	r3, #3
 8005838:	089b      	lsrs	r3, r3, #2
 800583a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
 8005840:	e00b      	b.n	800585a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	601a      	str	r2, [r3, #0]
    pDest++;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	3304      	adds	r3, #4
 8005852:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	3301      	adds	r3, #1
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d3ef      	bcc.n	8005842 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005862:	69fb      	ldr	r3, [r7, #28]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3724      	adds	r7, #36	; 0x24
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4013      	ands	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005888:	68fb      	ldr	r3, [r7, #12]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0301 	and.w	r3, r3, #1
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a13      	ldr	r2, [pc, #76]	; (8005918 <USB_CoreReset+0x64>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e01b      	b.n	800590a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	daf2      	bge.n	80058c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f043 0201 	orr.w	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <USB_CoreReset+0x64>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e006      	b.n	800590a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d0f0      	beq.n	80058ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	00030d40 	.word	0x00030d40

0800591c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800591c:	b084      	sub	sp, #16
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	f107 001c 	add.w	r0, r7, #28
 800592a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005938:	461a      	mov	r2, r3
 800593a:	2300      	movs	r3, #0
 800593c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d018      	beq.n	80059a0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	2b01      	cmp	r3, #1
 8005972:	d10a      	bne.n	800598a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005982:	f043 0304 	orr.w	r3, r3, #4
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e014      	b.n	80059b4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005998:	f023 0304 	bic.w	r3, r3, #4
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e009      	b.n	80059b4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ae:	f023 0304 	bic.w	r3, r3, #4
 80059b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80059b4:	2110      	movs	r1, #16
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff feb4 	bl	8005724 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff fed7 	bl	8005770 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e015      	b.n	80059f4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d4:	461a      	mov	r2, r3
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	461a      	mov	r2, r3
 80059ea:	2300      	movs	r3, #0
 80059ec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d3e5      	bcc.n	80059c8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80059fc:	2101      	movs	r1, #1
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8ac 	bl	8005b5c <USB_DriveVbus>

  HAL_Delay(200U);
 8005a04:	20c8      	movs	r0, #200	; 0xc8
 8005a06:	f7fb faff 	bl	8001008 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f04f 32ff 	mov.w	r2, #4294967295
 8005a16:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <USB_HostInit+0x164>)
 8005a30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <USB_HostInit+0x168>)
 8005a36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a3a:	e009      	b.n	8005a50 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2280      	movs	r2, #128	; 0x80
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a10      	ldr	r2, [pc, #64]	; (8005a88 <USB_HostInit+0x16c>)
 8005a46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a10      	ldr	r2, [pc, #64]	; (8005a8c <USB_HostInit+0x170>)
 8005a4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d105      	bne.n	8005a62 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f043 0210 	orr.w	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <USB_HostInit+0x174>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a7a:	b004      	add	sp, #16
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	01000200 	.word	0x01000200
 8005a84:	00e00300 	.word	0x00e00300
 8005a88:	00600080 	.word	0x00600080
 8005a8c:	004000e0 	.word	0x004000e0
 8005a90:	a3200008 	.word	0xa3200008

08005a94 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d107      	bne.n	8005ae6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005adc:	461a      	mov	r2, r3
 8005ade:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005ae2:	6053      	str	r3, [r2, #4]
 8005ae4:	e009      	b.n	8005afa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d106      	bne.n	8005afa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af2:	461a      	mov	r2, r3
 8005af4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005af8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b36:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b38:	2064      	movs	r0, #100	; 0x64
 8005b3a:	f7fb fa65 	bl	8001008 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b4c:	200a      	movs	r0, #10
 8005b4e:	f7fb fa5b 	bl	8001008 <HAL_Delay>

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <USB_DriveVbus+0x44>
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d106      	bne.n	8005ba0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b9e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	d109      	bne.n	8005bc0 <USB_DriveVbus+0x64>
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bbe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0c5b      	lsrs	r3, r3, #17
 8005bec:	f003 0303 	and.w	r3, r3, #3
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	b29b      	uxth	r3, r3
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	4608      	mov	r0, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	70fb      	strb	r3, [r7, #3]
 8005c32:	460b      	mov	r3, r1
 8005c34:	70bb      	strb	r3, [r7, #2]
 8005c36:	4613      	mov	r3, r2
 8005c38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295
 8005c54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d87e      	bhi.n	8005d5c <USB_HC_Init+0x13c>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <USB_HC_Init+0x44>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005d1f 	.word	0x08005d1f
 8005c6c:	08005c75 	.word	0x08005c75
 8005c70:	08005ce1 	.word	0x08005ce1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	461a      	mov	r2, r3
 8005c82:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	da10      	bge.n	8005cb2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cae:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005cb0:	e057      	b.n	8005d62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d051      	beq.n	8005d62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cdc:	60d3      	str	r3, [r2, #12]
      break;
 8005cde:	e040      	b.n	8005d62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cec:	461a      	mov	r2, r3
 8005cee:	f240 639d 	movw	r3, #1693	; 0x69d
 8005cf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da34      	bge.n	8005d66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d1c:	e023      	b.n	8005d66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f240 2325 	movw	r3, #549	; 0x225
 8005d30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da17      	bge.n	8005d6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d58:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d5a:	e006      	b.n	8005d6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d60:	e004      	b.n	8005d6c <USB_HC_Init+0x14c>
      break;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <USB_HC_Init+0x14c>
      break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <USB_HC_Init+0x14c>
      break;
 8005d6a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d86:	4313      	orrs	r3, r2
 8005d88:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da03      	bge.n	8005da6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	e001      	b.n	8005daa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d103      	bne.n	8005dba <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e001      	b.n	8005dbe <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dbe:	787b      	ldrb	r3, [r7, #1]
 8005dc0:	059b      	lsls	r3, r3, #22
 8005dc2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dc6:	78bb      	ldrb	r3, [r7, #2]
 8005dc8:	02db      	lsls	r3, r3, #11
 8005dca:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dce:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005dd4:	049b      	lsls	r3, r3, #18
 8005dd6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dda:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ddc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005de2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	0159      	lsls	r1, r3, #5
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	440b      	add	r3, r1
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dfa:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005dfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d10f      	bne.n	8005e24 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e22:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop

08005e34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08c      	sub	sp, #48	; 0x30
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e50:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d028      	beq.n	8005eb0 <USB_HC_StartXfer+0x7c>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	791b      	ldrb	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d124      	bne.n	8005eb0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <USB_HC_StartXfer+0x50>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	795b      	ldrb	r3, [r3, #5]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d107      	bne.n	8005e84 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fa30 	bl	80062e0 <USB_DoPing>
      return HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e114      	b.n	80060ae <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d112      	bne.n	8005eb0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	6a3a      	ldr	r2, [r7, #32]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005ea8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2200      	movs	r2, #0
 8005eae:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d018      	beq.n	8005eea <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	8912      	ldrh	r2, [r2, #8]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	8912      	ldrh	r2, [r2, #8]
 8005ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ecc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005ece:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ed0:	8b7b      	ldrh	r3, [r7, #26]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d90b      	bls.n	8005eee <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005ed6:	8b7b      	ldrh	r3, [r7, #26]
 8005ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005eda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	8912      	ldrh	r2, [r2, #8]
 8005ee0:	fb02 f203 	mul.w	r2, r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	611a      	str	r2, [r3, #16]
 8005ee8:	e001      	b.n	8005eee <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005eea:	2301      	movs	r3, #1
 8005eec:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	78db      	ldrb	r3, [r3, #3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	8912      	ldrh	r2, [r2, #8]
 8005efc:	fb02 f203 	mul.w	r2, r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f0e:	04d9      	lsls	r1, r3, #19
 8005f10:	4b69      	ldr	r3, [pc, #420]	; (80060b8 <USB_HC_StartXfer+0x284>)
 8005f12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	7a9b      	ldrb	r3, [r3, #10]
 8005f1a:	075b      	lsls	r3, r3, #29
 8005f1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f20:	69f9      	ldr	r1, [r7, #28]
 8005f22:	0148      	lsls	r0, r1, #5
 8005f24:	6a39      	ldr	r1, [r7, #32]
 8005f26:	4401      	add	r1, r0
 8005f28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f2e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68d9      	ldr	r1, [r3, #12]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f46:	460a      	mov	r2, r1
 8005f48:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf0c      	ite	eq
 8005f5a:	2301      	moveq	r3, #1
 8005f5c:	2300      	movne	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	6a3a      	ldr	r2, [r7, #32]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	7e7b      	ldrb	r3, [r7, #25]
 8005f92:	075b      	lsls	r3, r3, #29
 8005f94:	69f9      	ldr	r1, [r7, #28]
 8005f96:	0148      	lsls	r0, r1, #5
 8005f98:	6a39      	ldr	r1, [r7, #32]
 8005f9a:	4401      	add	r1, r0
 8005f9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a42      	ldr	r2, [pc, #264]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fb4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fb6:	4b41      	ldr	r3, [pc, #260]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fbe:	4a3f      	ldr	r2, [pc, #252]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fc0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d006      	beq.n	8005fd8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005fca:	4b3c      	ldr	r3, [pc, #240]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd2:	4a3a      	ldr	r2, [pc, #232]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e005      	b.n	8005fe4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005fd8:	4b38      	ldr	r3, [pc, #224]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fe0:	4a36      	ldr	r2, [pc, #216]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fe2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fe4:	4b35      	ldr	r3, [pc, #212]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fec:	4a33      	ldr	r2, [pc, #204]	; (80060bc <USB_HC_StartXfer+0x288>)
 8005fee:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <USB_HC_StartXfer+0x288>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e04f      	b.n	80060ae <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	78db      	ldrb	r3, [r3, #3]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d14a      	bne.n	80060ac <USB_HC_StartXfer+0x278>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d046      	beq.n	80060ac <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	79db      	ldrb	r3, [r3, #7]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d830      	bhi.n	8006088 <USB_HC_StartXfer+0x254>
 8006026:	a201      	add	r2, pc, #4	; (adr r2, 800602c <USB_HC_StartXfer+0x1f8>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	0800603d 	.word	0x0800603d
 8006030:	08006061 	.word	0x08006061
 8006034:	0800603d 	.word	0x0800603d
 8006038:	08006061 	.word	0x08006061
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	3303      	adds	r3, #3
 8006042:	089b      	lsrs	r3, r3, #2
 8006044:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006046:	8afa      	ldrh	r2, [r7, #22]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	b29b      	uxth	r3, r3
 800604e:	429a      	cmp	r2, r3
 8006050:	d91c      	bls.n	800608c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	619a      	str	r2, [r3, #24]
        }
        break;
 800605e:	e015      	b.n	800608c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	3303      	adds	r3, #3
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800606a:	8afa      	ldrh	r2, [r7, #22]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	b29b      	uxth	r3, r3
 8006076:	429a      	cmp	r2, r3
 8006078:	d90a      	bls.n	8006090 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	619a      	str	r2, [r3, #24]
        }
        break;
 8006086:	e003      	b.n	8006090 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <USB_HC_StartXfer+0x25e>
        break;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <USB_HC_StartXfer+0x25e>
        break;
 8006090:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68d9      	ldr	r1, [r3, #12]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	785a      	ldrb	r2, [r3, #1]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	b298      	uxth	r0, r3
 80060a0:	2300      	movs	r3, #0
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4603      	mov	r3, r0
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff fb84 	bl	80057b4 <USB_WritePacket>
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3728      	adds	r7, #40	; 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	1ff80000 	.word	0x1ff80000
 80060bc:	200000b0 	.word	0x200000b0

080060c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	b29b      	uxth	r3, r3
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b087      	sub	sp, #28
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	0c9b      	lsrs	r3, r3, #18
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <USB_HC_Halt+0x3a>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d16c      	bne.n	80061f6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	440a      	add	r2, r1
 8006132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006136:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800613a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d143      	bne.n	80061d0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	440a      	add	r2, r1
 800615e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006166:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	440a      	add	r2, r1
 800617e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006182:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006186:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4413      	add	r3, r2
 8006190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	440a      	add	r2, r1
 800619e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061a6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	3301      	adds	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b4:	d81d      	bhi.n	80061f2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061cc:	d0ec      	beq.n	80061a8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061ce:	e080      	b.n	80062d2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ee:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061f0:	e06f      	b.n	80062d2 <USB_HC_Halt+0x1f0>
          break;
 80061f2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061f4:	e06d      	b.n	80062d2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	440a      	add	r2, r1
 800620c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006214:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d143      	bne.n	80062ae <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	440a      	add	r2, r1
 800623c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006244:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	440a      	add	r2, r1
 800625c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006264:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	440a      	add	r2, r1
 800627c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006280:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006284:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	3301      	adds	r3, #1
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006292:	d81d      	bhi.n	80062d0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062aa:	d0ec      	beq.n	8006286 <USB_HC_Halt+0x1a4>
 80062ac:	e011      	b.n	80062d2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	e000      	b.n	80062d2 <USB_HC_Halt+0x1f0>
          break;
 80062d0:	bf00      	nop
    }
  }

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80062f4:	2301      	movs	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	04da      	lsls	r2, r3, #19
 80062fc:	4b15      	ldr	r3, [pc, #84]	; (8006354 <USB_DoPing+0x74>)
 80062fe:	4013      	ands	r3, r2
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	440a      	add	r2, r1
 8006308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006310:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006328:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006330:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	461a      	mov	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	1ff80000 	.word	0x1ff80000

08006358 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff f99f 	bl	80056ac <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800636e:	2110      	movs	r1, #16
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff f9d7 	bl	8005724 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff f9fa 	bl	8005770 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800637c:	2300      	movs	r3, #0
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	e01f      	b.n	80063c2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006398:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	3301      	adds	r3, #1
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b0f      	cmp	r3, #15
 80063c6:	d9dc      	bls.n	8006382 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	e034      	b.n	8006438 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	461a      	mov	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3301      	adds	r3, #1
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006414:	d80c      	bhi.n	8006430 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800642c:	d0ec      	beq.n	8006408 <USB_StopHost+0xb0>
 800642e:	e000      	b.n	8006432 <USB_StopHost+0xda>
        break;
 8006430:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3301      	adds	r3, #1
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b0f      	cmp	r3, #15
 800643c:	d9c7      	bls.n	80063ce <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006444:	461a      	mov	r2, r3
 8006446:	f04f 33ff 	mov.w	r3, #4294967295
 800644a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f04f 32ff 	mov.w	r2, #4294967295
 8006452:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff f918 	bl	800568a <USB_EnableGlobalInt>

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b089      	sub	sp, #36	; 0x24
 8006468:	af04      	add	r7, sp, #16
 800646a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800646c:	2301      	movs	r3, #1
 800646e:	2202      	movs	r2, #2
 8006470:	2102      	movs	r1, #2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fc68 	bl	8006d48 <USBH_FindInterface>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2bff      	cmp	r3, #255	; 0xff
 8006480:	d002      	beq.n	8006488 <USBH_CDC_InterfaceInit+0x24>
 8006482:	7bfb      	ldrb	r3, [r7, #15]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d901      	bls.n	800648c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006488:	2302      	movs	r3, #2
 800648a:	e13d      	b.n	8006708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fc3d 	bl	8006d10 <USBH_SelectInterface>
 8006496:	4603      	mov	r3, r0
 8006498:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80064a0:	2302      	movs	r3, #2
 80064a2:	e131      	b.n	8006708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80064aa:	2050      	movs	r0, #80	; 0x50
 80064ac:	f002 fa04 	bl	80088b8 <malloc>
 80064b0:	4603      	mov	r3, r0
 80064b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e11f      	b.n	8006708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80064c8:	2250      	movs	r2, #80	; 0x50
 80064ca:	2100      	movs	r1, #0
 80064cc:	68b8      	ldr	r0, [r7, #8]
 80064ce:	f002 fa03 	bl	80088d8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	211a      	movs	r1, #26
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da15      	bge.n	8006516 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	211a      	movs	r1, #26
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	211a      	movs	r1, #26
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fe36 	bl	800818e <USBH_AllocPipe>
 8006522:	4603      	mov	r3, r0
 8006524:	461a      	mov	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	7819      	ldrb	r1, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	7858      	ldrb	r0, [r3, #1]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	8952      	ldrh	r2, [r2, #10]
 8006542:	9202      	str	r2, [sp, #8]
 8006544:	2203      	movs	r2, #3
 8006546:	9201      	str	r2, [sp, #4]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4623      	mov	r3, r4
 800654c:	4602      	mov	r2, r0
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fdee 	bl	8008130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2200      	movs	r2, #0
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f002 f8fb 	bl	8008758 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006562:	2300      	movs	r3, #0
 8006564:	2200      	movs	r2, #0
 8006566:	210a      	movs	r1, #10
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fbed 	bl	8006d48 <USBH_FindInterface>
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2bff      	cmp	r3, #255	; 0xff
 8006576:	d002      	beq.n	800657e <USBH_CDC_InterfaceInit+0x11a>
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d901      	bls.n	8006582 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800657e:	2302      	movs	r3, #2
 8006580:	e0c2      	b.n	8006708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	211a      	movs	r1, #26
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	4413      	add	r3, r2
 800658e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	b25b      	sxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	da16      	bge.n	80065c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	211a      	movs	r1, #26
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	211a      	movs	r1, #26
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065c0:	881a      	ldrh	r2, [r3, #0]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	835a      	strh	r2, [r3, #26]
 80065c6:	e015      	b.n	80065f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	211a      	movs	r1, #26
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065d8:	781a      	ldrb	r2, [r3, #0]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	211a      	movs	r1, #26
 80065e4:	fb01 f303 	mul.w	r3, r1, r3
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065ee:	881a      	ldrh	r2, [r3, #0]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	211a      	movs	r1, #26
 80065fa:	fb01 f303 	mul.w	r3, r1, r3
 80065fe:	4413      	add	r3, r2
 8006600:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	b25b      	sxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	da16      	bge.n	800663a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	211a      	movs	r1, #26
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	f203 3356 	addw	r3, r3, #854	; 0x356
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	211a      	movs	r1, #26
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	4413      	add	r3, r2
 800662e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	835a      	strh	r2, [r3, #26]
 8006638:	e015      	b.n	8006666 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	211a      	movs	r1, #26
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	f203 3356 	addw	r3, r3, #854	; 0x356
 800664a:	781a      	ldrb	r2, [r3, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	211a      	movs	r1, #26
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	4413      	add	r3, r2
 800665c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006660:	881a      	ldrh	r2, [r3, #0]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	7b9b      	ldrb	r3, [r3, #14]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fd8e 	bl	800818e <USBH_AllocPipe>
 8006672:	4603      	mov	r3, r0
 8006674:	461a      	mov	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	7bdb      	ldrb	r3, [r3, #15]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fd84 	bl	800818e <USBH_AllocPipe>
 8006686:	4603      	mov	r3, r0
 8006688:	461a      	mov	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	7b59      	ldrb	r1, [r3, #13]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	7b98      	ldrb	r0, [r3, #14]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	8b12      	ldrh	r2, [r2, #24]
 80066a6:	9202      	str	r2, [sp, #8]
 80066a8:	2202      	movs	r2, #2
 80066aa:	9201      	str	r2, [sp, #4]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	4623      	mov	r3, r4
 80066b0:	4602      	mov	r2, r0
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fd3c 	bl	8008130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	7b19      	ldrb	r1, [r3, #12]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	7bd8      	ldrb	r0, [r3, #15]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	8b52      	ldrh	r2, [r2, #26]
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	2202      	movs	r2, #2
 80066d4:	9201      	str	r2, [sp, #4]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4623      	mov	r3, r4
 80066da:	4602      	mov	r2, r0
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fd27 	bl	8008130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	7b5b      	ldrb	r3, [r3, #13]
 80066ee:	2200      	movs	r2, #0
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f002 f830 	bl	8008758 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	7b1b      	ldrb	r3, [r3, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 f829 	bl	8008758 <USBH_LL_SetToggle>

  return USBH_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	bd90      	pop	{r4, r7, pc}

08006710 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fd1c 	bl	800816e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fd47 	bl	80081d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	7b1b      	ldrb	r3, [r3, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	7b1b      	ldrb	r3, [r3, #12]
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fd09 	bl	800816e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	7b1b      	ldrb	r3, [r3, #12]
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fd34 	bl	80081d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	7b5b      	ldrb	r3, [r3, #13]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	7b5b      	ldrb	r3, [r3, #13]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fcf6 	bl	800816e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	7b5b      	ldrb	r3, [r3, #13]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fd21 	bl	80081d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f002 f88d 	bl	80088c8 <free>
    phost->pActiveClass->pData = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b4:	2200      	movs	r2, #0
 80067b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3340      	adds	r3, #64	; 0x40
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8b1 	bl	8006942 <GetLineCoding>
 80067e0:	4603      	mov	r3, r0
 80067e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067f0:	2102      	movs	r1, #2
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80067f6:	7afb      	ldrb	r3, [r7, #11]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006820:	2b04      	cmp	r3, #4
 8006822:	d877      	bhi.n	8006914 <USBH_CDC_Process+0x114>
 8006824:	a201      	add	r2, pc, #4	; (adr r2, 800682c <USBH_CDC_Process+0x2c>)
 8006826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682a:	bf00      	nop
 800682c:	08006841 	.word	0x08006841
 8006830:	08006847 	.word	0x08006847
 8006834:	08006877 	.word	0x08006877
 8006838:	080068eb 	.word	0x080068eb
 800683c:	080068f9 	.word	0x080068f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]
      break;
 8006844:	e06d      	b.n	8006922 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f897 	bl	8006980 <SetLineCoding>
 8006852:	4603      	mov	r3, r0
 8006854:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006864:	e058      	b.n	8006918 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d055      	beq.n	8006918 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2204      	movs	r2, #4
 8006870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006874:	e050      	b.n	8006918 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3340      	adds	r3, #64	; 0x40
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f860 	bl	8006942 <GetLineCoding>
 8006882:	4603      	mov	r3, r0
 8006884:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d126      	bne.n	80068da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	791b      	ldrb	r3, [r3, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d13b      	bne.n	800691c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d133      	bne.n	800691c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d12b      	bne.n	800691c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d124      	bne.n	800691c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f95a 	bl	8006b8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068d8:	e020      	b.n	800691c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d01d      	beq.n	800691c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2204      	movs	r2, #4
 80068e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80068e8:	e018      	b.n	800691c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f867 	bl	80069be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f8dc 	bl	8006aae <CDC_ProcessReception>
      break;
 80068f6:	e014      	b.n	8006922 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80068f8:	2100      	movs	r1, #0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 ffe5 	bl	80078ca <USBH_ClrFeature>
 8006900:	4603      	mov	r3, r0
 8006902:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006912:	e005      	b.n	8006920 <USBH_CDC_Process+0x120>

    default:
      break;
 8006914:	bf00      	nop
 8006916:	e004      	b.n	8006922 <USBH_CDC_Process+0x122>
      break;
 8006918:	bf00      	nop
 800691a:	e002      	b.n	8006922 <USBH_CDC_Process+0x122>
      break;
 800691c:	bf00      	nop
 800691e:	e000      	b.n	8006922 <USBH_CDC_Process+0x122>
      break;
 8006920:	bf00      	nop

  }

  return status;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	22a1      	movs	r2, #161	; 0xa1
 8006950:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2221      	movs	r2, #33	; 0x21
 8006956:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2207      	movs	r2, #7
 8006968:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2207      	movs	r2, #7
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 f98a 	bl	8007c8a <USBH_CtlReq>
 8006976:	4603      	mov	r3, r0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2221      	movs	r2, #33	; 0x21
 800698e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2207      	movs	r2, #7
 80069a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2207      	movs	r2, #7
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 f96b 	bl	8007c8a <USBH_CtlReq>
 80069b4:	4603      	mov	r3, r0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d002      	beq.n	80069e4 <CDC_ProcessTransmission+0x26>
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d025      	beq.n	8006a2e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80069e2:	e060      	b.n	8006aa6 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	8b12      	ldrh	r2, [r2, #24]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d90c      	bls.n	8006a0a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	69d9      	ldr	r1, [r3, #28]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8b1a      	ldrh	r2, [r3, #24]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	7b58      	ldrb	r0, [r3, #13]
 80069fc:	2301      	movs	r3, #1
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	4603      	mov	r3, r0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fb51 	bl	80080aa <USBH_BulkSendData>
 8006a08:	e00c      	b.n	8006a24 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	7b58      	ldrb	r0, [r3, #13]
 8006a18:	2301      	movs	r3, #1
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fb43 	bl	80080aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a2c:	e03b      	b.n	8006aa6 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	7b5b      	ldrb	r3, [r3, #13]
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fe65 	bl	8008704 <USBH_LL_GetURBState>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a3e:	7afb      	ldrb	r3, [r7, #11]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d128      	bne.n	8006a96 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	8b12      	ldrh	r2, [r2, #24]
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d90e      	bls.n	8006a6e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	8b12      	ldrh	r2, [r2, #24]
 8006a58:	1a9a      	subs	r2, r3, r2
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	8b12      	ldrh	r2, [r2, #24]
 8006a66:	441a      	add	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	e002      	b.n	8006a74 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d004      	beq.n	8006a86 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a84:	e00e      	b.n	8006aa4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f868 	bl	8006b64 <USBH_CDC_TransmitCallback>
      break;
 8006a94:	e006      	b.n	8006aa4 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d103      	bne.n	8006aa4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006aa4:	bf00      	nop
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b086      	sub	sp, #24
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d002      	beq.n	8006ad4 <CDC_ProcessReception+0x26>
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d00e      	beq.n	8006af0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ad2:	e043      	b.n	8006b5c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	6a19      	ldr	r1, [r3, #32]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	8b5a      	ldrh	r2, [r3, #26]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	7b1b      	ldrb	r3, [r3, #12]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fb07 	bl	80080f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006aee:	e035      	b.n	8006b5c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	7b1b      	ldrb	r3, [r3, #12]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 fe04 	bl	8008704 <USBH_LL_GetURBState>
 8006afc:	4603      	mov	r3, r0
 8006afe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b00:	7cfb      	ldrb	r3, [r7, #19]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d129      	bne.n	8006b5a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	7b1b      	ldrb	r3, [r3, #12]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fd67 	bl	80085e0 <USBH_LL_GetLastXferSize>
 8006b12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d016      	beq.n	8006b4c <CDC_ProcessReception+0x9e>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	8b5b      	ldrh	r3, [r3, #26]
 8006b22:	461a      	mov	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d910      	bls.n	8006b4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1ad2      	subs	r2, r2, r3
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	6a1a      	ldr	r2, [r3, #32]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	441a      	add	r2, r3
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2203      	movs	r2, #3
 8006b46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b4a:	e006      	b.n	8006b5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f80f 	bl	8006b78 <USBH_CDC_ReceiveCallback>
      break;
 8006b5a:	bf00      	nop
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4613      	mov	r3, r2
 8006bac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e029      	b.n	8006c0c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	79fa      	ldrb	r2, [r7, #7]
 8006bbc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f81f 	bl	8006c14 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f001 fc39 	bl	800847c <USBH_LL_Init>

  return USBH_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e009      	b.n	8006c3a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	33e0      	adds	r3, #224	; 0xe0
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b0e      	cmp	r3, #14
 8006c3e:	d9f2      	bls.n	8006c26 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e009      	b.n	8006c5a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c60:	d3f1      	bcc.n	8006c46 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2240      	movs	r2, #64	; 0x40
 8006c86:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d016      	beq.n	8006cfe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10e      	bne.n	8006cf8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ce0:	1c59      	adds	r1, r3, #1
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	33de      	adds	r3, #222	; 0xde
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	e004      	b.n	8006d02 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e001      	b.n	8006d02 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d204      	bcs.n	8006d36 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	78fa      	ldrb	r2, [r7, #3]
 8006d30:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d34:	e001      	b.n	8006d3a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d36:	2302      	movs	r3, #2
 8006d38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	70fb      	strb	r3, [r7, #3]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70bb      	strb	r3, [r7, #2]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d70:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d72:	e025      	b.n	8006dc0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	221a      	movs	r2, #26
 8006d78:	fb02 f303 	mul.w	r3, r2, r3
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	3302      	adds	r3, #2
 8006d84:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	795b      	ldrb	r3, [r3, #5]
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d002      	beq.n	8006d96 <USBH_FindInterface+0x4e>
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	2bff      	cmp	r3, #255	; 0xff
 8006d94:	d111      	bne.n	8006dba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d9a:	78ba      	ldrb	r2, [r7, #2]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d002      	beq.n	8006da6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006da0:	78bb      	ldrb	r3, [r7, #2]
 8006da2:	2bff      	cmp	r3, #255	; 0xff
 8006da4:	d109      	bne.n	8006dba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006daa:	787a      	ldrb	r2, [r7, #1]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d002      	beq.n	8006db6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006db0:	787b      	ldrb	r3, [r7, #1]
 8006db2:	2bff      	cmp	r3, #255	; 0xff
 8006db4:	d101      	bne.n	8006dba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	e006      	b.n	8006dc8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d9d6      	bls.n	8006d74 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006dc6:	23ff      	movs	r3, #255	; 0xff
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fb89 	bl	80084f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006de2:	2101      	movs	r1, #1
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fca0 	bl	800872a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af04      	add	r7, sp, #16
 8006dfa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2203      	movs	r2, #3
 8006e14:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b0b      	cmp	r3, #11
 8006e1e:	f200 81b3 	bhi.w	8007188 <USBH_Process+0x394>
 8006e22:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <USBH_Process+0x34>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e59 	.word	0x08006e59
 8006e2c:	08006e8b 	.word	0x08006e8b
 8006e30:	08006ef3 	.word	0x08006ef3
 8006e34:	08007123 	.word	0x08007123
 8006e38:	08007189 	.word	0x08007189
 8006e3c:	08006f97 	.word	0x08006f97
 8006e40:	080070c9 	.word	0x080070c9
 8006e44:	08006fcd 	.word	0x08006fcd
 8006e48:	08006fed 	.word	0x08006fed
 8006e4c:	0800700d 	.word	0x0800700d
 8006e50:	0800703b 	.word	0x0800703b
 8006e54:	0800710b 	.word	0x0800710b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8193 	beq.w	800718c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006e6c:	20c8      	movs	r0, #200	; 0xc8
 8006e6e:	f001 fca6 	bl	80087be <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fb99 	bl	80085aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e88:	e180      	b.n	800718c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d107      	bne.n	8006ea4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ea2:	e182      	b.n	80071aa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eae:	d914      	bls.n	8006eda <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d903      	bls.n	8006ed2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	220d      	movs	r2, #13
 8006ece:	701a      	strb	r2, [r3, #0]
      break;
 8006ed0:	e16b      	b.n	80071aa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]
      break;
 8006ed8:	e167      	b.n	80071aa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ee0:	f103 020a 	add.w	r2, r3, #10
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006eea:	200a      	movs	r0, #10
 8006eec:	f001 fc67 	bl	80087be <USBH_Delay>
      break;
 8006ef0:	e15b      	b.n	80071aa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f02:	2104      	movs	r1, #4
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f08:	2064      	movs	r0, #100	; 0x64
 8006f0a:	f001 fc58 	bl	80087be <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fb26 	bl	8008560 <USBH_LL_GetSpeed>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2205      	movs	r2, #5
 8006f22:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f24:	2100      	movs	r1, #0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f931 	bl	800818e <USBH_AllocPipe>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f34:	2180      	movs	r1, #128	; 0x80
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 f929 	bl	800818e <USBH_AllocPipe>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	7919      	ldrb	r1, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	9202      	str	r2, [sp, #8]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	9201      	str	r2, [sp, #4]
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	4603      	mov	r3, r0
 8006f64:	2280      	movs	r2, #128	; 0x80
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f8e2 	bl	8008130 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7959      	ldrb	r1, [r3, #5]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f80:	b292      	uxth	r2, r2
 8006f82:	9202      	str	r2, [sp, #8]
 8006f84:	2200      	movs	r2, #0
 8006f86:	9201      	str	r2, [sp, #4]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f8ce 	bl	8008130 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f94:	e109      	b.n	80071aa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f90c 	bl	80071b4 <USBH_HandleEnum>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 80f3 	bne.w	8007190 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d103      	bne.n	8006fc4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fc2:	e0e5      	b.n	8007190 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2207      	movs	r2, #7
 8006fc8:	701a      	strb	r2, [r3, #0]
      break;
 8006fca:	e0e1      	b.n	8007190 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 80de 	beq.w	8007194 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fde:	2101      	movs	r1, #1
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2208      	movs	r2, #8
 8006fe8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006fea:	e0d3      	b.n	8007194 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fc20 	bl	800783c <USBH_SetCfg>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 80ca 	bne.w	8007198 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2209      	movs	r2, #9
 8007008:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800700a:	e0c5      	b.n	8007198 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800701a:	2101      	movs	r1, #1
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc30 	bl	8007882 <USBH_SetFeature>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 80b9 	bne.w	800719c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	220a      	movs	r2, #10
 800702e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007030:	e0b4      	b.n	800719c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	220a      	movs	r2, #10
 8007036:	701a      	strb	r2, [r3, #0]
      break;
 8007038:	e0b0      	b.n	800719c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80ad 	beq.w	80071a0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
 8007052:	e016      	b.n	8007082 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007054:	7bfa      	ldrb	r2, [r7, #15]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	32de      	adds	r2, #222	; 0xde
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	791a      	ldrb	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007066:	429a      	cmp	r2, r3
 8007068:	d108      	bne.n	800707c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800706a:	7bfa      	ldrb	r2, [r7, #15]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	32de      	adds	r2, #222	; 0xde
 8007070:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800707a:	e005      	b.n	8007088 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	3301      	adds	r3, #1
 8007080:	73fb      	strb	r3, [r7, #15]
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0e5      	beq.n	8007054 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d016      	beq.n	80070c0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2206      	movs	r2, #6
 80070a8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070b0:	2103      	movs	r1, #3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070b6:	e073      	b.n	80071a0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	220d      	movs	r2, #13
 80070bc:	701a      	strb	r2, [r3, #0]
      break;
 80070be:	e06f      	b.n	80071a0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	220d      	movs	r2, #13
 80070c4:	701a      	strb	r2, [r3, #0]
      break;
 80070c6:	e06b      	b.n	80071a0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d017      	beq.n	8007102 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
 80070de:	4603      	mov	r3, r0
 80070e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d103      	bne.n	80070f2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	220b      	movs	r2, #11
 80070ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070f0:	e058      	b.n	80071a4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d154      	bne.n	80071a4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	220d      	movs	r2, #13
 80070fe:	701a      	strb	r2, [r3, #0]
      break;
 8007100:	e050      	b.n	80071a4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	220d      	movs	r2, #13
 8007106:	701a      	strb	r2, [r3, #0]
      break;
 8007108:	e04c      	b.n	80071a4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d049      	beq.n	80071a8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
      }
      break;
 8007120:	e042      	b.n	80071a8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fd72 	bl	8006c14 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800715e:	2105      	movs	r1, #5
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	d107      	bne.n	8007180 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fe2b 	bl	8006dd4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800717e:	e014      	b.n	80071aa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 f9b7 	bl	80084f4 <USBH_LL_Start>
      break;
 8007186:	e010      	b.n	80071aa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007188:	bf00      	nop
 800718a:	e00e      	b.n	80071aa <USBH_Process+0x3b6>
      break;
 800718c:	bf00      	nop
 800718e:	e00c      	b.n	80071aa <USBH_Process+0x3b6>
      break;
 8007190:	bf00      	nop
 8007192:	e00a      	b.n	80071aa <USBH_Process+0x3b6>
    break;
 8007194:	bf00      	nop
 8007196:	e008      	b.n	80071aa <USBH_Process+0x3b6>
      break;
 8007198:	bf00      	nop
 800719a:	e006      	b.n	80071aa <USBH_Process+0x3b6>
      break;
 800719c:	bf00      	nop
 800719e:	e004      	b.n	80071aa <USBH_Process+0x3b6>
      break;
 80071a0:	bf00      	nop
 80071a2:	e002      	b.n	80071aa <USBH_Process+0x3b6>
      break;
 80071a4:	bf00      	nop
 80071a6:	e000      	b.n	80071aa <USBH_Process+0x3b6>
      break;
 80071a8:	bf00      	nop
  }
  return USBH_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af04      	add	r7, sp, #16
 80071ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b07      	cmp	r3, #7
 80071ca:	f200 81c1 	bhi.w	8007550 <USBH_HandleEnum+0x39c>
 80071ce:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <USBH_HandleEnum+0x20>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071f5 	.word	0x080071f5
 80071d8:	080072b3 	.word	0x080072b3
 80071dc:	0800731d 	.word	0x0800731d
 80071e0:	080073ab 	.word	0x080073ab
 80071e4:	08007415 	.word	0x08007415
 80071e8:	08007485 	.word	0x08007485
 80071ec:	080074cb 	.word	0x080074cb
 80071f0:	08007511 	.word	0x08007511
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80071f4:	2108      	movs	r1, #8
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa50 	bl	800769c <USBH_Get_DevDesc>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d130      	bne.n	8007268 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7919      	ldrb	r1, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800722a:	b292      	uxth	r2, r2
 800722c:	9202      	str	r2, [sp, #8]
 800722e:	2200      	movs	r2, #0
 8007230:	9201      	str	r2, [sp, #4]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4603      	mov	r3, r0
 8007236:	2280      	movs	r2, #128	; 0x80
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 ff79 	bl	8008130 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7959      	ldrb	r1, [r3, #5]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007252:	b292      	uxth	r2, r2
 8007254:	9202      	str	r2, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	9201      	str	r2, [sp, #4]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4603      	mov	r3, r0
 800725e:	2200      	movs	r2, #0
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 ff65 	bl	8008130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007266:	e175      	b.n	8007554 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b03      	cmp	r3, #3
 800726c:	f040 8172 	bne.w	8007554 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007276:	3301      	adds	r3, #1
 8007278:	b2da      	uxtb	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007286:	2b03      	cmp	r3, #3
 8007288:	d903      	bls.n	8007292 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	220d      	movs	r2, #13
 800728e:	701a      	strb	r2, [r3, #0]
      break;
 8007290:	e160      	b.n	8007554 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	795b      	ldrb	r3, [r3, #5]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 ff99 	bl	80081d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	791b      	ldrb	r3, [r3, #4]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 ff93 	bl	80081d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
      break;
 80072b0:	e150      	b.n	8007554 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80072b2:	2112      	movs	r1, #18
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f9f1 	bl	800769c <USBH_Get_DevDesc>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d103      	bne.n	80072cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072ca:	e145      	b.n	8007558 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	f040 8142 	bne.w	8007558 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072da:	3301      	adds	r3, #1
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d903      	bls.n	80072f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	220d      	movs	r2, #13
 80072f2:	701a      	strb	r2, [r3, #0]
      break;
 80072f4:	e130      	b.n	8007558 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	795b      	ldrb	r3, [r3, #5]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 ff67 	bl	80081d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	791b      	ldrb	r3, [r3, #4]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 ff61 	bl	80081d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
      break;
 800731a:	e11d      	b.n	8007558 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800731c:	2101      	movs	r1, #1
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa68 	bl	80077f4 <USBH_SetAddress>
 8007324:	4603      	mov	r3, r0
 8007326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d132      	bne.n	8007394 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800732e:	2002      	movs	r0, #2
 8007330:	f001 fa45 	bl	80087be <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2203      	movs	r2, #3
 8007340:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	7919      	ldrb	r1, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007356:	b292      	uxth	r2, r2
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	9201      	str	r2, [sp, #4]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	4603      	mov	r3, r0
 8007362:	2280      	movs	r2, #128	; 0x80
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fee3 	bl	8008130 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7959      	ldrb	r1, [r3, #5]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800737e:	b292      	uxth	r2, r2
 8007380:	9202      	str	r2, [sp, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	9201      	str	r2, [sp, #4]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4603      	mov	r3, r0
 800738a:	2200      	movs	r2, #0
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fecf 	bl	8008130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007392:	e0e3      	b.n	800755c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2b03      	cmp	r3, #3
 8007398:	f040 80e0 	bne.w	800755c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	220d      	movs	r2, #13
 80073a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	705a      	strb	r2, [r3, #1]
      break;
 80073a8:	e0d8      	b.n	800755c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80073aa:	2109      	movs	r1, #9
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f99d 	bl	80076ec <USBH_Get_CfgDesc>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d103      	bne.n	80073c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2204      	movs	r2, #4
 80073c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073c2:	e0cd      	b.n	8007560 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	f040 80ca 	bne.w	8007560 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073d2:	3301      	adds	r3, #1
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d903      	bls.n	80073ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	220d      	movs	r2, #13
 80073ea:	701a      	strb	r2, [r3, #0]
      break;
 80073ec:	e0b8      	b.n	8007560 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	795b      	ldrb	r3, [r3, #5]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 feeb 	bl	80081d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	791b      	ldrb	r3, [r3, #4]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fee5 	bl	80081d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
      break;
 8007412:	e0a5      	b.n	8007560 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f965 	bl	80076ec <USBH_Get_CfgDesc>
 8007422:	4603      	mov	r3, r0
 8007424:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2205      	movs	r2, #5
 8007430:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007432:	e097      	b.n	8007564 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b03      	cmp	r3, #3
 8007438:	f040 8094 	bne.w	8007564 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007442:	3301      	adds	r3, #1
 8007444:	b2da      	uxtb	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007452:	2b03      	cmp	r3, #3
 8007454:	d903      	bls.n	800745e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	220d      	movs	r2, #13
 800745a:	701a      	strb	r2, [r3, #0]
      break;
 800745c:	e082      	b.n	8007564 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	795b      	ldrb	r3, [r3, #5]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 feb3 	bl	80081d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	791b      	ldrb	r3, [r3, #4]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fead 	bl	80081d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
      break;
 8007482:	e06f      	b.n	8007564 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800748a:	2b00      	cmp	r3, #0
 800748c:	d019      	beq.n	80074c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800749a:	23ff      	movs	r3, #255	; 0xff
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f949 	bl	8007734 <USBH_Get_StringDesc>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2206      	movs	r2, #6
 80074b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074b2:	e059      	b.n	8007568 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d156      	bne.n	8007568 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2206      	movs	r2, #6
 80074be:	705a      	strb	r2, [r3, #1]
      break;
 80074c0:	e052      	b.n	8007568 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2206      	movs	r2, #6
 80074c6:	705a      	strb	r2, [r3, #1]
      break;
 80074c8:	e04e      	b.n	8007568 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d019      	beq.n	8007508 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074e0:	23ff      	movs	r3, #255	; 0xff
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f926 	bl	8007734 <USBH_Get_StringDesc>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d103      	bne.n	80074fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2207      	movs	r2, #7
 80074f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074f8:	e038      	b.n	800756c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d135      	bne.n	800756c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2207      	movs	r2, #7
 8007504:	705a      	strb	r2, [r3, #1]
      break;
 8007506:	e031      	b.n	800756c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2207      	movs	r2, #7
 800750c:	705a      	strb	r2, [r3, #1]
      break;
 800750e:	e02d      	b.n	800756c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007516:	2b00      	cmp	r3, #0
 8007518:	d017      	beq.n	800754a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007526:	23ff      	movs	r3, #255	; 0xff
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f903 	bl	8007734 <USBH_Get_StringDesc>
 800752e:	4603      	mov	r3, r0
 8007530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800753c:	e018      	b.n	8007570 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b03      	cmp	r3, #3
 8007542:	d115      	bne.n	8007570 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
      break;
 8007548:	e012      	b.n	8007570 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
      break;
 800754e:	e00f      	b.n	8007570 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007550:	bf00      	nop
 8007552:	e00e      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007554:	bf00      	nop
 8007556:	e00c      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007558:	bf00      	nop
 800755a:	e00a      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 800755c:	bf00      	nop
 800755e:	e008      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007560:	bf00      	nop
 8007562:	e006      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007564:	bf00      	nop
 8007566:	e004      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007568:	bf00      	nop
 800756a:	e002      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 800756c:	bf00      	nop
 800756e:	e000      	b.n	8007572 <USBH_HandleEnum+0x3be>
      break;
 8007570:	bf00      	nop
  }
  return Status;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f804 	bl	80075be <USBH_HandleSof>
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b0b      	cmp	r3, #11
 80075ce:	d10a      	bne.n	80075e6 <USBH_HandleSof+0x28>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
  }
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80075fe:	bf00      	nop
}
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800761a:	bf00      	nop
}
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ff58 	bl	800852a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	791b      	ldrb	r3, [r3, #4]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fda5 	bl	80081d0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	795b      	ldrb	r3, [r3, #5]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fd9f 	bl	80081d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	4613      	mov	r3, r2
 80076b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076ba:	2100      	movs	r1, #0
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f864 	bl	800778a <USBH_GetDescriptor>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	b292      	uxth	r2, r2
 80076dc:	4619      	mov	r1, r3
 80076de:	f000 f918 	bl	8007912 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	331c      	adds	r3, #28
 80076fc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80076fe:	887b      	ldrh	r3, [r7, #2]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007708:	2100      	movs	r1, #0
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f83d 	bl	800778a <USBH_GetDescriptor>
 8007710:	4603      	mov	r3, r0
 8007712:	72fb      	strb	r3, [r7, #11]
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d107      	bne.n	800772a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007720:	887a      	ldrh	r2, [r7, #2]
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 f964 	bl	80079f2 <USBH_ParseCfgDesc>
  }

  return status;
 800772a:	7afb      	ldrb	r3, [r7, #11]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	461a      	mov	r2, r3
 8007740:	460b      	mov	r3, r1
 8007742:	72fb      	strb	r3, [r7, #11]
 8007744:	4613      	mov	r3, r2
 8007746:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007750:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007758:	893b      	ldrh	r3, [r7, #8]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	460b      	mov	r3, r1
 800775e:	2100      	movs	r1, #0
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f812 	bl	800778a <USBH_GetDescriptor>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007776:	893a      	ldrh	r2, [r7, #8]
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fa37 	bl	8007bee <USBH_ParseStringDesc>
  }

  return status;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	72fb      	strb	r3, [r7, #11]
 8007798:	4613      	mov	r3, r2
 800779a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	789b      	ldrb	r3, [r3, #2]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d11c      	bne.n	80077de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2206      	movs	r2, #6
 80077b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	893a      	ldrh	r2, [r7, #8]
 80077ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80077bc:	893b      	ldrh	r3, [r7, #8]
 80077be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077c6:	d104      	bne.n	80077d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f240 4209 	movw	r2, #1033	; 0x409
 80077ce:	829a      	strh	r2, [r3, #20]
 80077d0:	e002      	b.n	80077d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8b3a      	ldrh	r2, [r7, #24]
 80077dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80077de:	8b3b      	ldrh	r3, [r7, #24]
 80077e0:	461a      	mov	r2, r3
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fa50 	bl	8007c8a <USBH_CtlReq>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	789b      	ldrb	r3, [r3, #2]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d10f      	bne.n	8007828 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2205      	movs	r2, #5
 8007812:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007828:	2200      	movs	r2, #0
 800782a:	2100      	movs	r1, #0
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fa2c 	bl	8007c8a <USBH_CtlReq>
 8007832:	4603      	mov	r3, r0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	789b      	ldrb	r3, [r3, #2]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10e      	bne.n	800786e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2209      	movs	r2, #9
 800785a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	887a      	ldrh	r2, [r7, #2]
 8007860:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800786e:	2200      	movs	r2, #0
 8007870:	2100      	movs	r1, #0
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa09 	bl	8007c8a <USBH_CtlReq>
 8007878:	4603      	mov	r3, r0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	789b      	ldrb	r3, [r3, #2]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d10f      	bne.n	80078b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2203      	movs	r2, #3
 80078a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80078b6:	2200      	movs	r2, #0
 80078b8:	2100      	movs	r1, #0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f9e5 	bl	8007c8a <USBH_CtlReq>
 80078c0:	4603      	mov	r3, r0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	789b      	ldrb	r3, [r3, #2]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d10f      	bne.n	80078fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80078fe:	2200      	movs	r2, #0
 8007900:	2100      	movs	r1, #0
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f9c1 	bl	8007c8a <USBH_CtlReq>
 8007908:	4603      	mov	r3, r0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	4613      	mov	r3, r2
 800791e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	781a      	ldrb	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	785a      	ldrb	r2, [r3, #1]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3302      	adds	r3, #2
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b29a      	uxth	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	3303      	adds	r3, #3
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	b29b      	uxth	r3, r3
 8007944:	4313      	orrs	r3, r2
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	791a      	ldrb	r2, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	795a      	ldrb	r2, [r3, #5]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	799a      	ldrb	r2, [r3, #6]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	79da      	ldrb	r2, [r3, #7]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800796c:	88fb      	ldrh	r3, [r7, #6]
 800796e:	2b08      	cmp	r3, #8
 8007970:	d939      	bls.n	80079e6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3308      	adds	r3, #8
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b29a      	uxth	r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3309      	adds	r3, #9
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	b29b      	uxth	r3, r3
 8007986:	4313      	orrs	r3, r2
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	330a      	adds	r3, #10
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b29a      	uxth	r2, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	330b      	adds	r3, #11
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	4313      	orrs	r3, r2
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	330c      	adds	r3, #12
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	330d      	adds	r3, #13
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	b29b      	uxth	r3, r3
 80079be:	4313      	orrs	r3, r2
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	7b9a      	ldrb	r2, [r3, #14]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	7bda      	ldrb	r2, [r3, #15]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	7c1a      	ldrb	r2, [r3, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	7c5a      	ldrb	r2, [r3, #17]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	745a      	strb	r2, [r3, #17]
  }
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b08a      	sub	sp, #40	; 0x28
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	4613      	mov	r3, r2
 80079fe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	785a      	ldrb	r2, [r3, #1]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	3302      	adds	r3, #2
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	3303      	adds	r3, #3
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	021b      	lsls	r3, r3, #8
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	791a      	ldrb	r2, [r3, #4]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	795a      	ldrb	r2, [r3, #5]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	799a      	ldrb	r2, [r3, #6]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	79da      	ldrb	r2, [r3, #7]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	7a1a      	ldrb	r2, [r3, #8]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	2b09      	cmp	r3, #9
 8007a6c:	d95f      	bls.n	8007b2e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a6e:	2309      	movs	r3, #9
 8007a70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a76:	e051      	b.n	8007b1c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a78:	f107 0316 	add.w	r3, r7, #22
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a80:	f000 f8e8 	bl	8007c54 <USBH_GetNextDesc>
 8007a84:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d146      	bne.n	8007b1c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a92:	221a      	movs	r2, #26
 8007a94:	fb02 f303 	mul.w	r3, r2, r3
 8007a98:	3308      	adds	r3, #8
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aa4:	69f8      	ldr	r0, [r7, #28]
 8007aa6:	f000 f846 	bl	8007b36 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ab4:	e022      	b.n	8007afc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ab6:	f107 0316 	add.w	r3, r7, #22
 8007aba:	4619      	mov	r1, r3
 8007abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007abe:	f000 f8c9 	bl	8007c54 <USBH_GetNextDesc>
 8007ac2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	d117      	bne.n	8007afc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ad0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ad4:	3201      	adds	r2, #1
 8007ad6:	00d2      	lsls	r2, r2, #3
 8007ad8:	211a      	movs	r1, #26
 8007ada:	fb01 f303 	mul.w	r3, r1, r3
 8007ade:	4413      	add	r3, r2
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aec:	69b8      	ldr	r0, [r7, #24]
 8007aee:	f000 f851 	bl	8007b94 <USBH_ParseEPDesc>
            ep_ix++;
 8007af2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007af6:	3301      	adds	r3, #1
 8007af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	791b      	ldrb	r3, [r3, #4]
 8007b00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d204      	bcs.n	8007b12 <USBH_ParseCfgDesc+0x120>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	885a      	ldrh	r2, [r3, #2]
 8007b0c:	8afb      	ldrh	r3, [r7, #22]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d8d1      	bhi.n	8007ab6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b16:	3301      	adds	r3, #1
 8007b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d804      	bhi.n	8007b2e <USBH_ParseCfgDesc+0x13c>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	885a      	ldrh	r2, [r3, #2]
 8007b28:	8afb      	ldrh	r3, [r7, #22]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d8a4      	bhi.n	8007a78 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007b2e:	bf00      	nop
 8007b30:	3728      	adds	r7, #40	; 0x28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	785a      	ldrb	r2, [r3, #1]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	789a      	ldrb	r2, [r3, #2]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	78da      	ldrb	r2, [r3, #3]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	791a      	ldrb	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	795a      	ldrb	r2, [r3, #5]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	799a      	ldrb	r2, [r3, #6]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	79da      	ldrb	r2, [r3, #7]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	7a1a      	ldrb	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	721a      	strb	r2, [r3, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	785a      	ldrb	r2, [r3, #1]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	789a      	ldrb	r2, [r3, #2]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	78da      	ldrb	r2, [r3, #3]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	3305      	adds	r3, #5
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	799a      	ldrb	r2, [r3, #6]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	719a      	strb	r2, [r3, #6]
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b087      	sub	sp, #28
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d120      	bne.n	8007c48 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	1e9a      	subs	r2, r3, #2
 8007c0c:	88fb      	ldrh	r3, [r7, #6]
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	bf28      	it	cs
 8007c12:	4613      	movcs	r3, r2
 8007c14:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3302      	adds	r3, #2
 8007c1a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	82fb      	strh	r3, [r7, #22]
 8007c20:	e00b      	b.n	8007c3a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c22:	8afb      	ldrh	r3, [r7, #22]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	3301      	adds	r3, #1
 8007c32:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c34:	8afb      	ldrh	r3, [r7, #22]
 8007c36:	3302      	adds	r3, #2
 8007c38:	82fb      	strh	r3, [r7, #22]
 8007c3a:	8afa      	ldrh	r2, [r7, #22]
 8007c3c:	8abb      	ldrh	r3, [r7, #20]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d3ef      	bcc.n	8007c22 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
  }
}
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	881a      	ldrh	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	4413      	add	r3, r2
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4413      	add	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b086      	sub	sp, #24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	4613      	mov	r3, r2
 8007c96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	789b      	ldrb	r3, [r3, #2]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d002      	beq.n	8007caa <USBH_CtlReq+0x20>
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d00f      	beq.n	8007cc8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ca8:	e027      	b.n	8007cfa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	88fa      	ldrh	r2, [r7, #6]
 8007cb4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc6:	e018      	b.n	8007cfa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 f81b 	bl	8007d04 <USBH_HandleControl>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <USBH_CtlReq+0x54>
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d106      	bne.n	8007cec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	761a      	strb	r2, [r3, #24]
      break;
 8007cea:	e005      	b.n	8007cf8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d102      	bne.n	8007cf8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	709a      	strb	r2, [r3, #2]
      break;
 8007cf8:	bf00      	nop
  }
  return status;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7e1b      	ldrb	r3, [r3, #24]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	2b0a      	cmp	r3, #10
 8007d1c:	f200 8158 	bhi.w	8007fd0 <USBH_HandleControl+0x2cc>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBH_HandleControl+0x24>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6f 	.word	0x08007d6f
 8007d30:	08007dd9 	.word	0x08007dd9
 8007d34:	08007dff 	.word	0x08007dff
 8007d38:	08007e37 	.word	0x08007e37
 8007d3c:	08007e63 	.word	0x08007e63
 8007d40:	08007eb5 	.word	0x08007eb5
 8007d44:	08007ed7 	.word	0x08007ed7
 8007d48:	08007f13 	.word	0x08007f13
 8007d4c:	08007f3b 	.word	0x08007f3b
 8007d50:	08007f79 	.word	0x08007f79
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f103 0110 	add.w	r1, r3, #16
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	795b      	ldrb	r3, [r3, #5]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f945 	bl	8007ff0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	761a      	strb	r2, [r3, #24]
      break;
 8007d6c:	e13b      	b.n	8007fe6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	795b      	ldrb	r3, [r3, #5]
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fcc5 	bl	8008704 <USBH_LL_GetURBState>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d11e      	bne.n	8007dc2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	7c1b      	ldrb	r3, [r3, #16]
 8007d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	8adb      	ldrh	r3, [r3, #22]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d96:	7b7b      	ldrb	r3, [r7, #13]
 8007d98:	2b80      	cmp	r3, #128	; 0x80
 8007d9a:	d103      	bne.n	8007da4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2203      	movs	r2, #3
 8007da0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007da2:	e117      	b.n	8007fd4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2205      	movs	r2, #5
 8007da8:	761a      	strb	r2, [r3, #24]
      break;
 8007daa:	e113      	b.n	8007fd4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007dac:	7b7b      	ldrb	r3, [r7, #13]
 8007dae:	2b80      	cmp	r3, #128	; 0x80
 8007db0:	d103      	bne.n	8007dba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2209      	movs	r2, #9
 8007db6:	761a      	strb	r2, [r3, #24]
      break;
 8007db8:	e10c      	b.n	8007fd4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2207      	movs	r2, #7
 8007dbe:	761a      	strb	r2, [r3, #24]
      break;
 8007dc0:	e108      	b.n	8007fd4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d003      	beq.n	8007dd0 <USBH_HandleControl+0xcc>
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	f040 8102 	bne.w	8007fd4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	220b      	movs	r2, #11
 8007dd4:	761a      	strb	r2, [r3, #24]
      break;
 8007dd6:	e0fd      	b.n	8007fd4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6899      	ldr	r1, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	899a      	ldrh	r2, [r3, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	791b      	ldrb	r3, [r3, #4]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f93c 	bl	800806e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2204      	movs	r2, #4
 8007dfa:	761a      	strb	r2, [r3, #24]
      break;
 8007dfc:	e0f3      	b.n	8007fe6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	791b      	ldrb	r3, [r3, #4]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc7d 	bl	8008704 <USBH_LL_GetURBState>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d102      	bne.n	8007e1a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2209      	movs	r2, #9
 8007e18:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b05      	cmp	r3, #5
 8007e1e:	d102      	bne.n	8007e26 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e20:	2303      	movs	r3, #3
 8007e22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e24:	e0d8      	b.n	8007fd8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	f040 80d5 	bne.w	8007fd8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	220b      	movs	r2, #11
 8007e32:	761a      	strb	r2, [r3, #24]
      break;
 8007e34:	e0d0      	b.n	8007fd8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6899      	ldr	r1, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	899a      	ldrh	r2, [r3, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7958      	ldrb	r0, [r3, #5]
 8007e42:	2301      	movs	r3, #1
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	4603      	mov	r3, r0
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f8eb 	bl	8008024 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2206      	movs	r2, #6
 8007e5e:	761a      	strb	r2, [r3, #24]
      break;
 8007e60:	e0c1      	b.n	8007fe6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	795b      	ldrb	r3, [r3, #5]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fc4b 	bl	8008704 <USBH_LL_GetURBState>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d103      	bne.n	8007e80 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2207      	movs	r2, #7
 8007e7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e7e:	e0ad      	b.n	8007fdc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	d105      	bne.n	8007e92 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	220c      	movs	r2, #12
 8007e8a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e90:	e0a4      	b.n	8007fdc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d103      	bne.n	8007ea0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2205      	movs	r2, #5
 8007e9c:	761a      	strb	r2, [r3, #24]
      break;
 8007e9e:	e09d      	b.n	8007fdc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	f040 809a 	bne.w	8007fdc <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	220b      	movs	r2, #11
 8007eac:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb2:	e093      	b.n	8007fdc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	791b      	ldrb	r3, [r3, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f8d6 	bl	800806e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	761a      	strb	r2, [r3, #24]

      break;
 8007ed4:	e087      	b.n	8007fe6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	791b      	ldrb	r3, [r3, #4]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fc11 	bl	8008704 <USBH_LL_GetURBState>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d105      	bne.n	8007ef8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	220d      	movs	r2, #13
 8007ef0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ef6:	e073      	b.n	8007fe0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d103      	bne.n	8007f06 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	220b      	movs	r2, #11
 8007f02:	761a      	strb	r2, [r3, #24]
      break;
 8007f04:	e06c      	b.n	8007fe0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b05      	cmp	r3, #5
 8007f0a:	d169      	bne.n	8007fe0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f10:	e066      	b.n	8007fe0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	795a      	ldrb	r2, [r3, #5]
 8007f16:	2301      	movs	r3, #1
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2100      	movs	r1, #0
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f87f 	bl	8008024 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	220a      	movs	r2, #10
 8007f36:	761a      	strb	r2, [r3, #24]
      break;
 8007f38:	e055      	b.n	8007fe6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	795b      	ldrb	r3, [r3, #5]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fbdf 	bl	8008704 <USBH_LL_GetURBState>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d105      	bne.n	8007f5c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	220d      	movs	r2, #13
 8007f58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f5a:	e043      	b.n	8007fe4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d103      	bne.n	8007f6a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2209      	movs	r2, #9
 8007f66:	761a      	strb	r2, [r3, #24]
      break;
 8007f68:	e03c      	b.n	8007fe4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d139      	bne.n	8007fe4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	220b      	movs	r2, #11
 8007f74:	761a      	strb	r2, [r3, #24]
      break;
 8007f76:	e035      	b.n	8007fe4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	7e5b      	ldrb	r3, [r3, #25]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	765a      	strb	r2, [r3, #25]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	7e5b      	ldrb	r3, [r3, #25]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d806      	bhi.n	8007f9a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f98:	e025      	b.n	8007fe6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fa0:	2106      	movs	r1, #6
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	795b      	ldrb	r3, [r3, #5]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f90c 	bl	80081d0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	791b      	ldrb	r3, [r3, #4]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f906 	bl	80081d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fce:	e00a      	b.n	8007fe6 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e008      	b.n	8007fe6 <USBH_HandleControl+0x2e2>
      break;
 8007fd4:	bf00      	nop
 8007fd6:	e006      	b.n	8007fe6 <USBH_HandleControl+0x2e2>
      break;
 8007fd8:	bf00      	nop
 8007fda:	e004      	b.n	8007fe6 <USBH_HandleControl+0x2e2>
      break;
 8007fdc:	bf00      	nop
 8007fde:	e002      	b.n	8007fe6 <USBH_HandleControl+0x2e2>
      break;
 8007fe0:	bf00      	nop
 8007fe2:	e000      	b.n	8007fe6 <USBH_HandleControl+0x2e2>
      break;
 8007fe4:	bf00      	nop
  }

  return status;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af04      	add	r7, sp, #16
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ffe:	79f9      	ldrb	r1, [r7, #7]
 8008000:	2300      	movs	r3, #0
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	2308      	movs	r3, #8
 8008006:	9302      	str	r3, [sp, #8]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	9301      	str	r3, [sp, #4]
 800800c:	2300      	movs	r3, #0
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	2300      	movs	r3, #0
 8008012:	2200      	movs	r2, #0
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fb44 	bl	80086a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af04      	add	r7, sp, #16
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4611      	mov	r1, r2
 8008030:	461a      	mov	r2, r3
 8008032:	460b      	mov	r3, r1
 8008034:	80fb      	strh	r3, [r7, #6]
 8008036:	4613      	mov	r3, r2
 8008038:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008048:	7979      	ldrb	r1, [r7, #5]
 800804a:	7e3b      	ldrb	r3, [r7, #24]
 800804c:	9303      	str	r3, [sp, #12]
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	9302      	str	r3, [sp, #8]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	2301      	movs	r3, #1
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	2300      	movs	r3, #0
 800805c:	2200      	movs	r2, #0
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fb1f 	bl	80086a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b088      	sub	sp, #32
 8008072:	af04      	add	r7, sp, #16
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	60b9      	str	r1, [r7, #8]
 8008078:	4611      	mov	r1, r2
 800807a:	461a      	mov	r2, r3
 800807c:	460b      	mov	r3, r1
 800807e:	80fb      	strh	r3, [r7, #6]
 8008080:	4613      	mov	r3, r2
 8008082:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008084:	7979      	ldrb	r1, [r7, #5]
 8008086:	2300      	movs	r3, #0
 8008088:	9303      	str	r3, [sp, #12]
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	9302      	str	r3, [sp, #8]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	2301      	movs	r3, #1
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	2300      	movs	r3, #0
 8008098:	2201      	movs	r2, #1
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fb01 	bl	80086a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80080a0:	2300      	movs	r3, #0

}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b088      	sub	sp, #32
 80080ae:	af04      	add	r7, sp, #16
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	4611      	mov	r1, r2
 80080b6:	461a      	mov	r2, r3
 80080b8:	460b      	mov	r3, r1
 80080ba:	80fb      	strh	r3, [r7, #6]
 80080bc:	4613      	mov	r3, r2
 80080be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080ce:	7979      	ldrb	r1, [r7, #5]
 80080d0:	7e3b      	ldrb	r3, [r7, #24]
 80080d2:	9303      	str	r3, [sp, #12]
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	9302      	str	r3, [sp, #8]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	2301      	movs	r3, #1
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2302      	movs	r3, #2
 80080e2:	2200      	movs	r2, #0
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fadc 	bl	80086a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af04      	add	r7, sp, #16
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4611      	mov	r1, r2
 8008100:	461a      	mov	r2, r3
 8008102:	460b      	mov	r3, r1
 8008104:	80fb      	strh	r3, [r7, #6]
 8008106:	4613      	mov	r3, r2
 8008108:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800810a:	7979      	ldrb	r1, [r7, #5]
 800810c:	2300      	movs	r3, #0
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	88fb      	ldrh	r3, [r7, #6]
 8008112:	9302      	str	r3, [sp, #8]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	2301      	movs	r3, #1
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2302      	movs	r3, #2
 800811e:	2201      	movs	r2, #1
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fabe 	bl	80086a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af04      	add	r7, sp, #16
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	461a      	mov	r2, r3
 800813e:	4603      	mov	r3, r0
 8008140:	70fb      	strb	r3, [r7, #3]
 8008142:	460b      	mov	r3, r1
 8008144:	70bb      	strb	r3, [r7, #2]
 8008146:	4613      	mov	r3, r2
 8008148:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800814a:	7878      	ldrb	r0, [r7, #1]
 800814c:	78ba      	ldrb	r2, [r7, #2]
 800814e:	78f9      	ldrb	r1, [r7, #3]
 8008150:	8b3b      	ldrh	r3, [r7, #24]
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	7d3b      	ldrb	r3, [r7, #20]
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	7c3b      	ldrb	r3, [r7, #16]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	4603      	mov	r3, r0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa51 	bl	8008606 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa70 	bl	8008664 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f836 	bl	800820c <USBH_GetFreePipe>
 80081a0:	4603      	mov	r3, r0
 80081a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081a4:	89fb      	ldrh	r3, [r7, #14]
 80081a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00a      	beq.n	80081c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80081ae:	78fa      	ldrb	r2, [r7, #3]
 80081b0:	89fb      	ldrh	r3, [r7, #14]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	33e0      	adds	r3, #224	; 0xe0
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081c4:	89fb      	ldrh	r3, [r7, #14]
 80081c6:	b2db      	uxtb	r3, r3
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	2b0a      	cmp	r3, #10
 80081e0:	d80d      	bhi.n	80081fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	33e0      	adds	r3, #224	; 0xe0
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	33e0      	adds	r3, #224	; 0xe0
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
 800821c:	e00f      	b.n	800823e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	33e0      	adds	r3, #224	; 0xe0
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	b29b      	uxth	r3, r3
 8008236:	e007      	b.n	8008248 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	3301      	adds	r3, #1
 800823c:	73fb      	strb	r3, [r7, #15]
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	2b0a      	cmp	r3, #10
 8008242:	d9ec      	bls.n	800821e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008244:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008258:	2201      	movs	r2, #1
 800825a:	490e      	ldr	r1, [pc, #56]	; (8008294 <MX_USB_HOST_Init+0x40>)
 800825c:	480e      	ldr	r0, [pc, #56]	; (8008298 <MX_USB_HOST_Init+0x44>)
 800825e:	f7fe fc9f 	bl	8006ba0 <USBH_Init>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008268:	f7f8 fc20 	bl	8000aac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800826c:	490b      	ldr	r1, [pc, #44]	; (800829c <MX_USB_HOST_Init+0x48>)
 800826e:	480a      	ldr	r0, [pc, #40]	; (8008298 <MX_USB_HOST_Init+0x44>)
 8008270:	f7fe fd24 	bl	8006cbc <USBH_RegisterClass>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800827a:	f7f8 fc17 	bl	8000aac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800827e:	4806      	ldr	r0, [pc, #24]	; (8008298 <MX_USB_HOST_Init+0x44>)
 8008280:	f7fe fda8 	bl	8006dd4 <USBH_Start>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800828a:	f7f8 fc0f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	080082b5 	.word	0x080082b5
 8008298:	20000240 	.word	0x20000240
 800829c:	2000000c 	.word	0x2000000c

080082a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082a4:	4802      	ldr	r0, [pc, #8]	; (80082b0 <MX_USB_HOST_Process+0x10>)
 80082a6:	f7fe fda5 	bl	8006df4 <USBH_Process>
}
 80082aa:	bf00      	nop
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000240 	.word	0x20000240

080082b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d819      	bhi.n	80082fc <USBH_UserProcess+0x48>
 80082c8:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <USBH_UserProcess+0x1c>)
 80082ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ce:	bf00      	nop
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	080082ed 	.word	0x080082ed
 80082d8:	080082fd 	.word	0x080082fd
 80082dc:	080082f5 	.word	0x080082f5
 80082e0:	080082e5 	.word	0x080082e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082e4:	4b09      	ldr	r3, [pc, #36]	; (800830c <USBH_UserProcess+0x58>)
 80082e6:	2203      	movs	r2, #3
 80082e8:	701a      	strb	r2, [r3, #0]
  break;
 80082ea:	e008      	b.n	80082fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082ec:	4b07      	ldr	r3, [pc, #28]	; (800830c <USBH_UserProcess+0x58>)
 80082ee:	2202      	movs	r2, #2
 80082f0:	701a      	strb	r2, [r3, #0]
  break;
 80082f2:	e004      	b.n	80082fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082f4:	4b05      	ldr	r3, [pc, #20]	; (800830c <USBH_UserProcess+0x58>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	701a      	strb	r2, [r3, #0]
  break;
 80082fa:	e000      	b.n	80082fe <USBH_UserProcess+0x4a>

  default:
  break;
 80082fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	200000b4 	.word	0x200000b4

08008310 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	; 0x28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008318:	f107 0314 	add.w	r3, r7, #20
 800831c:	2200      	movs	r2, #0
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	605a      	str	r2, [r3, #4]
 8008322:	609a      	str	r2, [r3, #8]
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008330:	d147      	bne.n	80083c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008332:	2300      	movs	r3, #0
 8008334:	613b      	str	r3, [r7, #16]
 8008336:	4b25      	ldr	r3, [pc, #148]	; (80083cc <HAL_HCD_MspInit+0xbc>)
 8008338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833a:	4a24      	ldr	r2, [pc, #144]	; (80083cc <HAL_HCD_MspInit+0xbc>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	6313      	str	r3, [r2, #48]	; 0x30
 8008342:	4b22      	ldr	r3, [pc, #136]	; (80083cc <HAL_HCD_MspInit+0xbc>)
 8008344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800834e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008354:	2300      	movs	r3, #0
 8008356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008358:	2300      	movs	r3, #0
 800835a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	4619      	mov	r1, r3
 8008362:	481b      	ldr	r0, [pc, #108]	; (80083d0 <HAL_HCD_MspInit+0xc0>)
 8008364:	f7f9 f9e6 	bl	8001734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008368:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800836c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836e:	2302      	movs	r3, #2
 8008370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008376:	2300      	movs	r3, #0
 8008378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800837a:	230a      	movs	r3, #10
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800837e:	f107 0314 	add.w	r3, r7, #20
 8008382:	4619      	mov	r1, r3
 8008384:	4812      	ldr	r0, [pc, #72]	; (80083d0 <HAL_HCD_MspInit+0xc0>)
 8008386:	f7f9 f9d5 	bl	8001734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800838a:	4b10      	ldr	r3, [pc, #64]	; (80083cc <HAL_HCD_MspInit+0xbc>)
 800838c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838e:	4a0f      	ldr	r2, [pc, #60]	; (80083cc <HAL_HCD_MspInit+0xbc>)
 8008390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008394:	6353      	str	r3, [r2, #52]	; 0x34
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <HAL_HCD_MspInit+0xbc>)
 800839c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839e:	4a0b      	ldr	r2, [pc, #44]	; (80083cc <HAL_HCD_MspInit+0xbc>)
 80083a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083a4:	6453      	str	r3, [r2, #68]	; 0x44
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <HAL_HCD_MspInit+0xbc>)
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083b2:	2200      	movs	r2, #0
 80083b4:	2100      	movs	r1, #0
 80083b6:	2043      	movs	r0, #67	; 0x43
 80083b8:	f7f9 f985 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083bc:	2043      	movs	r0, #67	; 0x43
 80083be:	f7f9 f99e 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083c2:	bf00      	nop
 80083c4:	3728      	adds	r7, #40	; 0x28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	40023800 	.word	0x40023800
 80083d0:	40020000 	.word	0x40020000

080083d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff f8d9 	bl	800759a <USBH_LL_IncTimer>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff f911 	bl	8007626 <USBH_LL_Connect>
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff f91a 	bl	8007654 <USBH_LL_Disconnect>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
 8008434:	4613      	mov	r3, r2
 8008436:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff f8cb 	bl	80075ee <USBH_LL_PortEnabled>
}
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff f8cb 	bl	800760a <USBH_LL_PortDisabled>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800848a:	2b01      	cmp	r3, #1
 800848c:	d12a      	bne.n	80084e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800848e:	4a18      	ldr	r2, [pc, #96]	; (80084f0 <USBH_LL_Init+0x74>)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a15      	ldr	r2, [pc, #84]	; (80084f0 <USBH_LL_Init+0x74>)
 800849a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800849e:	4b14      	ldr	r3, [pc, #80]	; (80084f0 <USBH_LL_Init+0x74>)
 80084a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084a6:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <USBH_LL_Init+0x74>)
 80084a8:	2208      	movs	r2, #8
 80084aa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084ac:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <USBH_LL_Init+0x74>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084b2:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <USBH_LL_Init+0x74>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084b8:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <USBH_LL_Init+0x74>)
 80084ba:	2202      	movs	r2, #2
 80084bc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084be:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <USBH_LL_Init+0x74>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084c4:	480a      	ldr	r0, [pc, #40]	; (80084f0 <USBH_LL_Init+0x74>)
 80084c6:	f7f9 fae8 	bl	8001a9a <HAL_HCD_Init>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084d0:	f7f8 faec 	bl	8000aac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084d4:	4806      	ldr	r0, [pc, #24]	; (80084f0 <USBH_LL_Init+0x74>)
 80084d6:	f7f9 feeb 	bl	80022b0 <HAL_HCD_GetCurrentFrame>
 80084da:	4603      	mov	r3, r0
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff f84c 	bl	800757c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000618 	.word	0x20000618

080084f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800850a:	4618      	mov	r0, r3
 800850c:	f7f9 fe58 	bl	80021c0 <HAL_HCD_Start>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	4618      	mov	r0, r3
 8008518:	f000 f95c 	bl	80087d4 <USBH_Get_USB_Status>
 800851c:	4603      	mov	r3, r0
 800851e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008520:	7bbb      	ldrb	r3, [r7, #14]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008540:	4618      	mov	r0, r3
 8008542:	f7f9 fe60 	bl	8002206 <HAL_HCD_Stop>
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	4618      	mov	r0, r3
 800854e:	f000 f941 	bl	80087d4 <USBH_Get_USB_Status>
 8008552:	4603      	mov	r3, r0
 8008554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008556:	7bbb      	ldrb	r3, [r7, #14]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008568:	2301      	movs	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008572:	4618      	mov	r0, r3
 8008574:	f7f9 feaa 	bl	80022cc <HAL_HCD_GetCurrentSpeed>
 8008578:	4603      	mov	r3, r0
 800857a:	2b01      	cmp	r3, #1
 800857c:	d007      	beq.n	800858e <USBH_LL_GetSpeed+0x2e>
 800857e:	2b01      	cmp	r3, #1
 8008580:	d302      	bcc.n	8008588 <USBH_LL_GetSpeed+0x28>
 8008582:	2b02      	cmp	r3, #2
 8008584:	d006      	beq.n	8008594 <USBH_LL_GetSpeed+0x34>
 8008586:	e008      	b.n	800859a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
    break;
 800858c:	e008      	b.n	80085a0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800858e:	2301      	movs	r3, #1
 8008590:	73fb      	strb	r3, [r7, #15]
    break;
 8008592:	e005      	b.n	80085a0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008594:	2302      	movs	r3, #2
 8008596:	73fb      	strb	r3, [r7, #15]
    break;
 8008598:	e002      	b.n	80085a0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800859a:	2301      	movs	r3, #1
 800859c:	73fb      	strb	r3, [r7, #15]
    break;
 800859e:	bf00      	nop
  }
  return  speed;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7f9 fe3d 	bl	8002240 <HAL_HCD_ResetPort>
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f901 	bl	80087d4 <USBH_Get_USB_Status>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f9 fe45 	bl	8002286 <HAL_HCD_HC_GetXferCount>
 80085fc:	4603      	mov	r3, r0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008606:	b590      	push	{r4, r7, lr}
 8008608:	b089      	sub	sp, #36	; 0x24
 800860a:	af04      	add	r7, sp, #16
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	4608      	mov	r0, r1
 8008610:	4611      	mov	r1, r2
 8008612:	461a      	mov	r2, r3
 8008614:	4603      	mov	r3, r0
 8008616:	70fb      	strb	r3, [r7, #3]
 8008618:	460b      	mov	r3, r1
 800861a:	70bb      	strb	r3, [r7, #2]
 800861c:	4613      	mov	r3, r2
 800861e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800862e:	787c      	ldrb	r4, [r7, #1]
 8008630:	78ba      	ldrb	r2, [r7, #2]
 8008632:	78f9      	ldrb	r1, [r7, #3]
 8008634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4623      	mov	r3, r4
 8008646:	f7f9 fa8a 	bl	8001b5e <HAL_HCD_HC_Init>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f8bf 	bl	80087d4 <USBH_Get_USB_Status>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865a:	7bbb      	ldrb	r3, [r7, #14]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	bd90      	pop	{r4, r7, pc}

08008664 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7f9 fb03 	bl	8001c8e <HAL_HCD_HC_Halt>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f8a0 	bl	80087d4 <USBH_Get_USB_Status>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008698:	7bbb      	ldrb	r3, [r7, #14]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086a2:	b590      	push	{r4, r7, lr}
 80086a4:	b089      	sub	sp, #36	; 0x24
 80086a6:	af04      	add	r7, sp, #16
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	4608      	mov	r0, r1
 80086ac:	4611      	mov	r1, r2
 80086ae:	461a      	mov	r2, r3
 80086b0:	4603      	mov	r3, r0
 80086b2:	70fb      	strb	r3, [r7, #3]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70bb      	strb	r3, [r7, #2]
 80086b8:	4613      	mov	r3, r2
 80086ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086ca:	787c      	ldrb	r4, [r7, #1]
 80086cc:	78ba      	ldrb	r2, [r7, #2]
 80086ce:	78f9      	ldrb	r1, [r7, #3]
 80086d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086d4:	9303      	str	r3, [sp, #12]
 80086d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	4623      	mov	r3, r4
 80086e6:	f7f9 faf5 	bl	8001cd4 <HAL_HCD_HC_SubmitRequest>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f86f 	bl	80087d4 <USBH_Get_USB_Status>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	bd90      	pop	{r4, r7, pc}

08008704 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f7f9 fd9e 	bl	800225c <HAL_HCD_HC_GetURBState>
 8008720:	4603      	mov	r3, r0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	460b      	mov	r3, r1
 8008734:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800873c:	2b01      	cmp	r3, #1
 800873e:	d103      	bne.n	8008748 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f872 	bl	800882c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008748:	20c8      	movs	r0, #200	; 0xc8
 800874a:	f7f8 fc5d 	bl	8001008 <HAL_Delay>
  return USBH_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
 8008764:	4613      	mov	r3, r2
 8008766:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800876e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	68f9      	ldr	r1, [r7, #12]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	440b      	add	r3, r1
 800877e:	333b      	adds	r3, #59	; 0x3b
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	68f9      	ldr	r1, [r7, #12]
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	440b      	add	r3, r1
 8008794:	3350      	adds	r3, #80	; 0x50
 8008796:	78ba      	ldrb	r2, [r7, #2]
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	e009      	b.n	80087b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	440b      	add	r3, r1
 80087aa:	3351      	adds	r3, #81	; 0x51
 80087ac:	78ba      	ldrb	r2, [r7, #2]
 80087ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7f8 fc1e 	bl	8001008 <HAL_Delay>
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d817      	bhi.n	8008818 <USBH_Get_USB_Status+0x44>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USBH_Get_USB_Status+0x1c>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008801 	.word	0x08008801
 80087f4:	08008807 	.word	0x08008807
 80087f8:	0800880d 	.word	0x0800880d
 80087fc:	08008813 	.word	0x08008813
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
    break;
 8008804:	e00b      	b.n	800881e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008806:	2302      	movs	r3, #2
 8008808:	73fb      	strb	r3, [r7, #15]
    break;
 800880a:	e008      	b.n	800881e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
    break;
 8008810:	e005      	b.n	800881e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008812:	2302      	movs	r3, #2
 8008814:	73fb      	strb	r3, [r7, #15]
    break;
 8008816:	e002      	b.n	800881e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008818:	2302      	movs	r3, #2
 800881a:	73fb      	strb	r3, [r7, #15]
    break;
 800881c:	bf00      	nop
  }
  return usb_status;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
 8008844:	e001      	b.n	800884a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	461a      	mov	r2, r3
 800884e:	2101      	movs	r1, #1
 8008850:	4803      	ldr	r0, [pc, #12]	; (8008860 <MX_DriverVbusFS+0x34>)
 8008852:	f7f9 f909 	bl	8001a68 <HAL_GPIO_WritePin>
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	40020800 	.word	0x40020800

08008864 <__errno>:
 8008864:	4b01      	ldr	r3, [pc, #4]	; (800886c <__errno+0x8>)
 8008866:	6818      	ldr	r0, [r3, #0]
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	2000002c 	.word	0x2000002c

08008870 <__libc_init_array>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	4e0d      	ldr	r6, [pc, #52]	; (80088a8 <__libc_init_array+0x38>)
 8008874:	4c0d      	ldr	r4, [pc, #52]	; (80088ac <__libc_init_array+0x3c>)
 8008876:	1ba4      	subs	r4, r4, r6
 8008878:	10a4      	asrs	r4, r4, #2
 800887a:	2500      	movs	r5, #0
 800887c:	42a5      	cmp	r5, r4
 800887e:	d109      	bne.n	8008894 <__libc_init_array+0x24>
 8008880:	4e0b      	ldr	r6, [pc, #44]	; (80088b0 <__libc_init_array+0x40>)
 8008882:	4c0c      	ldr	r4, [pc, #48]	; (80088b4 <__libc_init_array+0x44>)
 8008884:	f000 f8ea 	bl	8008a5c <_init>
 8008888:	1ba4      	subs	r4, r4, r6
 800888a:	10a4      	asrs	r4, r4, #2
 800888c:	2500      	movs	r5, #0
 800888e:	42a5      	cmp	r5, r4
 8008890:	d105      	bne.n	800889e <__libc_init_array+0x2e>
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008898:	4798      	blx	r3
 800889a:	3501      	adds	r5, #1
 800889c:	e7ee      	b.n	800887c <__libc_init_array+0xc>
 800889e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088a2:	4798      	blx	r3
 80088a4:	3501      	adds	r5, #1
 80088a6:	e7f2      	b.n	800888e <__libc_init_array+0x1e>
 80088a8:	08008a98 	.word	0x08008a98
 80088ac:	08008a98 	.word	0x08008a98
 80088b0:	08008a98 	.word	0x08008a98
 80088b4:	08008a9c 	.word	0x08008a9c

080088b8 <malloc>:
 80088b8:	4b02      	ldr	r3, [pc, #8]	; (80088c4 <malloc+0xc>)
 80088ba:	4601      	mov	r1, r0
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	f000 b861 	b.w	8008984 <_malloc_r>
 80088c2:	bf00      	nop
 80088c4:	2000002c 	.word	0x2000002c

080088c8 <free>:
 80088c8:	4b02      	ldr	r3, [pc, #8]	; (80088d4 <free+0xc>)
 80088ca:	4601      	mov	r1, r0
 80088cc:	6818      	ldr	r0, [r3, #0]
 80088ce:	f000 b80b 	b.w	80088e8 <_free_r>
 80088d2:	bf00      	nop
 80088d4:	2000002c 	.word	0x2000002c

080088d8 <memset>:
 80088d8:	4402      	add	r2, r0
 80088da:	4603      	mov	r3, r0
 80088dc:	4293      	cmp	r3, r2
 80088de:	d100      	bne.n	80088e2 <memset+0xa>
 80088e0:	4770      	bx	lr
 80088e2:	f803 1b01 	strb.w	r1, [r3], #1
 80088e6:	e7f9      	b.n	80088dc <memset+0x4>

080088e8 <_free_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4605      	mov	r5, r0
 80088ec:	2900      	cmp	r1, #0
 80088ee:	d045      	beq.n	800897c <_free_r+0x94>
 80088f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f4:	1f0c      	subs	r4, r1, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfb8      	it	lt
 80088fa:	18e4      	addlt	r4, r4, r3
 80088fc:	f000 f8ac 	bl	8008a58 <__malloc_lock>
 8008900:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <_free_r+0x98>)
 8008902:	6813      	ldr	r3, [r2, #0]
 8008904:	4610      	mov	r0, r2
 8008906:	b933      	cbnz	r3, 8008916 <_free_r+0x2e>
 8008908:	6063      	str	r3, [r4, #4]
 800890a:	6014      	str	r4, [r2, #0]
 800890c:	4628      	mov	r0, r5
 800890e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008912:	f000 b8a2 	b.w	8008a5a <__malloc_unlock>
 8008916:	42a3      	cmp	r3, r4
 8008918:	d90c      	bls.n	8008934 <_free_r+0x4c>
 800891a:	6821      	ldr	r1, [r4, #0]
 800891c:	1862      	adds	r2, r4, r1
 800891e:	4293      	cmp	r3, r2
 8008920:	bf04      	itt	eq
 8008922:	681a      	ldreq	r2, [r3, #0]
 8008924:	685b      	ldreq	r3, [r3, #4]
 8008926:	6063      	str	r3, [r4, #4]
 8008928:	bf04      	itt	eq
 800892a:	1852      	addeq	r2, r2, r1
 800892c:	6022      	streq	r2, [r4, #0]
 800892e:	6004      	str	r4, [r0, #0]
 8008930:	e7ec      	b.n	800890c <_free_r+0x24>
 8008932:	4613      	mov	r3, r2
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	b10a      	cbz	r2, 800893c <_free_r+0x54>
 8008938:	42a2      	cmp	r2, r4
 800893a:	d9fa      	bls.n	8008932 <_free_r+0x4a>
 800893c:	6819      	ldr	r1, [r3, #0]
 800893e:	1858      	adds	r0, r3, r1
 8008940:	42a0      	cmp	r0, r4
 8008942:	d10b      	bne.n	800895c <_free_r+0x74>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	4401      	add	r1, r0
 8008948:	1858      	adds	r0, r3, r1
 800894a:	4282      	cmp	r2, r0
 800894c:	6019      	str	r1, [r3, #0]
 800894e:	d1dd      	bne.n	800890c <_free_r+0x24>
 8008950:	6810      	ldr	r0, [r2, #0]
 8008952:	6852      	ldr	r2, [r2, #4]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	4401      	add	r1, r0
 8008958:	6019      	str	r1, [r3, #0]
 800895a:	e7d7      	b.n	800890c <_free_r+0x24>
 800895c:	d902      	bls.n	8008964 <_free_r+0x7c>
 800895e:	230c      	movs	r3, #12
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	e7d3      	b.n	800890c <_free_r+0x24>
 8008964:	6820      	ldr	r0, [r4, #0]
 8008966:	1821      	adds	r1, r4, r0
 8008968:	428a      	cmp	r2, r1
 800896a:	bf04      	itt	eq
 800896c:	6811      	ldreq	r1, [r2, #0]
 800896e:	6852      	ldreq	r2, [r2, #4]
 8008970:	6062      	str	r2, [r4, #4]
 8008972:	bf04      	itt	eq
 8008974:	1809      	addeq	r1, r1, r0
 8008976:	6021      	streq	r1, [r4, #0]
 8008978:	605c      	str	r4, [r3, #4]
 800897a:	e7c7      	b.n	800890c <_free_r+0x24>
 800897c:	bd38      	pop	{r3, r4, r5, pc}
 800897e:	bf00      	nop
 8008980:	200000b8 	.word	0x200000b8

08008984 <_malloc_r>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	1ccd      	adds	r5, r1, #3
 8008988:	f025 0503 	bic.w	r5, r5, #3
 800898c:	3508      	adds	r5, #8
 800898e:	2d0c      	cmp	r5, #12
 8008990:	bf38      	it	cc
 8008992:	250c      	movcc	r5, #12
 8008994:	2d00      	cmp	r5, #0
 8008996:	4606      	mov	r6, r0
 8008998:	db01      	blt.n	800899e <_malloc_r+0x1a>
 800899a:	42a9      	cmp	r1, r5
 800899c:	d903      	bls.n	80089a6 <_malloc_r+0x22>
 800899e:	230c      	movs	r3, #12
 80089a0:	6033      	str	r3, [r6, #0]
 80089a2:	2000      	movs	r0, #0
 80089a4:	bd70      	pop	{r4, r5, r6, pc}
 80089a6:	f000 f857 	bl	8008a58 <__malloc_lock>
 80089aa:	4a21      	ldr	r2, [pc, #132]	; (8008a30 <_malloc_r+0xac>)
 80089ac:	6814      	ldr	r4, [r2, #0]
 80089ae:	4621      	mov	r1, r4
 80089b0:	b991      	cbnz	r1, 80089d8 <_malloc_r+0x54>
 80089b2:	4c20      	ldr	r4, [pc, #128]	; (8008a34 <_malloc_r+0xb0>)
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	b91b      	cbnz	r3, 80089c0 <_malloc_r+0x3c>
 80089b8:	4630      	mov	r0, r6
 80089ba:	f000 f83d 	bl	8008a38 <_sbrk_r>
 80089be:	6020      	str	r0, [r4, #0]
 80089c0:	4629      	mov	r1, r5
 80089c2:	4630      	mov	r0, r6
 80089c4:	f000 f838 	bl	8008a38 <_sbrk_r>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d124      	bne.n	8008a16 <_malloc_r+0x92>
 80089cc:	230c      	movs	r3, #12
 80089ce:	6033      	str	r3, [r6, #0]
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 f842 	bl	8008a5a <__malloc_unlock>
 80089d6:	e7e4      	b.n	80089a2 <_malloc_r+0x1e>
 80089d8:	680b      	ldr	r3, [r1, #0]
 80089da:	1b5b      	subs	r3, r3, r5
 80089dc:	d418      	bmi.n	8008a10 <_malloc_r+0x8c>
 80089de:	2b0b      	cmp	r3, #11
 80089e0:	d90f      	bls.n	8008a02 <_malloc_r+0x7e>
 80089e2:	600b      	str	r3, [r1, #0]
 80089e4:	50cd      	str	r5, [r1, r3]
 80089e6:	18cc      	adds	r4, r1, r3
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 f836 	bl	8008a5a <__malloc_unlock>
 80089ee:	f104 000b 	add.w	r0, r4, #11
 80089f2:	1d23      	adds	r3, r4, #4
 80089f4:	f020 0007 	bic.w	r0, r0, #7
 80089f8:	1ac3      	subs	r3, r0, r3
 80089fa:	d0d3      	beq.n	80089a4 <_malloc_r+0x20>
 80089fc:	425a      	negs	r2, r3
 80089fe:	50e2      	str	r2, [r4, r3]
 8008a00:	e7d0      	b.n	80089a4 <_malloc_r+0x20>
 8008a02:	428c      	cmp	r4, r1
 8008a04:	684b      	ldr	r3, [r1, #4]
 8008a06:	bf16      	itet	ne
 8008a08:	6063      	strne	r3, [r4, #4]
 8008a0a:	6013      	streq	r3, [r2, #0]
 8008a0c:	460c      	movne	r4, r1
 8008a0e:	e7eb      	b.n	80089e8 <_malloc_r+0x64>
 8008a10:	460c      	mov	r4, r1
 8008a12:	6849      	ldr	r1, [r1, #4]
 8008a14:	e7cc      	b.n	80089b0 <_malloc_r+0x2c>
 8008a16:	1cc4      	adds	r4, r0, #3
 8008a18:	f024 0403 	bic.w	r4, r4, #3
 8008a1c:	42a0      	cmp	r0, r4
 8008a1e:	d005      	beq.n	8008a2c <_malloc_r+0xa8>
 8008a20:	1a21      	subs	r1, r4, r0
 8008a22:	4630      	mov	r0, r6
 8008a24:	f000 f808 	bl	8008a38 <_sbrk_r>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d0cf      	beq.n	80089cc <_malloc_r+0x48>
 8008a2c:	6025      	str	r5, [r4, #0]
 8008a2e:	e7db      	b.n	80089e8 <_malloc_r+0x64>
 8008a30:	200000b8 	.word	0x200000b8
 8008a34:	200000bc 	.word	0x200000bc

08008a38 <_sbrk_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4c06      	ldr	r4, [pc, #24]	; (8008a54 <_sbrk_r+0x1c>)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4605      	mov	r5, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	f7f8 f9f8 	bl	8000e38 <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_sbrk_r+0x1a>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_sbrk_r+0x1a>
 8008a50:	602b      	str	r3, [r5, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	200008dc 	.word	0x200008dc

08008a58 <__malloc_lock>:
 8008a58:	4770      	bx	lr

08008a5a <__malloc_unlock>:
 8008a5a:	4770      	bx	lr

08008a5c <_init>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	bf00      	nop
 8008a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a62:	bc08      	pop	{r3}
 8008a64:	469e      	mov	lr, r3
 8008a66:	4770      	bx	lr

08008a68 <_fini>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr
